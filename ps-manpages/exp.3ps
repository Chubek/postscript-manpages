.\" This file has been generated by `ps-mkmanpage.pl`
.TH exp 3ps "" "2024-05-02" "PostScript Operator Manual"


.SH POSTFIX SIGNATURE
num1 abs num2
num1 num2 add sum
, 
, 
, 
array aload array0 ... arrayn-1 array
, 
, 
string seek anchorsearch
operator.
bool1 bool2 and bool3
, 
, 
, 
, 
x y r ang1 ang2 arc -
segments where arcs were\n      specified originally.
, 
, 
, 
x y r ang1 ang2 arcn -
, 
,\n      
, 
x1 y1 x2 y2 r arct - 2
,\n      
, 
x1 y1 x2 y2 r arcto xt1 yt1 xt2 yt2
,\n      
, 
int array array
ax ay string ashow -
any0 ... anyn-1 array astore array
1 of array and the\n      bottommost one into element 0 of array. Finally, it pushes array\n      back on the stack. Note that astore cannot be performed on 
error\n      occurs.
num den atan angle
cx cy char ax ay string awidthshow -
operator.
dict begin
pushes dict on the dictionary stack, making it the current\n      dictionary and installing it as the first of the dictionaries\n      consulted during implicit name lookup and by 
proc bind proc
int1 shift bitshift int2
file bytesavailable int
-\n      cachestatus bsize bmax msize mmax csize cmax blimit
num1 ceiling num2
string bool charpath -
and 
any1 ... anyn clear
- cleardictstack -
mark obj1 ... objn cleartomark -
- clip -
or 
and 
operator can\n      also be used to reset the clipping path to an earlier state.
and 
after it\n      has finished using the current path. Any subsequent path\n      construction operators will append to the current path unless\n      newpath is executed explicitly. This can cause unexpected\n      behavior.
- clippath -
or 
operator, the path set by clippath is generally\n      suitable only for filling or clipping. It is not suitable for\n      stroking because it may contain interior segments or disconnected\n      subpaths produced by the clipping process.
file closefile -
- closepath -
width height bits/comp matrix
LEVEL 2
and 
matrix concat -
matrix1 matrix2 matrix3 concatmatrix\n      matrix3
- condition condition DPS
(error) LEVEL 2
or 
has\n      been executed with a request for a feature that either is not\n      available in the interpreter implementation or is not currently\n      available because of the state of the hardware. For 
any1 ... anyn n copy any1 ... anyn any1 ... anyn
and other operators that copy\n      only the objects themselves . However, copy performs only one\n      level of copying. It does not apply recursively to elements that\n      are themselves composite objects; instead, the values of those\n      elements become shared.
error occurs\n      .
- copypage -
or the NumCopies parameter of 
angle cos real
any1 ... anyn count any1 ... anyn n
- countdictstack int
- countexecstack int
mark obj1 ... objn counttomark mark obj1 ...\n      objn n
proc string cshow - LEVEL 2
is restored.
- currentblackgeneration proc\n      LEVEL 2
- currentcacheparams mark size lower\n      upper LEVEL 2
- currentcmykcolor cyan magenta yellow\n      black LEVEL 2
- currentcolor comp1 comp2 ... compm LEVEL\n      2
- currentcolorrendering dict LEVEL\n      2
- currentcolorscreen redfreq redang\n      redproc LEVEL 2
- currentcolorspace array LEVEL 2
- currentcolortransfer redproc\n      greenproc blueproc grayproc LEVEL 2
was used,\n      currentcolortransfer returns the single transfer function,\n      repeated four times.
- currentcontext context DPS
- currentdash array offset
string currentdevparams dict LEVEL 2
- currentdict dict
- currentfile file
- currentflat num
- currentfont font
- currentglobal bool LEVEL 2
- currentgray num
gstate currentgstate gstate LEVEL 2
- currenthalftone halftone LEVEL 2
, 
- currenthalftonephase x y DPS
- currenthsbcolor hue saturation\n      brightness
- currentlinecap int
- currentlinejoin int
- currentlinewidth num
matrix currentmatrix matrix
- currentmiterlimit num
- currentobjectformat int LEVEL 2
- currentoverprint bool LEVEL 2
- currentpacking bool LEVEL 2
- currentpagedevice dict LEVEL 2
- currentpoint x y
- currentrgbcolor red green blue
- currentscreen frequency angle proc
currentscreen 60 0 halftone
was executed, currentscreen returns the\n      parameters for the gray screen.
was\n      executed, currentscreen returns a frequency of 60, an angle of 0,\n      and the halftone dictionary.
- currentshared bool LEVEL 2
- currentstrokeadjust bool LEVEL\n      2
- currentsystemparams dict LEVEL\n      2
- currenttransfer proc
was\n      executed, currenttransfer returns the gray transfer function.
- currentundercolorremoval proc\n      LEVEL 2
- currentuserparams dict
x1 y1 x2 y2 x3 y3 curveto -
num cvi int
error if a real is\n      too large to convert to an integer. (See the 
operators, which remove fractional parts without\n      performing type conversion.)
any cvlit any
string cvn name
num cvr real
num radix string cvrs substring
any string cvs substring
any cvx any
key value def
associates key with value in the current dictionary-the one on\n      the top of the dictionary stack . If key is already present in\n      the current dictionary, def simply replaces its value. Otherwise,\n      def creates a new entry for key and stores value with it.
error\n      occurs .
matrix defaultmatrix matrix
key font definefont font
operating on the Font\n      category.
key instance category defineresource\n      instance LEVEL 2
returns false), the effect of defineresource\n      is undone by the next nonnested 
returns\n      true), the effect of defineresource persists until global VM is\n      restored at the end of the job. If the current job is not\n      encapsulated, the effect of a global defineresource persists\n      indefinitely, and may be visible to other execution contexts.
error occurs. If the\n      instance is of the wrong type for the specified category, a 
error occurs. If\n      the instance is in local VM but the current VM allocation mode is\n      global, an 
error occurs. This is analogous to storing a\n      local object into a global dictionary. Other errors can occur for\n      specific categories. For example, when dealing with the Font\n      category, defineresource can execute an 
error.
index name defineusername - DPS
error will\n      occur). There may be an implementation limit on index values.\n      Assigning index values sequentially starting at zero is strongly\n      recommended.
index any defineuserobject - LEVEL 2
array. First, it creates a UserObjects array in\n      userdict if one is not already present. It extends an existing\n      UserObjects array if necessary. It then executes the equivalent\n      of
filename deletefile - LEVEL 2
error occurs. If the device does not\n      allow this operation, an 
error occurs. If an environment dependent\n      error is detected, an 
, 
context detach - DPS
error if context is not a valid context\n      identifier or if the context has already been joined or detached.\n      It is permissible for context to identify the current context.
- deviceinfo dict DPS
error results.
int dict dict
error.
(error)
array dictstack subarray
error.
(error)
(error)
num1 num2 div quotient
dx dy dtransform dx` dy`
any dup any any
bool echo
specifies whether the special files %lineedit and\n      %statementedit are to copy characters from the standard input\n      file to the standard output file. This affects only the behavior\n      of 
file eexec
on the dictionary\n      stack. This ensures that the operators executed by the encrypted\n      program have their standard meanings. When the decryption filter\n      file is closed either explicitly or implicitly, the dictionary\n      stack is popped. The program must be aware that it is being\n      executed with 
as\n      the current dictionary; in particular, any definitions that it\n      makes must be into a specific dictionary rather than the current\n      one, since 
is\n      read-only.
- end -
- eoclip -
- eofill -
- eoviewclip LEVEL 2
any1 any2 eq bool
if they are equal, 
if not. The definition of\n      equality depends on the types of the objects being compared.\n      Simple objects are equal if their types and values are the same.\n      Strings are equal if their lengths and individual elements are\n      equal. Other composite objects (arrays and dictionaries) are\n      equal only if they share the same value. Separate values are\n      considered unequal, even if all the components of those values\n      are the same.
- erasepage -
after imaging. There\n      are few situations in which a PostScript language page\n      description should execute erasepage explicitly, because the\n      operator affects portions of the current page outside the current\n      clip path. It is usually more appropriate to erase just the\n      inside of the current clip path (see\n\n    
- errordict dict
associated with the\n      dictionary object.
any1 any2 exch any2 any1
any exec -
form execform - LEVEL 2
array execstack subarray
error.
(error)
index execuserobject - LEVEL 2
array.\n      execuserobject is equivalent to:
is not\n      defined in userdict because defineuserobject has never been\n      executed, an 
error\n      occurs. If index is not a valid index for the existing 
array, a 
error occurs. If\n      index is a valid index but 
has not been executed previously for that\n      index, a null object is returned.
, 
array executeonly array
error will result), but it can still be\n      executed by the PostScript interpreter-for example, by invoking\n      it with exec.
- executive -
- exit -
or 
operator, it executes the 
error (still in\n      the context of the 
or 
context.
- exitserver -
base exponent exp real

.SH DESCRIPTION
 returns the absolute value of num1. The type of the result is the same as the type of num1 unless  num1 is the most negative integer, in which case the result is a  real. 

.SH EXAMPLE
.RI 


4.5 abs 4.5

-3 abs 3

0 abs 0

 

 

3 4 add 7

 

9.9 1.1 add 11.0

 

[23 (ab) -6] aload 23 (ab) -6 [23 (ab) -6]

 

(abbc) (ab) anchorsearch (bc) (ab) true

(abbc) (bb) anchorsearch (abbc) false

(abbc) (bc) anchorsearch (abbc) false

(abbc) (B) anchorsearch (abbc) false

 

true true and true % a complete truth table

true false and false

false true and false

false false and false

 

99 1 and 1

52 7 and 4

 

newpath 0 0 moveto 0 0 1 0 45 arc closepath

 

This constructs a 1-unit radius, 45-degree &quot;pie\n      slice.&quot;

 

newpath 0 0 2 0 90 arc 0 0 1 90 0 arcn closepath

 

This constructs a 2-unit radius, 1-unit wide, 90-degree\n      &quot;windshield wiper swath.&quot;

 

newpath 0 0 moveto

0 4 4 4 1 arct

4 4 lineto

 

This constructs a 4-unit wide, 4-unit high right angle with a\n      1-unit radius &quot;rounded corner.&quot;

 

3 array [null null null]

 

/Helvetica findfont 12 scalefont setfont

14 61 moveto (Normal spacing) show

14 47 moveto 4 0 (Wide spacing) ashow

 

(a) (bcd) (ef) 3 array astore [(a) (bcd) (ef)]

 

This creates a three element array, stores the strings (a),\n      (bcd), and (ef) into it as elements 0, 1, and 2, and leaves the\n      array object on the operand stack.

 

0 1 atan 0.0

1 0 atan 90.0

-100 0 atan 270.0

4 4 atan 45.0

 

/Helvetica findfont 12 scalefont setfont

30 60 moveto (Normal spacing) show

30 46 moveto 6 0 8#040 .5 0 (Wide spacing) awidthshow

 

7 3 bitshift -&gt; 56

142 -3 bitshift -&gt; 17

 

3.2 ceiling -&gt; 4.0

-4.8 ceiling -&gt; -4.0

99 ceiling -&gt; 99

 

clippath 1 setgray fill

 

This erases (fills with white) the interior of the current\n      clipping path.

 

1 2 3 2 copy -&gt; 1 2 3 2 3

1 2 3 0 copy -&gt; 1 2 3

 

In the other instances, copy copies all the elements of the first\n      composite object into the second. The composite object operands\n      must be of the same type, except that a packed array can be\n      copied into an array. This form of copy copies the value of a\n      composite object. This is quite different from 

 

In the case of arrays or strings, the length of the second object\n      must be at least as great as the first; copy returns the initial\n      subarray or substring of the second operand into which the\n      elements were copied. Any remaining elements of array2 or string2\n      are unaffected. copy cannot copy into packed arrays, because they\n      are read-only, but it can copy packed arrays into ordinary\n      arrays.

 

In the case of dictionaries, Level 1 implementations require that\n      dict2 have a length of zero and a maxlength at least as great as\n      the length of dict1. Level 2 implementations do not impose this\n      restriction, since dictionaries can expand when necessary.

 

The attributes (literal or executable and access) of the result\n      are normally the same as those of the second operand. However, in\n      Level 1 implementations, the access attribute of dict2 is copied\n      from that of dict1.

 

If the value of the destination object is in global VM and any of\n      the elements copied from the source object are composite objects\n      whose values are in local VM, an 

 

/a1 [1 2 3] def

a1 dup length array copy -&gt; [1 2 3]

 

0 cos -&gt; 1.0

90 cos -&gt; 0.0

 

clear count -&gt; 0

clear 1 2 3 count -&gt; 1 2 3 3

 

1 mark 2 3 counttomark -&gt; 1 mark 2 3 2

1 mark counttomark -&gt; 1 mark 0

 

/str 100 string def

currentfile str readline

here is a line of text

pop /textline exch def

 

After execution of this example, the name /textline

is associated with the string &quot;here is a line of\n      text&quot;.

 

(3.3E1) cvi -&gt; 33

-47.8 cvi -&gt; -47

520.9 cvi -&gt; 520

 

(abc) cvn -&gt; /abc

(abc) cvx cvn -&gt; abc

 

/temp 12 string def

123 10 temp cvrs -&gt; (123)

-123 10 temp cvrs -&gt; (-123)

123.4 10 temp cvrs -&gt; (123.4)

123 16 temp cvrs -&gt; (7B)

-123 16 temp cvrs -&gt; (FFFFFF85)

123.4 16 temp cvrs -&gt; (7B)

 

/str 20 string def

123 456 add str cvs -&gt; (579)

mark str cvs -&gt; (--nostringval--)

 

/ncnt 1 def % Define ncnt to be 1 in current

dict

/ncnt ncnt 1 add def % ncnt now has value 2

 

3 2 div -&gt; 1.5

4 2 div -&gt; 2.0

 

4.0 4 eq -&gt; true % A real and an integer may be equal

(abc) (abc) eq -&gt; true % Strings with equal elements are\n      equal

 

(abc) /abc eq -&gt; true % A string and a name may be equal

[1 2 3] dup eq -&gt; true % An array is equal to itself

[1 2 3] [1 2 3] eq -&gt; false % Distinct array objects not\n      equal

 

1 2 exch -&gt; 2 1

 

(3 2 add) cvx exec -&gt; 5

3 2 /add exec -&gt; 3 2 /add

3 2 /add cvx exec -&gt; 5

 

In the first line, the string (3 2 add) is made executable and\n      then executed. Executing a string causes its characters to be\n      scanned and interpreted according to the PostScript language\n      syntax rules.

 

In the second line, the literal objects 3, 2, and /add are pushed\n      on the operand stack, then exec is applied to the add. Since the\n      add is a literal name, executing it simply causes it to be pushed\n      back on the operand stack. The exec in this case has no useful\n      effect.

 

In the third line, the literal name /add on the top of the\n      operand stack is made executable by 

 

9 0.5 exp -&gt; 3.0

-9 -1 exp -&gt; -0.111111

 
.RE 


.SH ERRORS
.B  establishes an association between the non-negative integer index\n      and the object any in the (3ps)
.B  userdict /UserObjects get(3ps)
.B  3 1 roll put(3ps)
.B  In other words, it simply stores any into the array at the\n      position specified by index.(3ps)
.B  If defineuserobject creates or extends the UserObjects array, it\n      allocates the array in local VM, regardless of the current VM\n      allocation mode.(3ps)
.B  The behavior of defineuserobject obeys normal PostScript language\n      semantics in all respects. In particular, the modification to the\n      UserObjects array and to userdict, if any, is immediately visible\n      to all contexts that share the same local VM. It can be undone by\n      a subsequent (3ps)
.B  according to the usual VM rules. index values must be within the\n      range permitted for arrays; a large index value may cause\n      allocation of an array that would exhaust VM resources. Assigning\n      index values sequentially starting at zero is strongly\n      recommended.(3ps)
.B  creates an empty dictionary with an initial capacity of int\n      elements and pushes the created dictionary object on the operand\n      stack. int is expected to be a nonnegative integer. The\n      dictionary is allocated in local or global VM according to the VM\n      allocation mode.(3ps)
.B  In Level 1 implementations, the resulting dictionary has a\n      maximum capacity of int elements. Attempting to exceed that limit\n      causes a (3ps)
.B  In Level 2 implementations, the int operand specifies only the\n      initial capacity; the dictionary can grow beyond that capacity if\n      necessary. The dict operator immediately consumes sufficient VM\n      to hold int key-value pairs. If more than that number of entries\n      are subsequently stored in the dictionary, additional VM is\n      consumed at that time.(3ps)
.B  There is a cost associated with expanding a dictionary beyond its\n      initial allocation. For efficiency reasons, a dictionary is\n      expanded in chunks rather than one element at a time, so it may\n      contain a substantial amount of unused space. If a program knows\n      how large a dictionary it needs, it should create one of that\n      size initially. On the other hand, if a program cannot predict\n      how large the dictionary will eventually grow, it should choose a\n      small initial allocation sufficient for its immediate needs. The\n      built-in writable dictionaries (for example, (3ps)
.B  stackunderflow(3ps)
.B  typecheck(3ps)
.B  undefinedresult(3ps)

.SH SEE ALSO
.B  returns the sum of num1 and num2.(3ps)
.B  If both operands are integers and the result is within integer\n      range, the result is an integer; otherwise, the result is a\n      real.(3ps)
.B  packedarray aload packedarray0 ... packedarrayn-1 packedarray(3ps)
.B  successively pushes all n elements of array or packedarray on the\n      operand stack (where n is the length of the operand), and finally\n      pushes the operand itself.(3ps)
.B  post match true (if found)(3ps)
.B  string false (if not found)(3ps)
.B  determines if the string seek matches the initial substring of\n      string(3ps)
.B  (that is, string is at least as long as seek and the\n      corresponding characters are equal).(3ps)
.B  If it matches, anchorsearch splits string into two segments:\n      match, the portion of string that matches seek, and post, the\n      remainder of string; it then pushes the string objects post and\n      match and the boolean (3ps)
.B  int1 int1 and int1(3ps)
.B  If the operands are booleans, and returns their logical\n      conjunction. If the operands are integers, and returns the\n      bitwise and of their binary representations.(3ps)
.B  appends a counterclockwise arc of a circle to the current path,\n      possibly preceded by a straight line segment. The arc has (x, y)\n      as center, r as radius, ang1 the angle of a vector from (x, y) of\n      length r to the first endpoint of the arc, and ang2 the angle of\n      a vector from (x, y) of length r to the second endpoint of the\n      arc.(3ps)
.B  If there is a current point, the arc operator includes a straight\n      line segment from the current point to the first endpoint of this\n      arc and then adds the arc into the current path. If the current\n      path is empty, the arc operator does not produce the initial\n      straight line segment. In any event, the second endpoint of the\n      arc becomes the new current point.(3ps)
.B  Angles are measured in degrees counterclockwise from the positive\n      x-axis of the current user coordinate system. The curve produced\n      is circular in user space. If user space is scaled non-uniformly\n      (i.e., differently in x and y) arc will produce elliptical curves\n      in device space.(3ps)
.B  The operators that produce arcs ( (3ps)
.B  represent them internally as one or more Bezier cubic curves.\n      This is done with sufficient accuracy that a faithful rendition\n      of an arc is produced. However, a program that reads the\n      constructed path using pathforall will encounter (3ps)
.B  , (3ps)
.B  (arc negative) behaves like arc, but arcn builds its arc segment\n      in a clockwise direction in user space.(3ps)
.B  appends an arc of a circle to the current path, possibly preceded\n      by a straight line segment. The arc is defined by a radius r and\n      two tangent lines.The tangent lines are those drawn from the\n      current point, here called (x0, y0), to (x1, y1), and from (x1,\n      y1) to (x2, y2). If the current point is undefined, arct executes\n      the error (3ps)
.B  The center of the arc is located within the inner angle between\n      the tangent lines. It is the only point located at distance r in\n      a direction perpendicular to both lines. The arc begins at the\n      first tangent point (xt1, yt1) on the first tangent line, passes\n      between its center and the point (x1, y1), and ends at the second\n      tangent point (xt2, yt2) on the second tangent line.(3ps)
.B  Before constructing the arc, arct adds a straight line segment\n      from the current point (x0, y0) to (xt1, yt1), unless those\n      points are the same. In any event, (xt2, yt2) becomes the new\n      current point.(3ps)
.B  The curve produced is circular in user space. If user space is\n      scaled non-uniformly (i.e., differently in x and y) arct will\n      produce elliptical curves in device space.(3ps)
.B  If the two tangent lines are collinear, arct merely appends a\n      straight line segment from (x0, y0) to (x1, y1), considering the\n      arc to be part of a degenerate circle with radius 0 at that\n      point.(3ps)
.B  produces the same effect as arct. It also returns the two tangent\n      point coordinates (xt1, yt1) and (xt2, yt2) in user space.(3ps)
.B  arcto is not allowed as an element of a user path, whereas arct\n      is allowed.(3ps)
.B  creates an array of length int, each of whose elements is\n      initialized with a null object, and pushes this array on the\n      operand stack. The int operand must be a non-negative integer not\n      greater than the maximum allowable array length . The array is\n      allocated in local or global VM according to the current VM\n      allocation mode.(3ps)
.B  paints the characters of string in a manner similar to (3ps)
.B  This operator enables a string of text to be fitted to a specific\n      width by adjusting all the spaces between characters by a uniform\n      amount.(3ps)
.B  If the value of array is in global VM and any of any0 ... anyn-1\n      are composite objects whose values are in local VM, an (3ps)
.B  returns the angle (in degrees between 0 and 360) whose tangent is\n      num/den. Either num or den may be zero, but not both. The signs\n      of num and den determine the quadrant in which the result will\n      lie: a positive num yields a result in the positive y plane, a\n      positive den yields a result in the positive x plane. The result\n      is a real.(3ps)
.B  paints the characters of string in a manner similar to show, but\n      combines the special effects of ashow and widthshow. awidthshow\n      adjusts the width of each character shown by adding ax to its x\n      width and ay to its y width, thus modifying the spacing between\n      characters. Furthermore, awidthshow modifies the width of each\n      occurrence of the character char by an additional amount (cx,\n      cy). The interpretation of char is as described for the (3ps)
.B  This operator enables fitting a string of text to a specific\n      width by adjusting all of the spaces between characters by a\n      uniform amount, while independently controlling the width of some\n      specific character, such as the space character.(3ps)
.B  replaces executable operator names in proc by their values. For\n      each element of proc that is an executable name, bind looks up\n      the name in the context of the current dictionary stack as if by\n      (3ps)
.B  For each procedure object in proc, bind applies itself\n      recursively to that procedure, makes the procedure read-only, and\n      stores it back into proc. The bind operator applies to both\n      arrays and packed arrays, but it treats their access attributes\n      differently. It will ignore a read-only array; that is, it will\n      neither bind elements of the array nor examine nested procedures.\n      On the other hand, bind will operate on a packed array (which is\n      always read-only), disregarding its access attribute.(3ps)
.B  No error occurs in either case.(3ps)
.B  The effect of bind is that all operator names in proc and in\n      procedures nested in proc to any depth become &quot;tightly\n      bound&quot; to the operators themselves. During subsequent\n      execution of proc, the interpreter encounters the operators\n      themselves rather than the names of operators.(3ps)
.B  shifts the binary representation of int1 left by shift bits and\n      returns the result. Bits shifted out are lost; bits shifted in\n      are zero. If shift is negative, then a right shift by -shift bits\n      is performed. This produces an arithmetically correct result only\n      for positive values of int1. Both int1 and shift must be\n      integers.(3ps)
.B  returns the number of bytes that are immediately available for\n      reading from file without waiting.(3ps)
.B  The result is -1 if end-of-file has been encountered or if the\n      number of bytes available cannot be determined for other\n      reasons.(3ps)
.B  returns measurements of several aspects of the font cache .(3ps)
.B  cachestatus reports the current consumption and limit for each of\n      three font cache resources: bytes of bitmap storage (bsize and\n      bmax), font/matrix combinations (msize and mmax), and total\n      number of cached characters (csize and cmax). It also reports the\n      limit on the number of bytes occupied by a single cached\n      character (blimit). Characters whose bitmaps are larger than this\n      are not cached.(3ps)
.B  returns the least integer value greater than or equal to num1.(3ps)
.B  The type of the result is the same as the type of the operand.(3ps)
.B  obtains the character path outlines that would result if string\n      were shown at the current point using show. Instead of painting\n      the path, however, charpath appends the path to the current path.\n      This yields a result suitable for general filling, stroking, or\n      clipping(3ps)
.B  The bool operand determines what happens if the character path is\n      designed to be stroked rather than filled or outlined. If bool is\n      (3ps)
.B  The outlines of some fonts are protected. (In Level 1\n      implementations, this applies to all fonts; in Level 2, only to\n      certain special fonts and not to ordinary Type 1 or Type 3\n      fonts.) If the current font is protected, using charpath to\n      obtain its outlines causes the (3ps)
.B  operators to be disabled for as long as those outlines remain in\n      the current path.(3ps)
.B  pops all objects from the operand stack and discards them.(3ps)
.B  pops all dictionaries off the dictionary stack except for the\n      permanent entries. In Level 1 implementations the permanent\n      entries are systemdict and userdict; in Level 2 they are (3ps)
.B  (In Level 1 implementations, cleardictstack is a procedure\n      defined in userdict instead of an operator defined in\n      systemdict.)(3ps)
.B  pops the operand stack repeatedly until it encounters a mark,\n      which it also pops from the stack(3ps)
.B  (obj1 through objn are any objects other than marks).(3ps)
.B  intersects the inside of the current clipping path with the\n      inside of the current path to produce a new, smaller current\n      clipping path.(3ps)
.B  The inside of the current path is determined by the normal\n      PostScript non-zero winding number rule , while the inside of the\n      current clipping path is determined by whatever rule was used at\n      the time that path was created.(3ps)
.B  In general, clip produces a new path whose inside (according to\n      the non-zero winding number rule) consists of all areas that are\n      inside both of the original paths. The way this new path is\n      constructed (the order of its segments, whether it\n      self-intersects, etc.) is not specified.(3ps)
.B  clip treats an open subpath of the current path as though it were\n      closed; it does not actually alter the path itself. It is\n      permissible for the current path to be empty. The result of\n      executing clip is always a non-empty clipping path, though it may\n      enclose zero area.(3ps)
.B  There is no way to enlarge the current clipping path (other than\n      by (3ps)
.B  Unlike (3ps)
.B  sets the current path to one that describes the current clipping\n      path.(3ps)
.B  This operator is useful for determining the exact extent of the\n      imaging area on the current output device.(3ps)
.B  If the current clipping path is the result of application of the\n      (3ps)
.B  closes file-in other words, breaks the association between the\n      file object and the underlying file. For an output file,\n      closefile first performs a\n\n    (3ps)
.B  closes the current subpath by appending a straight line segment\n      connecting the current point to the subpath\#39;s starting\n      point-generally, the point most recently specified by (3ps)
.B  closepath terminates the current subpath. Appending another\n      segment to the current path will begin a new subpath, even if it\n      is drawn from the endpoint reached by the closepath.(3ps)
.B  paints a sampled image onto the current page.(3ps)
.B  The description here only summarizes the colorimage operator.(3ps)
.B  The sampled image is a rectangular array of width x height sample\n      values. colorimage interprets the width, height, and matrix\n      operands in the same way as does (3ps)
.B  Each image sample consists of 1, 3, or 4 color components, as\n      specified by the ncomp operand. Each component consists of\n      bits/comp bits (1, 2, 4, 8, or 12). All components are the same\n      size.(3ps)
.B  If ncomp is 1, the samples have only one (gray) component; the\n      operation of colorimage is equivalent to that of image using the\n      first five operands. If ncomp is 3, the samples consist of red,\n      green, and blue components. If ncomp is 4, the samples consist of\n      cyan, magenta, yellow, and black components. The 1, 3, and 4\n      component values are interpreted according to the DeviceGray,\n      DeviceRGB, and DeviceCMYK color spaces, respectively , regardless\n      of the current color space.(3ps)
.B  The multi operand is a boolean that determines how colorimage is\n      to obtain sample data from its data sources. If multi is false,\n      there is a single data source, datasrc0; colorimage obtains all\n      components from that source, interleaved on a per-sample basis.\n      If multi is true, there are ncomp data sources, datasrc0 ...\n      datasrcn-1, one for each component. The data sources can be\n      procedures, strings, or files, including filtered files. They\n      must all be of the same type .(3ps)
.B  Unlike (3ps)
.B  Execution of this operator is not permitted in certain\n      circumstances.(3ps)
.B  concatenates matrix with the current transformation matrix (CTM).\n      Precisely, concat replaces the CTM by matrix x CTM . The effect\n      of this is to define a new user space whose coordinates are\n      transformed into the former user space according to matrix.(3ps)
.B  Examples(3ps)
.B  [72 0 0 72 0 0] concat(3ps)
.B  72 72 scale(3ps)
.B  The two examples have the same effect on the current\n      transformation.(3ps)
.B  replaces the value of matrix3 by the result of multiplying\n      matrix1 x matrix2, and pushes the modified matrix3 back on the\n      operand stack. This operator does not affect the CTM.(3ps)
.B  creates a new condition object, unequal to any condition object\n      already in existence, and pushes it on the operand stack. The\n      condition initially has no contexts waiting on it . Since a\n      condition is a composite object, creating one consumes VM. The\n      condition\#39;s value is allocated in local or global VM\n      according to the current VM allocation mode.(3ps)
.B  occurs when (3ps)
.B  When a configurationerror is generated, a two-element array\n      called errorinfo is placed in (3ps)
.B  array1 array2 copy subarray2(3ps)
.B  dict1 dict2 copy dict2(3ps)
.B  string1 string2 copy substring2(3ps)
.B  packedarray1 array2 copy subarray2(3ps)
.B  gstate1 gstate2 copy gstate2(3ps)
.B  performs two entirely different functions, depending on the type\n      of the topmost operand.(3ps)
.B  In the first instance, where the top element on the operand stack\n      is a non-negative integer n, copy pops n from the stack and\n      duplicates the top n elements on the operand stack as shown\n      above. This form of copy operates only on the objects themselves,\n      not on the values of composite objects.(3ps)
.B  transmits one copy of the current page to the current output\n      device without erasing the current page or changing the graphics\n      state. This is in contrast to showpage, which performs the\n      equivalent of an (3ps)
.B  and an (3ps)
.B  copypage is intended primarily as a debugging aid or as a means\n      of printing successive pages with incrementally accumulated\n      contents. Routine use of copypage as a substitute for showpage\n      may severely degrade the page throughput of some PostScript\n      printers. To print multiple copies of the same page, use\n      the#copies implicit parameter of (3ps)
.B  returns the cosine of angle, which is interpreted as an angle in\n      degrees.(3ps)
.B  The result is a real.(3ps)
.B  counts the number of items on the operand stack and pushes this\n      count on the operand stack.(3ps)
.B  counts the number of dictionaries currently on the dictionary\n      stack and pushes this count on the operand stack.(3ps)
.B  counts the number of objects on the execution stack and pushes\n      this count on the operand stack.(3ps)
.B  counts the number of objects on the operand stack starting with\n      the top element and continuing down to but not including the\n      first mark encountered. obj1 through objn are any objects other\n      than marks.(3ps)
.B  invokes proc once for each operation of the font mapping\n      algorithm. The value of currentfont during(3ps)
.B  the execution of proc is the base font that the algorithm\n      ultimately selects. When proc is invoked, the stack contains\n      three values: the selected character\#39;s code (an integer) and\n      the x and y components of the width vector for the character in\n      the user coordinate system. cshow does not paint the character\n      and does not change the current point, although proc may do so.\n      When proc completes execution, the value of (3ps)
.B  cshow can be used to provide careful positioning of individual\n      characters while taking advantage of the composite font mapping\n      machinery of the interpreter. cshow is intended primarily for use\n      with composite fonts . However, it can also be used with a base\n      font. The mapping algorithm for a base font simply selects\n      consecutive characters from the string.(3ps)
.B  returns the current black generation function in the graphics\n      state.(3ps)
.B  pushes a mark object followed by the current cache parameters on\n      the operand stack. The number of cache parameters returned is\n      variable (see (3ps)
.B  returns the current color in the graphics state according to the\n      cyan-magenta-yellow-black color space. If the current color space\n      is DeviceCMYK, currentcmykcolor returns the color values most\n      recently specified by setcmykcolor or setcolor. If the current\n      color space is DeviceRGB or DeviceGray, currentcmykcolor converts\n      the current color to CMYK. For any other color space,\n      currentcmykcolor returns 0.0 0.0 0.0 1.0.(3ps)
.B  returns the components, in the current color space, of the color\n      specified by the current color parameters in the graphics\n      state.(3ps)
.B  returns the value of the CIE based color rendering dictionary\n      parameter in the graphics state.(3ps)
.B  greenfreq greenang greenproc(3ps)
.B  bluefreq blueang blueproc(3ps)
.B  grayfreq grayang grayproc\n\n    (3ps)
.B  currentcolorscreen returns all 12 current halftone screen\n        parameters in the graphics state.(3ps)
.B  currentcolorscreen returns the three screen parameters repeated\n        four times.(3ps)
.B  currentcolorscreen returns 60, 0, and the halftone dictionary,\n        repeated four times.\n    (3ps)
.B  returns an array containing the identifying key and parameters of\n      the color space in the graphics state. currentcolorspace always\n      returns an array, even if the color space has no parameters and\n      was selected by presenting just a name to setcolorspace.(3ps)
.B  returns the current transfer functions in the graphics state for\n      all four color components.(3ps)
.B  If the current transfer functions were specified by (3ps)
.B  If (3ps)
.B  returns an integer that identifies the current execution\n      context.(3ps)
.B  returns the current dash array and offset in the graphics\n      state.(3ps)
.B  returns a dictionary containing the keys and current values of\n      all parameters for the device identified by string. The returned\n      dictionary is merely a container for key-value pairs. Each\n      execution of currentdevparams allocates and returns a new\n      dictionary.(3ps)
.B  pushes the current dictionary (the dictionary on top of the\n      dictionary stack) on the operand stack. currentdict does not pop\n      the dictionary stack; it just pushes a duplicate of its top\n      element on the operand stack.(3ps)
.B  returns the file object from which the PostScript interpreter is\n      currently or was most recently reading program input. Precisely,\n      currentfile returns the topmost file object on the execution\n      stack. If there isn\#39;t one, it returns an invalid file object\n      that doesn\#39;t correspond to any file. This never occurs during\n      execution of ordinary user programs.(3ps)
.B  The file returned by currentfile is usually but not always the\n      standard input file. An important exception occurs during\n      interactive mode operation . In this case, the interpreter does\n      not read directly from the standard input file; instead, it reads\n      from a file representing an edited statement (each statement is\n      represented by a different file).(3ps)
.B  The currentfile operator is useful for obtaining images or other\n      data residing in the program file itself (see the example below).\n      At any given time, this file is positioned at the end of the last\n      PostScript(3ps)
.B  language token read from the file by the interpreter. If that\n      token was a number or a name immediately followed by a white\n      space character, the file is positioned after the white space\n      character (the first, if there are several). Otherwise it is\n      positioned after the last character of the token.(3ps)
.B  returns the current value of the flatness parameter in the\n      graphics state.(3ps)
.B  returns the current font dictionary in the graphics state.\n      Normally, this is the font most recently established by setfont\n      or selectfont. However, when executed inside a font\#39;s\n      BuildGlyph or BuildChar procedure or a procedure invoked by (3ps)
.B  returns the VM allocation mode currently in effect.(3ps)
.B  returns the gray value of the current color parameter in the\n      graphics state. If the current color space is DeviceGray,\n      currentgray returns the color value most recently specified to\n      setgray or setcolor. If the current color space is DeviceRGB or\n      DeviceCMYK, currentgray converts the current color to a gray\n      value. For any other color space, currentgray returns 0.0.(3ps)
.B  replaces the value of the gstate object by a copy of the current\n      graphics state and pushes gstate back on the operand stack. If\n      gstate is in global VM , currentgstate will generate an\n      invalidaccess error if any of the composite objects in the\n      current graphics state are in local VM. Such objects might\n      include the current font, screen function, halftone dictionary,\n      transfer function, or dash pattern. In general, allocating gstate\n      objects in global VM is risky and should be avoided.(3ps)
.B  returns the current halftone dictionary in the graphics state. If\n      the current halftone was defined by setscreen or setcolorscreen\n      instead of by sethalftone, currenthalftone fabricates and returns\n      a halftone dictionary (type 1 or 2) that contains the screen\n      parameters.(3ps)
.B  returns the current values of the halftone phase parameters in\n      the graphics state. If sethalftonephase has not been executed,\n      zero is returned for both values.(3ps)
.B  returns the current color parameter in the graphics state\n      according to the huesaturation-brightness model. If the current\n      color space is DeviceRGB, currenthsbcolor returns the color\n      values most recently specified by (3ps)
.B  For any other color space, currenthsbcolor returns 0.0 0.0\n      0.0.(3ps)
.B  returns the current value of the line cap parameter in the\n      graphics state.(3ps)
.B  returns the current value of the line join parameter in the\n      graphics state.(3ps)
.B  returns the current value of the line width parameter in the\n      graphics state.(3ps)
.B  replaces the value of matrix with the value of the current\n      transformation matrix (CTM) in the graphics state, and pushes the\n      modified matrix back on the operand stack .(3ps)
.B  returns the current value of the miter limit parameter in the\n      graphics state.(3ps)
.B  returns the object format parameter currently in effect.(3ps)
.B  returns the value of the overprint parameter in the graphics\n      state.(3ps)
.B  returns the array packing mode currently in effect.(3ps)
.B  returns a read-only dictionary that describes the page-oriented\n      output device in the current graphics state. currentpagedevice\n      creates a new dictionary if necessary. If the device in the\n      current graphics state is not a page device, currentpagedevice\n      returns an empty dictionary (length of 0).(3ps)
.B  Changes made to the hardware state of the output device since the\n      last execution of (3ps)
.B  returns the x and y coordinates of the current point in the\n      graphics state (i.e., the trailing endpoint of the current path).\n      If the current point is undefined because the current path is\n      empty, currentpoint executes the\n\n    (3ps)
.B  error.(3ps)
.B  The current point is reported in the user coordinate system.\n      Points entered into a path are immediately converted to device\n      coordinates by the current transformation matrix (CTM); existing\n      points are not changed by subsequent modifications to the CTM.\n      currentpoint computes the user space coordinate that corresponds\n      to the current point according to the current value of the CTM.\n      If a current point is set and then the CTM is changed,\n      currentpoint will report a different position in user space than\n      it did before.(3ps)
.B  returns the three components of the current color in the graphics\n      state according to the red-green-blue color model. If the current\n      color space is DeviceRGB, currentrgbcolor returns the color\n      values most recently specified to setrgbcolor or setcolor (or\n      transformed values specified to sethsbcolor). If the current\n      color space is DeviceGray or DeviceCMYK, currentrgbcolor converts\n      the current color to RGB.(3ps)
.B  For any other color space, currentrgbcolor returns 0.0 0.0\n      0.0.(3ps)
.B  returns the current halftone screen parameters (frequency, angle,\n      and proc) in the graphics state, assuming the current screen was\n      established by setscreen. If (3ps)
.B  If (3ps)
.B  has the same semantics as currentglobal. This operator is defined\n      for compatibility with existing Display PostScript\n      applications.(3ps)
.B  returns the current stroke adjust parameter in the graphics\n      state.(3ps)
.B  returns a dictionary containing the keys and current values of\n      all system parameters that are defined in the implementation. The\n      returned dictionary is merely a container for key-value pairs.\n      Each execution of currentsystemparams allocates and returns a new\n      dictionary.(3ps)
.B  returns the current transfer function in the graphics state,\n      assuming that it was established by (3ps)
.B  returns the current undercolor removal function in the graphics\n      state.(3ps)
.B  returns a dictionary containing the keys and current values of\n      all user parameters that are defined in the implementation. The\n      returned dictionary is a container for key-value pairs. Each\n      execution of currentuserparams allocates and returns a new\n      dictionary.(3ps)
.B  adds a Bezier cubic section to the current path between the\n      current point, referred to here as (x0, y0), and the point (x3,\n      y3), using (x1, y1) and (x2, y2) as the Bezier cubic control\n      points. After constructing the curve, curveto makes (x3, y3) the\n      new current point. If the current point is undefined because the\n      current path is empty, curveto executes the error (3ps)
.B  The four points define the shape of the curve geometrically. The\n      curve starts at (x0, y0), it is tangent to the line from (x0, y0)\n      to (x1, y1) at that point, and it leaves the point in that\n      direction. The curve ends at (x3, y3), it is tangent to the line\n      from (x2, y2) to (x3, y3) at that point, and it approaches the\n      point from that direction. The lengths of the lines (x0, y0) to\n      (x1, y1) and (x2, y2) to (x3, y3) represent, in a sense, the\n      &quot;velocity&quot; of the path at the endpoints. The curve is\n      always entirely enclosed by the convex quadrilateral defined by\n      the four points.(3ps)
.B  The mathematical formulation of a Bezier cubic curve is derived\n      from a pair of parametric cubic equations:(3ps)
.B  The cubic section produced by curveto is the path traced by x(t)\n      and y(t) as t ranges from 0 to 1. The Bezier control points\n      corresponding to this curve are:(3ps)
.B  string cvi int(3ps)
.B  (convert to integer) takes an integer, real, or string object\n      from the stack and produces an integer result. If the operand is\n      an integer, cvi simply returns it. If the operand is a real, it\n      truncates any fractional part (i.e., rounds it toward 0) and\n      converts it to an integer. If the operand is a string, it\n      interprets the characters of the string as a number according to\n      the PostScript syntax rules. If that number is a real, cvi\n      converts it to an integer. cvi executes a (3ps)
.B  (convert to literal) makes the object on the top of the operand\n      stack have the literal instead of executable attribute.(3ps)
.B  (convert to name) converts the string operand to a name object\n      that is lexically the same as the string. The name object is\n      executable if the string was.(3ps)
.B  string cvr real(3ps)
.B  (convert to real) takes an integer, real, or string object and\n      produces a real result. If the operand is an integer, cvr\n      converts it to a real. If the operand is a real, cvr simply\n      returns it. If the operand is a string, it interprets the\n      characters of the string as a number according to the PostScript\n      syntax rules. If that number is an integer, cvr converts it to a\n      real.(3ps)
.B  (convert to string with radix) produces a text representation of\n      the number num in the specified radix, stores the text into the\n      supplied string (overwriting some initial portion of its value),\n      and returns a string object designating the substring actually\n      used. If string is too small to hold the result of the\n      conversion, cvrs executes the error (3ps)
.B  If radix is 10, cvrs produces the same result as cvs when applied\n      to either an integer or a real. That is, it produces a signed\n      integer or real token that conforms to the PostScript language\n      syntax for that number.(3ps)
.B  If radix is not 10, cvrs converts num to an integer, as if by\n      cvi. Then it treats the machine representation of that integer as\n      an unsigned positive integer and converts it to text form\n      according to the specific radix. The resulting text is not\n      necessarily a valid number. However, if it is immediately\n      preceded by the same radix and#, the combination is a valid\n      PostScript language token that represents the same number.(3ps)
.B  (convert to string) produces a text representation of an\n      arbitrary object any, stores the text into the supplied string\n      (overwriting some initial portion of its value), and returns a\n      string object designating the substring actually used. If the\n      string is too small to hold the result of conversion, cvs\n      executes the error (3ps)
.B  If any is a number, cvs produces a string representation of that\n      number. If any is a boolean, cvs produces either the string true\n      or the string false. If any is a string, cvs copies its contents\n      into string. If any is a name or an operator, cvs produces the\n      text representation of that name or the operator\#39;s name. If\n      any is any other type, cvs produces the text --nostringval--.(3ps)
.B  If any is a real number, the precise format of the result string\n      is implementation dependent and not under program control. For\n      example, the value 0.001 might be represented as 0.001 or as\n      1.0E-3.(3ps)
.B  (convert to executable) makes the object on top of the operand\n      stack have the executable instead of literal attribute.(3ps)
.B  If the current dictionary is in global VM and value is a\n      composite object whose value is in local VM, an (3ps)
.B  replaces the value of matrix with the default transformation\n      matrix for the current output device and pushes this modified\n      matrix back on the operand stack.(3ps)
.B  registers font as a font dictionary associated with key (usually\n      a name). definefont first checks that font is a well-formed font\n      dictionary-in other words, contains all required key-value pairs.\n      It inserts an additional entry whose key is FID and whose value\n      is an object of type fontID. The dictionary must be large enough\n      to accommodate this additional entry. It makes the\n      dictionary\#39;s access read-only. Finally, it associates key\n      with font in the font directory.(3ps)
.B  In Level 2, it is permissible to associate a font dictionary with\n      more than one key. If font has already been registered,\n      definefont does not alter it in any way.(3ps)
.B  If font is a composite font , definefont also inserts the entries\n      MIDVector and CurMID, and adds entries PrefEnc, EscChar, ShiftIn,\n      and ShiftOut if they are required and are not already present.\n      All the descendant fonts must have been registered by definefont\n      previously.(3ps)
.B  Subsequent invocation of findfont with key will return font. Font\n      registration is subject to the normal semantics of VM . In\n      particular, the lifetime of the definition depends on the VM\n      allocation mode at the time definefont is executed. A local\n      definition can be undone by a subsequent (3ps)
.B  definefont is actually a special case of (3ps)
.B  associates a resource instance with a resource name in a\n      specified category. category is a name object that identifies a\n      resource category, such as Font . key is a name or string object\n      that will be used to identify the resource instance. (Names and\n      strings are interchangeable; other types of keys are permitted\n      but are not recommended.) instance is the resource instance\n      itself; its type must be appropriate to the resource category.(3ps)
.B  Before defining the resource instance, defineresource verifies\n      that the instance object is the correct type. Depending on the\n      resource category, it may also perform additional validation of\n      the object and may have other side effects. Finally, it makes the\n      object read-only if its access is not already restricted.(3ps)
.B  The lifetime of the definition depends on the VM allocation mode\n      in effect at the time defineresource is executed. If local VM\n      allocation is in effect ( (3ps)
.B  Local and global definitions are maintained separately. If a new\n      resource instance is defined with the same category and key as an\n      existing one, the new definition overrides the old one. The\n      precise effect depends on whether the old definition is local or\n      global and whether the new definition (current VM allocation\n      mode) is local or global. There are two main cases:\n\n    (3ps)
.B  It is permissible to use defineresource multiple times to\n      associate a given resource instance with more than one key.(3ps)
.B  If the category name is unknown, an (3ps)
.B  establishes an association between the non-negative integer index\n      and the name object name in the user name table. Subsequently,\n      the scanner will substitute name when it encounters any binary\n      encoded name token or object that refers to the specified user\n      name index. Because binary encoded names specify their own\n      literal or executable attributes, it does not matter whether name\n      is literal or executable.(3ps)
.B  The user name table is an adjunct to the current context\#39;s\n      local VM. The effect of adding an entry to the table is\n      immediately visible to all contexts that share the same local VM.\n      Additions to the table are not affected by save and restore. The\n      association between index and name persists for the remaining\n      lifetime of the local VM.(3ps)
.B  The specified index must previously be unused in the name table\n      or must already be associated with the same name. Changing an\n      existing association is not permitted (an (3ps)
.B  removes the specified file from its storage device. If no such\n      file exists, an (3ps)
.B  occurs.(3ps)
.B  specifies that the execution context identified by the integer\n      context is to terminate immediately when it finishes executing\n      its top-level procedure, whereas ordinarily it would wait for a\n      join. If the context is already waiting for a join, detach causes\n      it to terminate immediately.(3ps)
.B  detach executes an (3ps)
.B  returns a read-only dictionary containing static information\n      about the current device. The composition of this dictionary\n      varies according to the properties of the device. The information\n      in the dictionary may not be meaningful for a page-oriented or\n      other non-display device.(3ps)
.B  The use of deviceinfo after a setcachedevice operation within the\n      scope of a BuildChar procedure is not permitted. An (3ps)
.B  occurs when def, put, or store attempts to define a new entry in\n      a dictionary that is already full-in other words, whose length\n      and maxlength are already equal. This can occur only in Level 1\n      implementations, where a dictionary has a fixed limit on the\n      number of entries with distinct keys it can hold. This limit is\n      established by the operand to the dict operator that creates the\n      dictionary.(3ps)
.B  stores all elements of the dictionary stack into array and\n      returns an object describing the initial n-element subarray of\n      array, where n is the current depth of the dictionary stack.\n      dictstack copies the topmost dictionary into element n-1 of array\n      and the bottommost one into element 0 of array. The dictionary\n      stack itself is unchanged. If the length of array is less than\n      the depth of the dictionary stack, dictstack executes a (3ps)
.B  The dictionary stack has grown too large. Too many begin\n      operators without corresponding end operators have pushed too\n      many dictionaries on the dictionary stack.(3ps)
.B  Before invoking this error, the interpreter creates an array\n      containing all elements of the dictionary stack stored as if by\n      (3ps)
.B  An attempt has been made to remove (end) the bottommost instance\n      of userdict from the dictionary stack. This occurs if an end is\n      executed for which there was no corresponding begin.(3ps)
.B  divides num1 by num2, producing a result that is always a real\n      even if both operands are integers. Use idiv if an integer result\n      is desired.(3ps)
.B  dx dy matrix dtransform dx` dy`(3ps)
.B  With no matrix operand, dtransform (delta transform) transforms\n      the distance vector (dx, dy) by the CTM to produce the\n      corresponding distance vector (dx`, dy`) in device space. If the\n      matrix operand is supplied, dtransform transforms the distance\n      vector by matrix rather than by CTM.(3ps)
.B  A delta transformation is similar to a normal transformation ,\n      but the translation components (tx and ty) of the transformation\n      matrix are not used, making the distance vectors positionless in\n      both user space and device space. This is useful for determining\n      how distances map from user space to device space.(3ps)
.B  duplicates the top element on the operand stack. Note that dup\n      copies only the object. The value of a composite object is not\n      copied but is shared.(3ps)
.B  string eexec -(3ps)
.B  causes the contents of file (open for reading) or string to be\n      decrypted and then executed in a manner similar to the exec\n      operator. The decryption operation does not cause the file or\n      string to be modified.(3ps)
.B  eexec creates a new file object that serves as a decryption\n      filter on the specified file or string. It pushes the new file\n      object on the execution stack, making it the current file for the\n      PostScript interpreter. Subsequently, each time the interpreter\n      reads a character from this file, or a program reads explicitly\n      from currentfile, the decryption filter reads one character from\n      the original file or string and decrypts it.(3ps)
.B  The decryption filter file is closed automatically when the end\n      of the original file or string is encountered. It may also be\n      closed explicitly by (3ps)
.B  Before beginning execution, eexec pushes (3ps)
.B  The encrypted file may be represented in either binary or hex;\n      the eexec operator can decrypt it without being told which type\n      it is. The recommended representation is hex, because hex data\n      can be transmitted through communication channels that are not\n      completely transparent. Regardless of the representation of the\n      encrypted file, the encryption and decryption processes are\n      transparent. That is, an arbitrary binary file can be encrypted,\n      transmitted as either binary or hex, and decrypted to yield(3ps)
.B  the original information.(3ps)
.B  The encryption employed by eexec is intended primarily for use in\n      Type 1 font programs. The book Adobe Type 1 Font Format contains\n      a complete description of the encryption algorithm and\n      recommended uses of eexec.(3ps)
.B  pops the current dictionary off the dictionary stack, making the\n      dictionary below it the current dictionary. If end tries to pop\n      the bottommost instance of userdict, it executes the error (3ps)
.B  intersects the inside of the current clipping path with the\n      inside of the current path to produce a new, smaller current\n      clipping path. The inside of the current path is determined by\n      the even-odd rule, while the inside of the current clipping path\n      is determined by whatever rule was used at the time that path was\n      created.(3ps)
.B  Except for the choice of insideness rule, the behavior of eoclip\n      is identical to that of (3ps)
.B  paints the inside of the current path with the current color,\n      using the even-odd rule to determine what points are inside.\n      Except for the choice of insideness rule, the behavior of eofill\n      is identical to that of (3ps)
.B  is similar to (3ps)
.B  pops two objects from the operand stack and pushes the boolean\n      value (3ps)
.B  Some type conversions are performed by eq. Integers and reals can\n      be compared freely: An integer and a real representing the same\n      mathematical value are considered equal by eq. Strings and names\n      can likewise be compared freely: A name defined by some sequence\n      of characters is equal to a string whose elements are the same\n      sequence of characters.(3ps)
.B  The literal/executable and access attributes of objects are not\n      considered in comparisons between objects.(3ps)
.B  % different in the NeXT implementation(3ps)
.B  This standard PostScript operator has the following effect in the\n      NeXT implementation of the Display PostScript system: It erases\n      the entire window to opaque white.(3ps)
.B  erases the entire current page by painting it with gray level 1,\n      which is ordinarily white, but may be some other color if an\n      atypical transfer function has been defined. The entire page is\n      erased, regardless of the clip path currently in force. erasepage\n      affects only the contents of raster memory. It does not modify\n      the graphics state nor does it cause a page to be transmitted to\n      the output device.(3ps)
.B  erasepage is executed automatically by (3ps)
.B  pushes the dictionary object errordict on the operand stack .\n      errordict is not an operator; it is a name in (3ps)
.B  exchanges the top two elements on the operand stack.(3ps)
.B  pushes the operand on the execution stack, executing it\n      immediately. The effect of executing an object depends on the\n      object\#39;s type and literal/executable attribute. In\n      particular, executing a literal object will cause it only to be\n      pushed back on the operand stack. Executing a procedure, however,\n      will cause the procedure to be called.(3ps)
.B  paints a form specified by a form dictionary . The graphical\n      output produced by execform is defined by the form\n      dictionary\#39;s PaintProc procedure.(3ps)
.B  If this is the first invocation of execform for form, execform\n      first verifies that the dictionary contains the required entries.\n      Then it adds an entry to the dictionary with the key\n      Implementation, whose value is private to the implementation.\n      Finally, it makes the dictionary read-only. (execform performs\n      these alterations directly to the operand dictionary; it does not\n      copy the dictionary.)(3ps)
.B  When execform needs to call the PaintProc procedure, it pushes\n      the form dictionary on the operand stack, then executes the\n      equivalent of(3ps)
.B  gsave % Operand stack: dict(3ps)
.B  dup /Matrix get concat(3ps)
.B  dup /BBox get aload pop % Stack: dict llx lly urx ury(3ps)
.B  exch 3 index sub(3ps)
.B  exch 2 index sub % Stack: dict llx lly width height(3ps)
.B  rectclip % Also does a newpath(3ps)
.B  dup /PaintProc get % Stack: dict proc(3ps)
.B  exec % Execute PaintProc with dict on stack(3ps)
.B  grestore(3ps)
.B  The PaintProc procedure is expected to consume the dictionary\n      operand and to execute a sequence of graphics operators to paint\n      the form. The PaintProc must always produce the same output,\n      given the same graphics state parameters, independent of the\n      number of times it is called and independent, for example, of the\n      contents of userdict. The PostScript language program should not\n      expect any particular execution of execform to cause execution of\n      the specified PaintProc.(3ps)
.B  The documented errors are those produced directly by execform.\n      Obviously, the PaintProc can cause other errors.(3ps)
.B  stores all elements of the execution stack into array and returns\n      an object describing the initial n-element subarray of array,\n      where n is the current depth of the execution stack. execstack\n      copies the topmost object into element n-1 of array and the\n      bottommost one into element 0 of array. The execution stack\n      itself is unchanged.(3ps)
.B  If the length of array is less than the depth of the execution\n      stack, execstack executes a (3ps)
.B  The execution stack has grown too large; procedure invocation is\n      nested deeper than the PostScript interpreter permits.(3ps)
.B  executes the object associated with the non-negative integer\n      index in the\n\n    (3ps)
.B  userdict /UserObjects get(3ps)
.B  exch get exec(3ps)
.B  execuserobject\#39;s semantics are similar to those of exec or\n      other explicit execution operators. That is, if the object is\n      executable, it is executed; otherwise, it is pushed on the\n      operand stack.(3ps)
.B  If (3ps)
.B  packedarray executeonly packedarray(3ps)
.B  file executeonly file(3ps)
.B  string executeonly string(3ps)
.B  reduces the access attribute of an array, packed array, file, or\n      string object to execute-only .Access can only be reduced by\n      these means, never increased. When an object is execute-only, its\n      value cannot be read or modified explicitly by PostScript\n      operators (an (3ps)
.B  executeonly affects the access attribute only of the object that\n      it returns. If there are other composite objects that share the\n      same value, their access attributes are unaffected.(3ps)
.B  invokes the interactive executive, which facilitates direct user\n      interaction with the PostScript interpreter.(3ps)
.B  executive uses the special %statementedit file to obtain commands\n      from the user . The echo operator and the value of prompt also\n      affect the behavior of executive.(3ps)
.B  It should not be considered a standard part of the PostScript\n      language.(3ps)
.B  terminates execution of the innermost, dynamically enclosing\n      instance of a looping context without regard to lexical\n      relationship. A looping context is a procedure invoked repeatedly\n      by one of the following control operators:(3ps)
.B  exit pops the execution stack down to the level of that operator.\n      The interpreter then resumes execution at the next object in\n      normal sequence after that operator.(3ps)
.B  exit does not affect the operand or dictionary stacks. Any\n      objects pushed on those stacks during execution of the looping\n      context remain after the context is exited.(3ps)
.B  If exit would escape from the context of a (3ps)
.B  raises base to the exponent power. The operands may be either\n      integers or reals. If the exponent has a fractional part, the\n      result is meaningful only if the base is non-negative. The result\n      is always a real.(3ps)
.B  sqrt(3ps)
.B  ln(3ps)
.B  log(3ps)
.B  mul(3ps)

