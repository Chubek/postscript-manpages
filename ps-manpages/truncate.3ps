.\" This file has been generated by `ps-mkmanpage.pl`
.TH truncate 3ps "" "2024-05-02" "PostScript Operator Manual"


.SH POSTFIX SIGNATURE
num1 abs num2
num1 num2 add sum
, 
, 
, 
array aload array0 ... arrayn-1 array
, 
, 
string seek anchorsearch
operator.
bool1 bool2 and bool3
, 
, 
, 
, 
x y r ang1 ang2 arc -
segments where arcs were\n      specified originally.
, 
, 
, 
x y r ang1 ang2 arcn -
, 
,\n      
, 
x1 y1 x2 y2 r arct - 2
,\n      
, 
x1 y1 x2 y2 r arcto xt1 yt1 xt2 yt2
,\n      
, 
int array array
ax ay string ashow -
any0 ... anyn-1 array astore array
1 of array and the\n      bottommost one into element 0 of array. Finally, it pushes array\n      back on the stack. Note that astore cannot be performed on 
error\n      occurs.
num den atan angle
cx cy char ax ay string awidthshow -
operator.
dict begin
pushes dict on the dictionary stack, making it the current\n      dictionary and installing it as the first of the dictionaries\n      consulted during implicit name lookup and by 
proc bind proc
int1 shift bitshift int2
file bytesavailable int
-\n      cachestatus bsize bmax msize mmax csize cmax blimit
num1 ceiling num2

.SH DESCRIPTION
 returns the absolute value of num1. The type of the result is the same as the type of num1 unless  num1 is the most negative integer, in which case the result is a  real. 

.SH EXAMPLE
.RI 


4.5 abs 4.5

-3 abs 3

0 abs 0

 

 

3 4 add 7

 

9.9 1.1 add 11.0

 

[23 (ab) -6] aload 23 (ab) -6 [23 (ab) -6]

 

(abbc) (ab) anchorsearch (bc) (ab) true

(abbc) (bb) anchorsearch (abbc) false

(abbc) (bc) anchorsearch (abbc) false

(abbc) (B) anchorsearch (abbc) false

 

true true and true % a complete truth table

true false and false

false true and false

false false and false

 

99 1 and 1

52 7 and 4

 

newpath 0 0 moveto 0 0 1 0 45 arc closepath

 

This constructs a 1-unit radius, 45-degree &quot;pie\n      slice.&quot;

 

newpath 0 0 2 0 90 arc 0 0 1 90 0 arcn closepath

 

This constructs a 2-unit radius, 1-unit wide, 90-degree\n      &quot;windshield wiper swath.&quot;

 

newpath 0 0 moveto

0 4 4 4 1 arct

4 4 lineto

 

This constructs a 4-unit wide, 4-unit high right angle with a\n      1-unit radius &quot;rounded corner.&quot;

 

3 array [null null null]

 

/Helvetica findfont 12 scalefont setfont

14 61 moveto (Normal spacing) show

14 47 moveto 4 0 (Wide spacing) ashow

 

(a) (bcd) (ef) 3 array astore [(a) (bcd) (ef)]

 

This creates a three element array, stores the strings (a),\n      (bcd), and (ef) into it as elements 0, 1, and 2, and leaves the\n      array object on the operand stack.

 

0 1 atan 0.0

1 0 atan 90.0

-100 0 atan 270.0

4 4 atan 45.0

 

/Helvetica findfont 12 scalefont setfont

30 60 moveto (Normal spacing) show

30 46 moveto 6 0 8#040 .5 0 (Wide spacing) awidthshow

 

7 3 bitshift -&gt; 56

142 -3 bitshift -&gt; 17

 

3.2 ceiling -&gt; 4.0

-4.8 ceiling -&gt; -4.0

99 ceiling -&gt; 99

 
.RE 


.SH ERRORS
(NONE)
.SH SEE ALSO
.B  returns the sum of num1 and num2.(3ps)
.B  If both operands are integers and the result is within integer\n      range, the result is an integer; otherwise, the result is a\n      real.(3ps)
.B  packedarray aload packedarray0 ... packedarrayn-1 packedarray(3ps)
.B  successively pushes all n elements of array or packedarray on the\n      operand stack (where n is the length of the operand), and finally\n      pushes the operand itself.(3ps)
.B  post match true (if found)(3ps)
.B  string false (if not found)(3ps)
.B  determines if the string seek matches the initial substring of\n      string(3ps)
.B  (that is, string is at least as long as seek and the\n      corresponding characters are equal).(3ps)
.B  If it matches, anchorsearch splits string into two segments:\n      match, the portion of string that matches seek, and post, the\n      remainder of string; it then pushes the string objects post and\n      match and the boolean (3ps)
.B  int1 int1 and int1(3ps)
.B  If the operands are booleans, and returns their logical\n      conjunction. If the operands are integers, and returns the\n      bitwise and of their binary representations.(3ps)
.B  appends a counterclockwise arc of a circle to the current path,\n      possibly preceded by a straight line segment. The arc has (x, y)\n      as center, r as radius, ang1 the angle of a vector from (x, y) of\n      length r to the first endpoint of the arc, and ang2 the angle of\n      a vector from (x, y) of length r to the second endpoint of the\n      arc.(3ps)
.B  If there is a current point, the arc operator includes a straight\n      line segment from the current point to the first endpoint of this\n      arc and then adds the arc into the current path. If the current\n      path is empty, the arc operator does not produce the initial\n      straight line segment. In any event, the second endpoint of the\n      arc becomes the new current point.(3ps)
.B  Angles are measured in degrees counterclockwise from the positive\n      x-axis of the current user coordinate system. The curve produced\n      is circular in user space. If user space is scaled non-uniformly\n      (i.e., differently in x and y) arc will produce elliptical curves\n      in device space.(3ps)
.B  The operators that produce arcs ( (3ps)
.B  represent them internally as one or more Bezier cubic curves.\n      This is done with sufficient accuracy that a faithful rendition\n      of an arc is produced. However, a program that reads the\n      constructed path using pathforall will encounter (3ps)
.B  , (3ps)
.B  (arc negative) behaves like arc, but arcn builds its arc segment\n      in a clockwise direction in user space.(3ps)
.B  appends an arc of a circle to the current path, possibly preceded\n      by a straight line segment. The arc is defined by a radius r and\n      two tangent lines.The tangent lines are those drawn from the\n      current point, here called (x0, y0), to (x1, y1), and from (x1,\n      y1) to (x2, y2). If the current point is undefined, arct executes\n      the error (3ps)
.B  The center of the arc is located within the inner angle between\n      the tangent lines. It is the only point located at distance r in\n      a direction perpendicular to both lines. The arc begins at the\n      first tangent point (xt1, yt1) on the first tangent line, passes\n      between its center and the point (x1, y1), and ends at the second\n      tangent point (xt2, yt2) on the second tangent line.(3ps)
.B  Before constructing the arc, arct adds a straight line segment\n      from the current point (x0, y0) to (xt1, yt1), unless those\n      points are the same. In any event, (xt2, yt2) becomes the new\n      current point.(3ps)
.B  The curve produced is circular in user space. If user space is\n      scaled non-uniformly (i.e., differently in x and y) arct will\n      produce elliptical curves in device space.(3ps)
.B  If the two tangent lines are collinear, arct merely appends a\n      straight line segment from (x0, y0) to (x1, y1), considering the\n      arc to be part of a degenerate circle with radius 0 at that\n      point.(3ps)
.B  produces the same effect as arct. It also returns the two tangent\n      point coordinates (xt1, yt1) and (xt2, yt2) in user space.(3ps)
.B  arcto is not allowed as an element of a user path, whereas arct\n      is allowed.(3ps)
.B  creates an array of length int, each of whose elements is\n      initialized with a null object, and pushes this array on the\n      operand stack. The int operand must be a non-negative integer not\n      greater than the maximum allowable array length . The array is\n      allocated in local or global VM according to the current VM\n      allocation mode.(3ps)
.B  paints the characters of string in a manner similar to (3ps)
.B  This operator enables a string of text to be fitted to a specific\n      width by adjusting all the spaces between characters by a uniform\n      amount.(3ps)
.B  If the value of array is in global VM and any of any0 ... anyn-1\n      are composite objects whose values are in local VM, an (3ps)
.B  returns the angle (in degrees between 0 and 360) whose tangent is\n      num/den. Either num or den may be zero, but not both. The signs\n      of num and den determine the quadrant in which the result will\n      lie: a positive num yields a result in the positive y plane, a\n      positive den yields a result in the positive x plane. The result\n      is a real.(3ps)
.B  paints the characters of string in a manner similar to show, but\n      combines the special effects of ashow and widthshow. awidthshow\n      adjusts the width of each character shown by adding ax to its x\n      width and ay to its y width, thus modifying the spacing between\n      characters. Furthermore, awidthshow modifies the width of each\n      occurrence of the character char by an additional amount (cx,\n      cy). The interpretation of char is as described for the (3ps)
.B  This operator enables fitting a string of text to a specific\n      width by adjusting all of the spaces between characters by a\n      uniform amount, while independently controlling the width of some\n      specific character, such as the space character.(3ps)
.B  replaces executable operator names in proc by their values. For\n      each element of proc that is an executable name, bind looks up\n      the name in the context of the current dictionary stack as if by\n      (3ps)
.B  For each procedure object in proc, bind applies itself\n      recursively to that procedure, makes the procedure read-only, and\n      stores it back into proc. The bind operator applies to both\n      arrays and packed arrays, but it treats their access attributes\n      differently. It will ignore a read-only array; that is, it will\n      neither bind elements of the array nor examine nested procedures.\n      On the other hand, bind will operate on a packed array (which is\n      always read-only), disregarding its access attribute.(3ps)
.B  No error occurs in either case.(3ps)
.B  The effect of bind is that all operator names in proc and in\n      procedures nested in proc to any depth become &quot;tightly\n      bound&quot; to the operators themselves. During subsequent\n      execution of proc, the interpreter encounters the operators\n      themselves rather than the names of operators.(3ps)
.B  shifts the binary representation of int1 left by shift bits and\n      returns the result. Bits shifted out are lost; bits shifted in\n      are zero. If shift is negative, then a right shift by -shift bits\n      is performed. This produces an arithmetically correct result only\n      for positive values of int1. Both int1 and shift must be\n      integers.(3ps)
.B  returns the number of bytes that are immediately available for\n      reading from file without waiting.(3ps)
.B  The result is -1 if end-of-file has been encountered or if the\n      number of bytes available cannot be determined for other\n      reasons.(3ps)
.B  returns measurements of several aspects of the font cache .(3ps)
.B  cachestatus reports the current consumption and limit for each of\n      three font cache resources: bytes of bitmap storage (bsize and\n      bmax), font/matrix combinations (msize and mmax), and total\n      number of cached characters (csize and cmax). It also reports the\n      limit on the number of bytes occupied by a single cached\n      character (blimit). Characters whose bitmaps are larger than this\n      are not cached.(3ps)
.B  returns the least integer value greater than or equal to num1.(3ps)
.B  The type of the result is the same as the type of the operand.(3ps)
.B  cvi(3ps)

