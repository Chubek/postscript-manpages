.\" This file has been generated by `ps-mkmanpage.pl`
.TH currentglobal 3ps "" "2024-05-02" "PostScript Operator Manual"


.SH POSTFIX SIGNATURE
num1 abs num2
num1 num2 add sum
, 
, 
, 
array aload array0 ... arrayn-1 array
, 
, 
string seek anchorsearch
operator.
bool1 bool2 and bool3
, 
, 
, 
, 
x y r ang1 ang2 arc -
segments where arcs were\n      specified originally.
, 
, 
, 
x y r ang1 ang2 arcn -
, 
,\n      
, 
x1 y1 x2 y2 r arct - 2
,\n      
, 
x1 y1 x2 y2 r arcto xt1 yt1 xt2 yt2
,\n      
, 
int array array
ax ay string ashow -
any0 ... anyn-1 array astore array
1 of array and the\n      bottommost one into element 0 of array. Finally, it pushes array\n      back on the stack. Note that astore cannot be performed on 
error\n      occurs.
num den atan angle
cx cy char ax ay string awidthshow -
operator.
dict begin
pushes dict on the dictionary stack, making it the current\n      dictionary and installing it as the first of the dictionaries\n      consulted during implicit name lookup and by 
proc bind proc
int1 shift bitshift int2
file bytesavailable int
-\n      cachestatus bsize bmax msize mmax csize cmax blimit
num1 ceiling num2
string bool charpath -
and 
any1 ... anyn clear
- cleardictstack -
mark obj1 ... objn cleartomark -
- clip -
or 
and 
operator can\n      also be used to reset the clipping path to an earlier state.
and 
after it\n      has finished using the current path. Any subsequent path\n      construction operators will append to the current path unless\n      newpath is executed explicitly. This can cause unexpected\n      behavior.
- clippath -
or 
operator, the path set by clippath is generally\n      suitable only for filling or clipping. It is not suitable for\n      stroking because it may contain interior segments or disconnected\n      subpaths produced by the clipping process.
file closefile -
- closepath -
width height bits/comp matrix
LEVEL 2
and 
matrix concat -
matrix1 matrix2 matrix3 concatmatrix\n      matrix3
- condition condition DPS
(error) LEVEL 2
or 
has\n      been executed with a request for a feature that either is not\n      available in the interpreter implementation or is not currently\n      available because of the state of the hardware. For 
any1 ... anyn n copy any1 ... anyn any1 ... anyn
and other operators that copy\n      only the objects themselves . However, copy performs only one\n      level of copying. It does not apply recursively to elements that\n      are themselves composite objects; instead, the values of those\n      elements become shared.
error occurs\n      .
- copypage -
or the NumCopies parameter of 
angle cos real
any1 ... anyn count any1 ... anyn n
- countdictstack int
- countexecstack int
mark obj1 ... objn counttomark mark obj1 ...\n      objn n
proc string cshow - LEVEL 2
is restored.
- currentblackgeneration proc\n      LEVEL 2
- currentcacheparams mark size lower\n      upper LEVEL 2
- currentcmykcolor cyan magenta yellow\n      black LEVEL 2
- currentcolor comp1 comp2 ... compm LEVEL\n      2
- currentcolorrendering dict LEVEL\n      2
- currentcolorscreen redfreq redang\n      redproc LEVEL 2
- currentcolorspace array LEVEL 2
- currentcolortransfer redproc\n      greenproc blueproc grayproc LEVEL 2
was used,\n      currentcolortransfer returns the single transfer function,\n      repeated four times.
- currentcontext context DPS
- currentdash array offset
string currentdevparams dict LEVEL 2
- currentdict dict
- currentfile file
- currentflat num
- currentfont font
- currentglobal bool LEVEL 2

.SH DESCRIPTION
 returns the absolute value of num1. The type of the result is the same as the type of num1 unless  num1 is the most negative integer, in which case the result is a  real. 

.SH EXAMPLE
.RI 


4.5 abs 4.5

-3 abs 3

0 abs 0

 

 

3 4 add 7

 

9.9 1.1 add 11.0

 

[23 (ab) -6] aload 23 (ab) -6 [23 (ab) -6]

 

(abbc) (ab) anchorsearch (bc) (ab) true

(abbc) (bb) anchorsearch (abbc) false

(abbc) (bc) anchorsearch (abbc) false

(abbc) (B) anchorsearch (abbc) false

 

true true and true % a complete truth table

true false and false

false true and false

false false and false

 

99 1 and 1

52 7 and 4

 

newpath 0 0 moveto 0 0 1 0 45 arc closepath

 

This constructs a 1-unit radius, 45-degree &quot;pie\n      slice.&quot;

 

newpath 0 0 2 0 90 arc 0 0 1 90 0 arcn closepath

 

This constructs a 2-unit radius, 1-unit wide, 90-degree\n      &quot;windshield wiper swath.&quot;

 

newpath 0 0 moveto

0 4 4 4 1 arct

4 4 lineto

 

This constructs a 4-unit wide, 4-unit high right angle with a\n      1-unit radius &quot;rounded corner.&quot;

 

3 array [null null null]

 

/Helvetica findfont 12 scalefont setfont

14 61 moveto (Normal spacing) show

14 47 moveto 4 0 (Wide spacing) ashow

 

(a) (bcd) (ef) 3 array astore [(a) (bcd) (ef)]

 

This creates a three element array, stores the strings (a),\n      (bcd), and (ef) into it as elements 0, 1, and 2, and leaves the\n      array object on the operand stack.

 

0 1 atan 0.0

1 0 atan 90.0

-100 0 atan 270.0

4 4 atan 45.0

 

/Helvetica findfont 12 scalefont setfont

30 60 moveto (Normal spacing) show

30 46 moveto 6 0 8#040 .5 0 (Wide spacing) awidthshow

 

7 3 bitshift -&gt; 56

142 -3 bitshift -&gt; 17

 

3.2 ceiling -&gt; 4.0

-4.8 ceiling -&gt; -4.0

99 ceiling -&gt; 99

 

clippath 1 setgray fill

 

This erases (fills with white) the interior of the current\n      clipping path.

 

1 2 3 2 copy -&gt; 1 2 3 2 3

1 2 3 0 copy -&gt; 1 2 3

 

In the other instances, copy copies all the elements of the first\n      composite object into the second. The composite object operands\n      must be of the same type, except that a packed array can be\n      copied into an array. This form of copy copies the value of a\n      composite object. This is quite different from 

 

In the case of arrays or strings, the length of the second object\n      must be at least as great as the first; copy returns the initial\n      subarray or substring of the second operand into which the\n      elements were copied. Any remaining elements of array2 or string2\n      are unaffected. copy cannot copy into packed arrays, because they\n      are read-only, but it can copy packed arrays into ordinary\n      arrays.

 

In the case of dictionaries, Level 1 implementations require that\n      dict2 have a length of zero and a maxlength at least as great as\n      the length of dict1. Level 2 implementations do not impose this\n      restriction, since dictionaries can expand when necessary.

 

The attributes (literal or executable and access) of the result\n      are normally the same as those of the second operand. However, in\n      Level 1 implementations, the access attribute of dict2 is copied\n      from that of dict1.

 

If the value of the destination object is in global VM and any of\n      the elements copied from the source object are composite objects\n      whose values are in local VM, an 

 

/a1 [1 2 3] def

a1 dup length array copy -&gt; [1 2 3]

 

0 cos -&gt; 1.0

90 cos -&gt; 0.0

 

clear count -&gt; 0

clear 1 2 3 count -&gt; 1 2 3 3

 

1 mark 2 3 counttomark -&gt; 1 mark 2 3 2

1 mark counttomark -&gt; 1 mark 0

 

/str 100 string def

currentfile str readline

here is a line of text

pop /textline exch def

 

After execution of this example, the name /textline

is associated with the string &quot;here is a line of\n      text&quot;.

 
.RE 


.SH ERRORS
.B  stackoverflow(3ps)

.SH SEE ALSO
.B  returns the sum of num1 and num2.(3ps)
.B  If both operands are integers and the result is within integer\n      range, the result is an integer; otherwise, the result is a\n      real.(3ps)
.B  packedarray aload packedarray0 ... packedarrayn-1 packedarray(3ps)
.B  successively pushes all n elements of array or packedarray on the\n      operand stack (where n is the length of the operand), and finally\n      pushes the operand itself.(3ps)
.B  post match true (if found)(3ps)
.B  string false (if not found)(3ps)
.B  determines if the string seek matches the initial substring of\n      string(3ps)
.B  (that is, string is at least as long as seek and the\n      corresponding characters are equal).(3ps)
.B  If it matches, anchorsearch splits string into two segments:\n      match, the portion of string that matches seek, and post, the\n      remainder of string; it then pushes the string objects post and\n      match and the boolean (3ps)
.B  int1 int1 and int1(3ps)
.B  If the operands are booleans, and returns their logical\n      conjunction. If the operands are integers, and returns the\n      bitwise and of their binary representations.(3ps)
.B  appends a counterclockwise arc of a circle to the current path,\n      possibly preceded by a straight line segment. The arc has (x, y)\n      as center, r as radius, ang1 the angle of a vector from (x, y) of\n      length r to the first endpoint of the arc, and ang2 the angle of\n      a vector from (x, y) of length r to the second endpoint of the\n      arc.(3ps)
.B  If there is a current point, the arc operator includes a straight\n      line segment from the current point to the first endpoint of this\n      arc and then adds the arc into the current path. If the current\n      path is empty, the arc operator does not produce the initial\n      straight line segment. In any event, the second endpoint of the\n      arc becomes the new current point.(3ps)
.B  Angles are measured in degrees counterclockwise from the positive\n      x-axis of the current user coordinate system. The curve produced\n      is circular in user space. If user space is scaled non-uniformly\n      (i.e., differently in x and y) arc will produce elliptical curves\n      in device space.(3ps)
.B  The operators that produce arcs ( (3ps)
.B  represent them internally as one or more Bezier cubic curves.\n      This is done with sufficient accuracy that a faithful rendition\n      of an arc is produced. However, a program that reads the\n      constructed path using pathforall will encounter (3ps)
.B  , (3ps)
.B  (arc negative) behaves like arc, but arcn builds its arc segment\n      in a clockwise direction in user space.(3ps)
.B  appends an arc of a circle to the current path, possibly preceded\n      by a straight line segment. The arc is defined by a radius r and\n      two tangent lines.The tangent lines are those drawn from the\n      current point, here called (x0, y0), to (x1, y1), and from (x1,\n      y1) to (x2, y2). If the current point is undefined, arct executes\n      the error (3ps)
.B  The center of the arc is located within the inner angle between\n      the tangent lines. It is the only point located at distance r in\n      a direction perpendicular to both lines. The arc begins at the\n      first tangent point (xt1, yt1) on the first tangent line, passes\n      between its center and the point (x1, y1), and ends at the second\n      tangent point (xt2, yt2) on the second tangent line.(3ps)
.B  Before constructing the arc, arct adds a straight line segment\n      from the current point (x0, y0) to (xt1, yt1), unless those\n      points are the same. In any event, (xt2, yt2) becomes the new\n      current point.(3ps)
.B  The curve produced is circular in user space. If user space is\n      scaled non-uniformly (i.e., differently in x and y) arct will\n      produce elliptical curves in device space.(3ps)
.B  If the two tangent lines are collinear, arct merely appends a\n      straight line segment from (x0, y0) to (x1, y1), considering the\n      arc to be part of a degenerate circle with radius 0 at that\n      point.(3ps)
.B  produces the same effect as arct. It also returns the two tangent\n      point coordinates (xt1, yt1) and (xt2, yt2) in user space.(3ps)
.B  arcto is not allowed as an element of a user path, whereas arct\n      is allowed.(3ps)
.B  creates an array of length int, each of whose elements is\n      initialized with a null object, and pushes this array on the\n      operand stack. The int operand must be a non-negative integer not\n      greater than the maximum allowable array length . The array is\n      allocated in local or global VM according to the current VM\n      allocation mode.(3ps)
.B  paints the characters of string in a manner similar to (3ps)
.B  This operator enables a string of text to be fitted to a specific\n      width by adjusting all the spaces between characters by a uniform\n      amount.(3ps)
.B  If the value of array is in global VM and any of any0 ... anyn-1\n      are composite objects whose values are in local VM, an (3ps)
.B  returns the angle (in degrees between 0 and 360) whose tangent is\n      num/den. Either num or den may be zero, but not both. The signs\n      of num and den determine the quadrant in which the result will\n      lie: a positive num yields a result in the positive y plane, a\n      positive den yields a result in the positive x plane. The result\n      is a real.(3ps)
.B  paints the characters of string in a manner similar to show, but\n      combines the special effects of ashow and widthshow. awidthshow\n      adjusts the width of each character shown by adding ax to its x\n      width and ay to its y width, thus modifying the spacing between\n      characters. Furthermore, awidthshow modifies the width of each\n      occurrence of the character char by an additional amount (cx,\n      cy). The interpretation of char is as described for the (3ps)
.B  This operator enables fitting a string of text to a specific\n      width by adjusting all of the spaces between characters by a\n      uniform amount, while independently controlling the width of some\n      specific character, such as the space character.(3ps)
.B  replaces executable operator names in proc by their values. For\n      each element of proc that is an executable name, bind looks up\n      the name in the context of the current dictionary stack as if by\n      (3ps)
.B  For each procedure object in proc, bind applies itself\n      recursively to that procedure, makes the procedure read-only, and\n      stores it back into proc. The bind operator applies to both\n      arrays and packed arrays, but it treats their access attributes\n      differently. It will ignore a read-only array; that is, it will\n      neither bind elements of the array nor examine nested procedures.\n      On the other hand, bind will operate on a packed array (which is\n      always read-only), disregarding its access attribute.(3ps)
.B  No error occurs in either case.(3ps)
.B  The effect of bind is that all operator names in proc and in\n      procedures nested in proc to any depth become &quot;tightly\n      bound&quot; to the operators themselves. During subsequent\n      execution of proc, the interpreter encounters the operators\n      themselves rather than the names of operators.(3ps)
.B  shifts the binary representation of int1 left by shift bits and\n      returns the result. Bits shifted out are lost; bits shifted in\n      are zero. If shift is negative, then a right shift by -shift bits\n      is performed. This produces an arithmetically correct result only\n      for positive values of int1. Both int1 and shift must be\n      integers.(3ps)
.B  returns the number of bytes that are immediately available for\n      reading from file without waiting.(3ps)
.B  The result is -1 if end-of-file has been encountered or if the\n      number of bytes available cannot be determined for other\n      reasons.(3ps)
.B  returns measurements of several aspects of the font cache .(3ps)
.B  cachestatus reports the current consumption and limit for each of\n      three font cache resources: bytes of bitmap storage (bsize and\n      bmax), font/matrix combinations (msize and mmax), and total\n      number of cached characters (csize and cmax). It also reports the\n      limit on the number of bytes occupied by a single cached\n      character (blimit). Characters whose bitmaps are larger than this\n      are not cached.(3ps)
.B  returns the least integer value greater than or equal to num1.(3ps)
.B  The type of the result is the same as the type of the operand.(3ps)
.B  obtains the character path outlines that would result if string\n      were shown at the current point using show. Instead of painting\n      the path, however, charpath appends the path to the current path.\n      This yields a result suitable for general filling, stroking, or\n      clipping(3ps)
.B  The bool operand determines what happens if the character path is\n      designed to be stroked rather than filled or outlined. If bool is\n      (3ps)
.B  The outlines of some fonts are protected. (In Level 1\n      implementations, this applies to all fonts; in Level 2, only to\n      certain special fonts and not to ordinary Type 1 or Type 3\n      fonts.) If the current font is protected, using charpath to\n      obtain its outlines causes the (3ps)
.B  operators to be disabled for as long as those outlines remain in\n      the current path.(3ps)
.B  pops all objects from the operand stack and discards them.(3ps)
.B  pops all dictionaries off the dictionary stack except for the\n      permanent entries. In Level 1 implementations the permanent\n      entries are systemdict and userdict; in Level 2 they are (3ps)
.B  (In Level 1 implementations, cleardictstack is a procedure\n      defined in userdict instead of an operator defined in\n      systemdict.)(3ps)
.B  pops the operand stack repeatedly until it encounters a mark,\n      which it also pops from the stack(3ps)
.B  (obj1 through objn are any objects other than marks).(3ps)
.B  intersects the inside of the current clipping path with the\n      inside of the current path to produce a new, smaller current\n      clipping path.(3ps)
.B  The inside of the current path is determined by the normal\n      PostScript non-zero winding number rule , while the inside of the\n      current clipping path is determined by whatever rule was used at\n      the time that path was created.(3ps)
.B  In general, clip produces a new path whose inside (according to\n      the non-zero winding number rule) consists of all areas that are\n      inside both of the original paths. The way this new path is\n      constructed (the order of its segments, whether it\n      self-intersects, etc.) is not specified.(3ps)
.B  clip treats an open subpath of the current path as though it were\n      closed; it does not actually alter the path itself. It is\n      permissible for the current path to be empty. The result of\n      executing clip is always a non-empty clipping path, though it may\n      enclose zero area.(3ps)
.B  There is no way to enlarge the current clipping path (other than\n      by (3ps)
.B  Unlike (3ps)
.B  sets the current path to one that describes the current clipping\n      path.(3ps)
.B  This operator is useful for determining the exact extent of the\n      imaging area on the current output device.(3ps)
.B  If the current clipping path is the result of application of the\n      (3ps)
.B  closes file-in other words, breaks the association between the\n      file object and the underlying file. For an output file,\n      closefile first performs a\n\n    (3ps)
.B  closes the current subpath by appending a straight line segment\n      connecting the current point to the subpath\#39;s starting\n      point-generally, the point most recently specified by (3ps)
.B  closepath terminates the current subpath. Appending another\n      segment to the current path will begin a new subpath, even if it\n      is drawn from the endpoint reached by the closepath.(3ps)
.B  paints a sampled image onto the current page.(3ps)
.B  The description here only summarizes the colorimage operator.(3ps)
.B  The sampled image is a rectangular array of width x height sample\n      values. colorimage interprets the width, height, and matrix\n      operands in the same way as does (3ps)
.B  Each image sample consists of 1, 3, or 4 color components, as\n      specified by the ncomp operand. Each component consists of\n      bits/comp bits (1, 2, 4, 8, or 12). All components are the same\n      size.(3ps)
.B  If ncomp is 1, the samples have only one (gray) component; the\n      operation of colorimage is equivalent to that of image using the\n      first five operands. If ncomp is 3, the samples consist of red,\n      green, and blue components. If ncomp is 4, the samples consist of\n      cyan, magenta, yellow, and black components. The 1, 3, and 4\n      component values are interpreted according to the DeviceGray,\n      DeviceRGB, and DeviceCMYK color spaces, respectively , regardless\n      of the current color space.(3ps)
.B  The multi operand is a boolean that determines how colorimage is\n      to obtain sample data from its data sources. If multi is false,\n      there is a single data source, datasrc0; colorimage obtains all\n      components from that source, interleaved on a per-sample basis.\n      If multi is true, there are ncomp data sources, datasrc0 ...\n      datasrcn-1, one for each component. The data sources can be\n      procedures, strings, or files, including filtered files. They\n      must all be of the same type .(3ps)
.B  Unlike (3ps)
.B  Execution of this operator is not permitted in certain\n      circumstances.(3ps)
.B  concatenates matrix with the current transformation matrix (CTM).\n      Precisely, concat replaces the CTM by matrix x CTM . The effect\n      of this is to define a new user space whose coordinates are\n      transformed into the former user space according to matrix.(3ps)
.B  Examples(3ps)
.B  [72 0 0 72 0 0] concat(3ps)
.B  72 72 scale(3ps)
.B  The two examples have the same effect on the current\n      transformation.(3ps)
.B  replaces the value of matrix3 by the result of multiplying\n      matrix1 x matrix2, and pushes the modified matrix3 back on the\n      operand stack. This operator does not affect the CTM.(3ps)
.B  creates a new condition object, unequal to any condition object\n      already in existence, and pushes it on the operand stack. The\n      condition initially has no contexts waiting on it . Since a\n      condition is a composite object, creating one consumes VM. The\n      condition\#39;s value is allocated in local or global VM\n      according to the current VM allocation mode.(3ps)
.B  occurs when (3ps)
.B  When a configurationerror is generated, a two-element array\n      called errorinfo is placed in (3ps)
.B  array1 array2 copy subarray2(3ps)
.B  dict1 dict2 copy dict2(3ps)
.B  string1 string2 copy substring2(3ps)
.B  packedarray1 array2 copy subarray2(3ps)
.B  gstate1 gstate2 copy gstate2(3ps)
.B  performs two entirely different functions, depending on the type\n      of the topmost operand.(3ps)
.B  In the first instance, where the top element on the operand stack\n      is a non-negative integer n, copy pops n from the stack and\n      duplicates the top n elements on the operand stack as shown\n      above. This form of copy operates only on the objects themselves,\n      not on the values of composite objects.(3ps)
.B  transmits one copy of the current page to the current output\n      device without erasing the current page or changing the graphics\n      state. This is in contrast to showpage, which performs the\n      equivalent of an (3ps)
.B  and an (3ps)
.B  copypage is intended primarily as a debugging aid or as a means\n      of printing successive pages with incrementally accumulated\n      contents. Routine use of copypage as a substitute for showpage\n      may severely degrade the page throughput of some PostScript\n      printers. To print multiple copies of the same page, use\n      the#copies implicit parameter of (3ps)
.B  returns the cosine of angle, which is interpreted as an angle in\n      degrees.(3ps)
.B  The result is a real.(3ps)
.B  counts the number of items on the operand stack and pushes this\n      count on the operand stack.(3ps)
.B  counts the number of dictionaries currently on the dictionary\n      stack and pushes this count on the operand stack.(3ps)
.B  counts the number of objects on the execution stack and pushes\n      this count on the operand stack.(3ps)
.B  counts the number of objects on the operand stack starting with\n      the top element and continuing down to but not including the\n      first mark encountered. obj1 through objn are any objects other\n      than marks.(3ps)
.B  invokes proc once for each operation of the font mapping\n      algorithm. The value of currentfont during(3ps)
.B  the execution of proc is the base font that the algorithm\n      ultimately selects. When proc is invoked, the stack contains\n      three values: the selected character\#39;s code (an integer) and\n      the x and y components of the width vector for the character in\n      the user coordinate system. cshow does not paint the character\n      and does not change the current point, although proc may do so.\n      When proc completes execution, the value of (3ps)
.B  cshow can be used to provide careful positioning of individual\n      characters while taking advantage of the composite font mapping\n      machinery of the interpreter. cshow is intended primarily for use\n      with composite fonts . However, it can also be used with a base\n      font. The mapping algorithm for a base font simply selects\n      consecutive characters from the string.(3ps)
.B  returns the current black generation function in the graphics\n      state.(3ps)
.B  pushes a mark object followed by the current cache parameters on\n      the operand stack. The number of cache parameters returned is\n      variable (see (3ps)
.B  returns the current color in the graphics state according to the\n      cyan-magenta-yellow-black color space. If the current color space\n      is DeviceCMYK, currentcmykcolor returns the color values most\n      recently specified by setcmykcolor or setcolor. If the current\n      color space is DeviceRGB or DeviceGray, currentcmykcolor converts\n      the current color to CMYK. For any other color space,\n      currentcmykcolor returns 0.0 0.0 0.0 1.0.(3ps)
.B  returns the components, in the current color space, of the color\n      specified by the current color parameters in the graphics\n      state.(3ps)
.B  returns the value of the CIE based color rendering dictionary\n      parameter in the graphics state.(3ps)
.B  greenfreq greenang greenproc(3ps)
.B  bluefreq blueang blueproc(3ps)
.B  grayfreq grayang grayproc\n\n    (3ps)
.B  currentcolorscreen returns all 12 current halftone screen\n        parameters in the graphics state.(3ps)
.B  currentcolorscreen returns the three screen parameters repeated\n        four times.(3ps)
.B  currentcolorscreen returns 60, 0, and the halftone dictionary,\n        repeated four times.\n    (3ps)
.B  returns an array containing the identifying key and parameters of\n      the color space in the graphics state. currentcolorspace always\n      returns an array, even if the color space has no parameters and\n      was selected by presenting just a name to setcolorspace.(3ps)
.B  returns the current transfer functions in the graphics state for\n      all four color components.(3ps)
.B  If the current transfer functions were specified by (3ps)
.B  If (3ps)
.B  returns an integer that identifies the current execution\n      context.(3ps)
.B  returns the current dash array and offset in the graphics\n      state.(3ps)
.B  returns a dictionary containing the keys and current values of\n      all parameters for the device identified by string. The returned\n      dictionary is merely a container for key-value pairs. Each\n      execution of currentdevparams allocates and returns a new\n      dictionary.(3ps)
.B  pushes the current dictionary (the dictionary on top of the\n      dictionary stack) on the operand stack. currentdict does not pop\n      the dictionary stack; it just pushes a duplicate of its top\n      element on the operand stack.(3ps)
.B  returns the file object from which the PostScript interpreter is\n      currently or was most recently reading program input. Precisely,\n      currentfile returns the topmost file object on the execution\n      stack. If there isn\#39;t one, it returns an invalid file object\n      that doesn\#39;t correspond to any file. This never occurs during\n      execution of ordinary user programs.(3ps)
.B  The file returned by currentfile is usually but not always the\n      standard input file. An important exception occurs during\n      interactive mode operation . In this case, the interpreter does\n      not read directly from the standard input file; instead, it reads\n      from a file representing an edited statement (each statement is\n      represented by a different file).(3ps)
.B  The currentfile operator is useful for obtaining images or other\n      data residing in the program file itself (see the example below).\n      At any given time, this file is positioned at the end of the last\n      PostScript(3ps)
.B  language token read from the file by the interpreter. If that\n      token was a number or a name immediately followed by a white\n      space character, the file is positioned after the white space\n      character (the first, if there are several). Otherwise it is\n      positioned after the last character of the token.(3ps)
.B  returns the current value of the flatness parameter in the\n      graphics state.(3ps)
.B  returns the current font dictionary in the graphics state.\n      Normally, this is the font most recently established by setfont\n      or selectfont. However, when executed inside a font\#39;s\n      BuildGlyph or BuildChar procedure or a procedure invoked by (3ps)
.B  returns the VM allocation mode currently in effect.(3ps)
.B  setglobal(3ps)

