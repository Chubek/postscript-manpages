.\" This file has been generated by `ps-mkmanpage.pl`
.TH stringwidth 3ps "" "2024-05-02" "PostScript Operator Manual"


.SH POSTFIX SIGNATURE
num1 abs num2
num1 num2 add sum
, 
, 
, 
array aload array0 ... arrayn-1 array
, 
, 
string seek anchorsearch
operator.
bool1 bool2 and bool3
, 
, 
, 
, 
x y r ang1 ang2 arc -
segments where arcs were\n      specified originally.
, 
, 
, 
x y r ang1 ang2 arcn -
, 
,\n      
, 
x1 y1 x2 y2 r arct - 2
,\n      
, 
x1 y1 x2 y2 r arcto xt1 yt1 xt2 yt2
,\n      
, 
int array array
ax ay string ashow -
any0 ... anyn-1 array astore array
1 of array and the\n      bottommost one into element 0 of array. Finally, it pushes array\n      back on the stack. Note that astore cannot be performed on 
error\n      occurs.
num den atan angle
cx cy char ax ay string awidthshow -
operator.
dict begin
pushes dict on the dictionary stack, making it the current\n      dictionary and installing it as the first of the dictionaries\n      consulted during implicit name lookup and by 
proc bind proc
int1 shift bitshift int2
file bytesavailable int
-\n      cachestatus bsize bmax msize mmax csize cmax blimit
num1 ceiling num2
string bool charpath -
and 
any1 ... anyn clear
- cleardictstack -
mark obj1 ... objn cleartomark -
- clip -
or 
and 
operator can\n      also be used to reset the clipping path to an earlier state.
and 
after it\n      has finished using the current path. Any subsequent path\n      construction operators will append to the current path unless\n      newpath is executed explicitly. This can cause unexpected\n      behavior.
- clippath -
or 
operator, the path set by clippath is generally\n      suitable only for filling or clipping. It is not suitable for\n      stroking because it may contain interior segments or disconnected\n      subpaths produced by the clipping process.
file closefile -
- closepath -
width height bits/comp matrix
LEVEL 2
and 
matrix concat -
matrix1 matrix2 matrix3 concatmatrix\n      matrix3
- condition condition DPS
(error) LEVEL 2
or 
has\n      been executed with a request for a feature that either is not\n      available in the interpreter implementation or is not currently\n      available because of the state of the hardware. For 
any1 ... anyn n copy any1 ... anyn any1 ... anyn
and other operators that copy\n      only the objects themselves . However, copy performs only one\n      level of copying. It does not apply recursively to elements that\n      are themselves composite objects; instead, the values of those\n      elements become shared.
error occurs\n      .
- copypage -
or the NumCopies parameter of 
angle cos real
any1 ... anyn count any1 ... anyn n
- countdictstack int
- countexecstack int
mark obj1 ... objn counttomark mark obj1 ...\n      objn n
proc string cshow - LEVEL 2
is restored.
- currentblackgeneration proc\n      LEVEL 2
- currentcacheparams mark size lower\n      upper LEVEL 2
- currentcmykcolor cyan magenta yellow\n      black LEVEL 2
- currentcolor comp1 comp2 ... compm LEVEL\n      2
- currentcolorrendering dict LEVEL\n      2
- currentcolorscreen redfreq redang\n      redproc LEVEL 2
- currentcolorspace array LEVEL 2
- currentcolortransfer redproc\n      greenproc blueproc grayproc LEVEL 2
was used,\n      currentcolortransfer returns the single transfer function,\n      repeated four times.
- currentcontext context DPS
- currentdash array offset
string currentdevparams dict LEVEL 2
- currentdict dict
- currentfile file
- currentflat num
- currentfont font
- currentglobal bool LEVEL 2
- currentgray num
gstate currentgstate gstate LEVEL 2
- currenthalftone halftone LEVEL 2
, 
- currenthalftonephase x y DPS
- currenthsbcolor hue saturation\n      brightness
- currentlinecap int
- currentlinejoin int
- currentlinewidth num
matrix currentmatrix matrix
- currentmiterlimit num
- currentobjectformat int LEVEL 2
- currentoverprint bool LEVEL 2
- currentpacking bool LEVEL 2
- currentpagedevice dict LEVEL 2
- currentpoint x y
- currentrgbcolor red green blue
- currentscreen frequency angle proc
currentscreen 60 0 halftone
was executed, currentscreen returns the\n      parameters for the gray screen.
was\n      executed, currentscreen returns a frequency of 60, an angle of 0,\n      and the halftone dictionary.
- currentshared bool LEVEL 2
- currentstrokeadjust bool LEVEL\n      2
- currentsystemparams dict LEVEL\n      2
- currenttransfer proc
was\n      executed, currenttransfer returns the gray transfer function.
- currentundercolorremoval proc\n      LEVEL 2
- currentuserparams dict
x1 y1 x2 y2 x3 y3 curveto -
num cvi int
error if a real is\n      too large to convert to an integer. (See the 
operators, which remove fractional parts without\n      performing type conversion.)
any cvlit any
string cvn name
num cvr real
num radix string cvrs substring
any string cvs substring
any cvx any
key value def
associates key with value in the current dictionary-the one on\n      the top of the dictionary stack . If key is already present in\n      the current dictionary, def simply replaces its value. Otherwise,\n      def creates a new entry for key and stores value with it.
error\n      occurs .
matrix defaultmatrix matrix
key font definefont font
operating on the Font\n      category.
key instance category defineresource\n      instance LEVEL 2
returns false), the effect of defineresource\n      is undone by the next nonnested 
returns\n      true), the effect of defineresource persists until global VM is\n      restored at the end of the job. If the current job is not\n      encapsulated, the effect of a global defineresource persists\n      indefinitely, and may be visible to other execution contexts.
error occurs. If the\n      instance is of the wrong type for the specified category, a 
error occurs. If\n      the instance is in local VM but the current VM allocation mode is\n      global, an 
error occurs. This is analogous to storing a\n      local object into a global dictionary. Other errors can occur for\n      specific categories. For example, when dealing with the Font\n      category, defineresource can execute an 
error.
index name defineusername - DPS
error will\n      occur). There may be an implementation limit on index values.\n      Assigning index values sequentially starting at zero is strongly\n      recommended.
index any defineuserobject - LEVEL 2
array. First, it creates a UserObjects array in\n      userdict if one is not already present. It extends an existing\n      UserObjects array if necessary. It then executes the equivalent\n      of
filename deletefile - LEVEL 2
error occurs. If the device does not\n      allow this operation, an 
error occurs. If an environment dependent\n      error is detected, an 
, 
context detach - DPS
error if context is not a valid context\n      identifier or if the context has already been joined or detached.\n      It is permissible for context to identify the current context.
- deviceinfo dict DPS
error results.
int dict dict
error.
(error)
array dictstack subarray
error.
(error)
(error)
num1 num2 div quotient
dx dy dtransform dx` dy`
any dup any any
bool echo
specifies whether the special files %lineedit and\n      %statementedit are to copy characters from the standard input\n      file to the standard output file. This affects only the behavior\n      of 
file eexec
on the dictionary\n      stack. This ensures that the operators executed by the encrypted\n      program have their standard meanings. When the decryption filter\n      file is closed either explicitly or implicitly, the dictionary\n      stack is popped. The program must be aware that it is being\n      executed with 
as\n      the current dictionary; in particular, any definitions that it\n      makes must be into a specific dictionary rather than the current\n      one, since 
is\n      read-only.
- end -
- eoclip -
- eofill -
- eoviewclip LEVEL 2
any1 any2 eq bool
if they are equal, 
if not. The definition of\n      equality depends on the types of the objects being compared.\n      Simple objects are equal if their types and values are the same.\n      Strings are equal if their lengths and individual elements are\n      equal. Other composite objects (arrays and dictionaries) are\n      equal only if they share the same value. Separate values are\n      considered unequal, even if all the components of those values\n      are the same.
- erasepage -
after imaging. There\n      are few situations in which a PostScript language page\n      description should execute erasepage explicitly, because the\n      operator affects portions of the current page outside the current\n      clip path. It is usually more appropriate to erase just the\n      inside of the current clip path (see\n\n    
- errordict dict
associated with the\n      dictionary object.
any1 any2 exch any2 any1
any exec -
form execform - LEVEL 2
array execstack subarray
error.
(error)
index execuserobject - LEVEL 2
array.\n      execuserobject is equivalent to:
is not\n      defined in userdict because defineuserobject has never been\n      executed, an 
error\n      occurs. If index is not a valid index for the existing 
array, a 
error occurs. If\n      index is a valid index but 
has not been executed previously for that\n      index, a null object is returned.
, 
array executeonly array
error will result), but it can still be\n      executed by the PostScript interpreter-for example, by invoking\n      it with exec.
- executive -
- exit -
or 
operator, it executes the 
error (still in\n      the context of the 
or 
context.
- exitserver -
base exponent exp real
any gcheck bool\n      LEVEL 2
num1 num2 ge bool
error.
array index get any
error.
error.
array index count getinterval subarray
- globaldict dict LEVEL 2
associated with the\n      dictionary object.
- GlobalFontDirectory dict LEVEL\n      2
associated\n      with the dictionary object.
name glyphshow - LEVEL 2
error occurs.
error occurs.
- grestore -
or if the\n      most recent\n\n    
preceded the most recent unmatched\n      save, grestore does not pop the graphics state stack, although it\n      does restore the graphics state from the top of the graphics\n      state stack.
- grestoreall -
- gsave -
and 
work strictly in a\n      stack-like fashion, except for the wholesale restoration\n      performed by 
and 
- gstate gstate LEVEL 2
num1 num2 gt bool
error.
(error)
int1 int2 idiv quotient
dx` dy` idtransform dx dy
bool proc if -
bool proc1 proc2 ifelse -
width height bits/sample matrix datasrc image
width height polarity matrix datasrc imagemask\n      -
anyn ... any0 n index anyn ... any0 anyn
x y ineofill bool
instead of 
x y infill bool
- initclip -
- initgraphics -
- initmatrix -
- initviewclip - DPS
x y instroke bool
int internaldict dict
(error)
x y userpath inueofill bool
instead of 
x y userpath inufill bool LEVEL 2
if\n      the device pixel containing the point (x, y) in user space would\n      be painted by a 
of the\n      specified userpath . Otherwise, it returns 
of userpath2. Otherwise,\n      it returns false.
x y userpath inustroke bool LEVEL 2
if\n      the device pixel containing the point (x, y) in user space would\n      be painted by a 
of\n      userpath2. Otherwise it returns false.
(error)
(error) DPS
(error)
(error)
(error)
(error) DPS
(error)
whose context is being\n      restored. Since 
would\n      destroy those values, but the stacks are unaffected by 
and cannot be\n      allowed.
matrix1 matrix2 invertmatrix matrix2
, 
(error)
- ISOLatin1Encoding array LEVEL 2
associated with the\n      array object.
x`\n      y` itransform x y
, 
context join mark obj1 ... objn DPS
error. This also occurs if the context has\n      already been joined or detached, if context identifies the\n      current context, or if the context does not share the current\n      context\#39;s
not yet matched by a 
dict key known bool
proc string kshow -
error.
- languagelevel int LEVEL 2
num1 num2 le bool
error.
array length int
(error)
x y lineto
appends a straight line segment to the current path . The line\n      extends from the current point to the point (x, y) in user space;\n      (x, y) then becomes the current point. If the current point is\n      undefined because the current path is empty, lineto executes the\n      error 
num ln real
key load value
- lock lock DPS
num log real
proc loop
repeatedly executes proc until proc executes the 
operator, at which point\n      interpretation resumes at the object next in sequence after the\n      loop. Control also leaves proc if the 
operator is executed. If proc never executes 
or 
num1 num2 lt bool
error.
font matrix\n      makefont font\#39;
operators\n      produce a font dictionary derived from an original font\n      dictionary, but with the FontMatrix entry altered. The derived\n      font dictionary is allocated in local or global VM according to\n      whether the original font dictionary is in local or global VM.\n      This is independent of the current VM allocation mode.
and makefont.
dict matrix makepattern pattern LEVEL 2
or as a &quot;color\n      value&quot; in the Pattern color space.
- mark mark
operator (array construction) is the most common operator that\n      works this way. It treats as operands all elements of the stack\n      down to a mark that was pushed by the 
operator ( 
is a synonym\n      for mark). It is possible to define procedures that work\n      similarly. Operators such as counttomark and cleartomark are\n      useful within such procedures.
- matrix matrix
dict maxlength int
error). In a Level 2 implementation, which permits a dictionary\n      to grow beyond its initial capacity, maxlength returns its\n      current capacity, a number at least as large as that returned by\n      length.
int1 int2 mod remainder
lock proc monitor - DPS
is already held by the\n      current context, monitor executes an 
error\n      without disturbing the 
error\n      results. These restrictions prevent the most straightforward\n      cases of a context deadlocking with itself.
x y moveto -
num1 num2 mul product
any1 any2 ne bool
operator.
num1 neg num2
- newpath
initializes the current path to be empty, causing the current\n      point to become undefined.
array noaccess array
(error)
bool1 not bool2
condition notify - DPS
used in the\n\n    
for condition. This\n      ensures that notifications cannot be lost due to a race between a\n      context executing notify and one executing 
- null null
associated with the null object.
- nulldevice -
or 
and 
and 
so the former device\n      can be reinstated and the other side effects of nulldevice\n      undone.
bool 1 bool 2
any0 ... anyn-1 n packedarray packedarray\n      LEVEL 2
object of\n      length n containing the objects any0 through anyn-1 as elements.\n      packedarray first removes the non-negative integer n from the\n      operand stack. It then removes that number of objects from the\n      operand stack, creates a packed array containing those objects as\n      elements, and finally pushes the resulting packed array object on\n      the operand stack.
error occurs\n      if the packed array is in global VM and any of any0 ... anyn-1\n      are in local VM.
- pathbbox llx lly urx ury
move line curve close pathforall
removes four operands from the stack, all of which must be\n      procedures. pathforall then enumerates the current path in order,\n      executing one of the four procedures for each element in the\n      path. The four basic kinds of elements in a path are 
are converted to the\n      corresponding absolute forms; 
are converted to sequences of\n      
was used to\n      construct any portion of the current path from a font whose\n      outlines are protected, pathforall is not allowed. Its execution\n      will produce an 
error (see 
any pop
removes the top element from the operand stack and discards\n      it.
string print
writes the characters of string to the standard output file.\n      The print operator provides the simplest means to send text to an\n      application or an interactive user. Note that print is a file\n      operator that has nothing to do with painting character shapes on\n      the current page (see 
obj tag printobject - LEVEL 2
error.
- product string LEVEL 2
- prompt
is a procedure executed by executive whenever it is ready for\n      the user to enter a new statement. The standard definition of\n      prompt is &quot;(PS&gt;) print flush&quot; and is defined in 
or some other dictionary higher on the dictionary\n      stack. 
any1 ... anyn pstack any1 ... anyn
operator to\n      each element of the stack, starting with the topmost element. See\n      the 
operator for a\n      description of its effects.
array index any put -
error.
error\n      occurs.
array1 index array2 putinterval -
error occurs.
- quit
terminates operation of the interpreter. The precise action of\n      quit depends on the environment in which the PostScript\n      interpreter is running. It may give control to an operating\n      system command interpreter, halt or restart the machine, and so\n      on.
in the expectation of a\n      subsequent 
is masked by\n      another definition of quit in 
is the same as 
can be executed only by an unencapsulated job;\n      in an encapsulated job, it causes an 
error.
- rand int
1, produced by a\n      pseudo-random number generator. The random number generator\#39;s\n      state can be reset by 
and\n      interrogated by 
(error)
array rcheck bool
dx1 dy1 dx2 dy2 dx3 dy3 rcurveto
(relative curveto) adds a Bezier cubic section to the current\n      path in the same manner as curveto. However, the three number\n      pairs are interpreted as displacements relative to the current\n      point (x0, y0) rather than as absolute coordinates. That is,\n      rcurveto constructs a curve from (x0, y0) to (x0+dx3, y0+dy3),\n      using (x0+dx1, y0+dy1) and (x0+dx2, y0+dy2) as Bezier control\n      points. See the description of 
for complete information.
, 
file read int true (if not end-of-file)
file string readhexstring substring\n      bool
file string readline substring bool
array readonly array
error will\n      result), but it can still be read by operators or executed by the\n      PostScript interpreter.
file string readstring substring bool
- realtime int LEVEL 2
x y width height rectclip -
LEVEL 2
or an encoded number string that describes an\n      arbitrary number of rectangles. After computing the new clipping\n      path, rectclip resets the current path to empty, as if by 
x y width height rectfill -
LEVEL 2
x y width height rectstroke -
LEVEL 2
x y width height rectviewclip
numarray rectviewclip
numstring rectviewclip - LEVEL 2
operation. The\n      &quot;inside&quot; of this combined path is the union of all the\n      rectangular subpaths, because the paths are all drawn in the same\n      direction and the nonzero winding number rule is used.
old new renamefile - LEVEL 2
error occurs.
occurs.
int proc repeat
executes proc int times, where int is a non-negative integer.\n      The repeat operator removes both operands from the stack before\n      executing proc for the first time. If proc executes the exit\n      operator, repeat terminates prematurely. repeat leaves no results\n      of its own on the stack, but proc may do so.
file resetfile - LEVEL 2
template proc scratch category\n      resourceforall - LEVEL 2
and 
error occurs.\n      However, no error occurs if there are no instances whose names\n      match the template. Of course, the proc that is called can\n      generate errors of its own.
key category resourcestatus status size\n      true LEVEL 2
error occurs.
save restore
resets the virtual memory (VM) to the state represented by the\n      supplied save object-in other words, the state at the time the\n      corresponding save was executed.
- reversepath
replaces the current path with an equivalent one whose segments\n      are defined in the reverse order. Precisely, reversepath reverses\n      the directions and order of segments within each subpath of the\n      current path. However, it does not alter the order of the\n      subpaths in the path with respect to each other.
- revision int LEVEL 2
in 
dx dy rlineto
(relative lineto) appends a straight line segment to the\n      current path in the same manner as 
dx dy rmoveto
(relative moveto) starts a new subpath of the current path in\n      the same manner as 
anyn-1 ... any0 n j roll any (j-1) mod n ... any0\n      anyn-1 ... anyj mod n
1 and\n      element n of the stack, moving all intervening elements one level\n      higher on the stack. If j is negative, each shift consists of\n      removing element n - 1 of the stack and pushing it on the top of\n      the stack, moving all intervening elements one level lower on the\n      stack.
- rootfont font LEVEL 2
would return the\n      currently selected base font.
angle rotate
angle matrix rotate matrix
num1 round num2
- rrand int
to reset the\n      random number generator to the current position in the sequence\n      of numbers produced.
string run
executes the contents of the file identified by string-in other\n      words, interprets the characters in that file as a PostScript\n      language program. When run encounters end-of-file or terminates\n      for some other reason (for example, stop), it closes the file.
- save
and 
sx sy scale sx sy matrix scale matrix
font scale scalefont font\#39;
operators produce a font\n      dictionary derived from an original font dictionary, but with the\n      FontMatrix entry altered. The derived font dictionary is\n      allocated in local or global VM according to whether the original\n      font dictionary is in local or global VM. This is independent of\n      the current VM allocation mode.
any scheck bool LEVEL 2
string seek search post match pre true (if\n      found)
key scale selectfont - key matrix selectfont\n      - LEVEL 2
key 
would not alter the behavior of\n      selectfont. selectfont can give rise to any of the errors\n      possible for the component operations, including arbitrary errors\n      from a user-defined 
- serialnumber int LEVEL 2
llx lly urx ury setbbox
establishes a bounding box for the current path, within which\n      the coordinates of all subsequent path construction operators\n      must fall.
proc setblackgeneration - LEVEL 2
wx wy llx lly urx ury setcachedevice
passes width and bounding box information to the PostScript\n      interpreter\#39;s font machinery. setcachedevice may be executed\n      only within the context of the BuildGlyph or BuildChar procedure\n      for a type 3 font.
before executing graphics\n      operators to define and paint the character. setcachedevice\n      requests the font machinery to transfer the results of those\n      operators both into the font cache, if possible, and onto the\n      current page. The operands to setcachedevice are all numbers\n      interpreted in the character coordinate system .
installs separate\n      metrics.
operator is\n      permitted.
w0x w0y llx lly urx ury w1x w1y vx vy\n      setcachedevice2 - LEVEL 2
operator\n      is permitted.
int setcachelimit
establishes the maximum number of bytes the pixel array of a\n      single cached character may occupy. Any character larger than\n      this (according to the character bounding box information passed\n      to setcachedevice) is not saved in the font cache. Instead, its\n      description is executed every time the character is encountered.\n      setcachelimit affects the decision whether to place new\n      characters in the font cache; it does not disturb any characters\n      already in the cache.
mark size lower upper setcacheparams -\n      LEVEL 2
operator. This is the same parameter set by\n      
and 
wx wy setcharwidth
is similar to setcachedevice, but it passes only width\n      information to the PostScript interpreter\#39;s font machinery\n      and it declares that the character being defined is not to be\n      placed in the font cache. setcharwidth is useful, for example, in\n      defining characters that incorporate two or more specific opaque\n      colors, such as opaque black and opaque white.
cyan magenta yellow black setcmykcolor -\n      LEVEL 2
comp1 comp2 ... compn setcolor - LEVEL 2
or 
operator.
dict setcolorrendering - LEVEL 2
LEVEL 2
array setcolorspace
LEVEL 2
The first form sets the color space parameter in the graphics\n      state to that described by the specified array.
, 
redproc greenproc blueproc grayproc\n      setcolortransfer - LEVEL 2
array offset setdash
sets the dash pattern parameter in the graphics state,\n      controlling the dash pattern used during subsequent executions of\n      the stroke operator and operators based on stroke, such as\n      rectstroke and ustroke.
string dict setdevparams - LEVEL 2
error and\n      does not alter any parameters. Some device parameters can be set\n      permanently in non-volatile storage that survives restarts of the\n      PostScript interpreter. This capability is implementation\n      dependent.
error occurs.\n\n      
error occurs.\n\n      
error occurs.\n\n      
occurs, depending on the device and\n        the parameter.\n    
file position setfileposition - LEVEL\n      2
. The result of\n      positioning beyond end-of-file for both reading and writing\n      depends on the behavior of the underlying file system. Typically,\n      positioning beyond the existing end-of-file will lengthen the\n      file if it is open for writing and the file\#39;s access permits.\n      The storage appended to the file has unspecified contents. If\n      lengthening the file is not permitted, an 
occurs. Possible causes\n      of an ioerror are: the file object is not valid, the underlying\n      file is not positionable, the specified position is invalid for\n      the file, or a device-dependent error condition is detected.
, 
num setflat
sets the flatness parameter in the graphics state to num, which\n      must be a positive number. This controls the accuracy with which\n      curved path segments are to be rendered on the raster output\n      device by operators such as stroke, fill, and clip. Those\n      operators render curves by approximating them with a series of\n      straight line segments. &quot;Flatness&quot; is an informal term\n      for the error tolerance of this approximation; it is the maximum\n      distance of any point of the approximation from the corresponding\n      point on the true curve, measured in output device pixels.
font setfont
establishes the font dictionary parameter in the graphics\n      state. This specifies the font to be used by subsequent character\n      operators, such as\n\n    
and 

.SH DESCRIPTION
 returns the absolute value of num1. The type of the result is the same as the type of num1 unless  num1 is the most negative integer, in which case the result is a  real. 

.SH EXAMPLE
.RI 


4.5 abs 4.5

-3 abs 3

0 abs 0

 

 

3 4 add 7

 

9.9 1.1 add 11.0

 

[23 (ab) -6] aload 23 (ab) -6 [23 (ab) -6]

 

(abbc) (ab) anchorsearch (bc) (ab) true

(abbc) (bb) anchorsearch (abbc) false

(abbc) (bc) anchorsearch (abbc) false

(abbc) (B) anchorsearch (abbc) false

 

true true and true % a complete truth table

true false and false

false true and false

false false and false

 

99 1 and 1

52 7 and 4

 

newpath 0 0 moveto 0 0 1 0 45 arc closepath

 

This constructs a 1-unit radius, 45-degree &quot;pie\n      slice.&quot;

 

newpath 0 0 2 0 90 arc 0 0 1 90 0 arcn closepath

 

This constructs a 2-unit radius, 1-unit wide, 90-degree\n      &quot;windshield wiper swath.&quot;

 

newpath 0 0 moveto

0 4 4 4 1 arct

4 4 lineto

 

This constructs a 4-unit wide, 4-unit high right angle with a\n      1-unit radius &quot;rounded corner.&quot;

 

3 array [null null null]

 

/Helvetica findfont 12 scalefont setfont

14 61 moveto (Normal spacing) show

14 47 moveto 4 0 (Wide spacing) ashow

 

(a) (bcd) (ef) 3 array astore [(a) (bcd) (ef)]

 

This creates a three element array, stores the strings (a),\n      (bcd), and (ef) into it as elements 0, 1, and 2, and leaves the\n      array object on the operand stack.

 

0 1 atan 0.0

1 0 atan 90.0

-100 0 atan 270.0

4 4 atan 45.0

 

/Helvetica findfont 12 scalefont setfont

30 60 moveto (Normal spacing) show

30 46 moveto 6 0 8#040 .5 0 (Wide spacing) awidthshow

 

7 3 bitshift -&gt; 56

142 -3 bitshift -&gt; 17

 

3.2 ceiling -&gt; 4.0

-4.8 ceiling -&gt; -4.0

99 ceiling -&gt; 99

 

clippath 1 setgray fill

 

This erases (fills with white) the interior of the current\n      clipping path.

 

1 2 3 2 copy -&gt; 1 2 3 2 3

1 2 3 0 copy -&gt; 1 2 3

 

In the other instances, copy copies all the elements of the first\n      composite object into the second. The composite object operands\n      must be of the same type, except that a packed array can be\n      copied into an array. This form of copy copies the value of a\n      composite object. This is quite different from 

 

In the case of arrays or strings, the length of the second object\n      must be at least as great as the first; copy returns the initial\n      subarray or substring of the second operand into which the\n      elements were copied. Any remaining elements of array2 or string2\n      are unaffected. copy cannot copy into packed arrays, because they\n      are read-only, but it can copy packed arrays into ordinary\n      arrays.

 

In the case of dictionaries, Level 1 implementations require that\n      dict2 have a length of zero and a maxlength at least as great as\n      the length of dict1. Level 2 implementations do not impose this\n      restriction, since dictionaries can expand when necessary.

 

The attributes (literal or executable and access) of the result\n      are normally the same as those of the second operand. However, in\n      Level 1 implementations, the access attribute of dict2 is copied\n      from that of dict1.

 

If the value of the destination object is in global VM and any of\n      the elements copied from the source object are composite objects\n      whose values are in local VM, an 

 

/a1 [1 2 3] def

a1 dup length array copy -&gt; [1 2 3]

 

0 cos -&gt; 1.0

90 cos -&gt; 0.0

 

clear count -&gt; 0

clear 1 2 3 count -&gt; 1 2 3 3

 

1 mark 2 3 counttomark -&gt; 1 mark 2 3 2

1 mark counttomark -&gt; 1 mark 0

 

/str 100 string def

currentfile str readline

here is a line of text

pop /textline exch def

 

After execution of this example, the name /textline

is associated with the string &quot;here is a line of\n      text&quot;.

 

(3.3E1) cvi -&gt; 33

-47.8 cvi -&gt; -47

520.9 cvi -&gt; 520

 

(abc) cvn -&gt; /abc

(abc) cvx cvn -&gt; abc

 

/temp 12 string def

123 10 temp cvrs -&gt; (123)

-123 10 temp cvrs -&gt; (-123)

123.4 10 temp cvrs -&gt; (123.4)

123 16 temp cvrs -&gt; (7B)

-123 16 temp cvrs -&gt; (FFFFFF85)

123.4 16 temp cvrs -&gt; (7B)

 

/str 20 string def

123 456 add str cvs -&gt; (579)

mark str cvs -&gt; (--nostringval--)

 

/ncnt 1 def % Define ncnt to be 1 in current

dict

/ncnt ncnt 1 add def % ncnt now has value 2

 

3 2 div -&gt; 1.5

4 2 div -&gt; 2.0

 

4.0 4 eq -&gt; true % A real and an integer may be equal

(abc) (abc) eq -&gt; true % Strings with equal elements are\n      equal

 

(abc) /abc eq -&gt; true % A string and a name may be equal

[1 2 3] dup eq -&gt; true % An array is equal to itself

[1 2 3] [1 2 3] eq -&gt; false % Distinct array objects not\n      equal

 

1 2 exch -&gt; 2 1

 

(3 2 add) cvx exec -&gt; 5

3 2 /add exec -&gt; 3 2 /add

3 2 /add cvx exec -&gt; 5

 

In the first line, the string (3 2 add) is made executable and\n      then executed. Executing a string causes its characters to be\n      scanned and interpreted according to the PostScript language\n      syntax rules.

 

In the second line, the literal objects 3, 2, and /add are pushed\n      on the operand stack, then exec is applied to the add. Since the\n      add is a literal name, executing it simply causes it to be pushed\n      back on the operand stack. The exec in this case has no useful\n      effect.

 

In the third line, the literal name /add on the top of the\n      operand stack is made executable by 

 

9 0.5 exp -&gt; 3.0

-9 -1 exp -&gt; -0.111111

 

4.2 4 ge -&gt; true

(abc)(d) ge -&gt; false

(aba)(ab) ge -&gt; true

(aba)(aba) ge -&gt; true

 

[31 41 59] 0 get -&gt; 31

[0 (a mixed-type array) [ ] /{\n\n    

2 get -&gt; [ ] % An empty array

 

/mykey (myvalue) def

currentdict /mykey get -&gt; (myvalue)

 

(abc) 1 get -&gt; 98 % Character code for &quot;b&quot;

(a) 0 get -&gt; 97

 

[9 8 7 6 5] 1 3 getinterval -&gt; [8 7 6]

(abcde) 1 3 getinterval -&gt; (bcd)

(abcde) 0 0 getinterval -&gt; () % An empty string

 

3 2 idiv -&gt; 1

4 2 idiv -&gt; 2

-5 2 idiv -&gt; -2

 

 

3 4 lt /{\n\n    

 

 

4 3 lt /{\n\n    

 

 

54 112 translate % Locate lower-left corner of square

120 120 scale % Scale 1 unit to 120 points

0 0 moveto 0 1 lineto % Fill square with gray background

1 1 lineto 1 0 lineto closepath

.9 setgray fill

0 setgray % Paint mask black

24 23 % Dimensions of source mask

true % Paint the 1 bits

[24 0 0 -23 0 23] % Map unit square to mask

 

/{\n\n    

1C07E2 3803C4 703182 F8EDFC B2BBC2 BB6F84 31BFC2 18EA3C 0E3E00\n      07FC00

03F800 1E1800 1FF800&gt;} % Mask data

imagemask

 

 

(a)(b)(c)(d) 0 index -&gt; (a)(b)(c)(d)(d)

(a)(b)(c)(d) 3 index -&gt; (a)(b)(c)(d)(a)

 

 

/mydict 5 dict def

mydict /total 0 put

mydict /total known -&gt; true

mydict /badname known -&gt; false

 

 

[1 2 4] length -&gt; 3

[] length -&gt; 0 % An array of zero length

/ar 20 array def ar length -&gt; 20

 

/mydict 5 dict def

mydict length -&gt; 0

mydict /firstkey (firstvalue) put

mydict length -&gt; 1

 

(abclength -&gt; 4 % The &quot;is one character

() length -&gt; 0 % No characters between ( and )

/foo length -&gt; 3

 

 

10 ln -&gt; 2.30259

100 ln -&gt; 4.60517

 

 

/avg /{\n\n    

/avg load -&gt; /{\n\n    

 

 

10 log -&gt; 1.0

100 log -&gt; 2.0

 

/Helvetica findfont [10 0 0 12 0 0] makefont setfont

 

This obtains the standard Helvetica font, which is defined with a\n      one unit line height, and scales it by a factor of 10 in the x\n      dimension and 12 in the y dimension. This produces a 12-unit high\n      font (i.e., a 12-point font in default user space) whose\n      characters are &quot;condensed&quot; in the x dimension by a\n      ratio of 10/12.

 

 

matrix -&gt; [1.0 0.0 0.0 1.0 0.0 0.0]

6 array identmatrix -&gt; [1.0 0.0 0.0 1.0 0.0 0.0]

 

The two lines in the example yield identical results.

 

 

/mydict 5 dict def

mydict length -&gt; 0

mydict maxlength -&gt; 5

 

 

5 3 mod -&gt; 2

5 2 mod -&gt; 1

-5 3 mod -&gt; -2

 

 

The last line of the example demonstrates that mod is a remainder\n      operation rather than a true modulo operation.

 

 

4.5 neg -&gt; -4.5

-3 neg -&gt; 3

 

true not -&gt; false % A complete truth table

false not -&gt; true

 

52 not -&gt; -53

 

 

true false or -&gt; true

true false or -&gt; true

false true or -&gt; true

false false or -&gt; false

 

17 5 or -&gt; 21

 

 

 

1 2 3 pop -&gt; 1 2

1 2 3 pop pop -&gt; 1

 

 

/ar [5 17 3 8] def

ar 2 (abcd) put

ar -&gt; [5 17 (abcd) 8]

 

 

/d 5 dict def

d /abc 123 put

d /{\n\n    

 

/st (abc) def

st 0 65 put % 65 is ASCII code for character &quot;A&quot;

st -&gt; (Abc)

 

 

/ar [5 8 2 7 3] def

ar 1 [(a) (b) (c)] putinterval

ar -&gt; [5 (a) (b) (c) 3]

 

/st (abc) def

st 1 (de) putinterval

st -&gt; (ade)

 

4 /{\n\n    

1 2 3 4 3 /{\n\n    

 

4 /{\n\n    

 

mark 0 /{\n\n    

 

In the last example, a zero repeat count meant that the procedure\n      is not executed at all, hence the mark is still topmost on the\n      stack.

 

 

(a)(b)(c) 3 -1 roll -&gt; (b)(c)(a)

(a)(b)(c) 3 1 roll -&gt; (c)(a)(b)

(a)(b)(c) 3 0 roll -&gt; (a)(b)(c)

 

3.2 round -&gt; 3.0

6.5 round -&gt; 7.0

-4.8 round -&gt; -5.0

-6.5 round -&gt; -6.0

99 round -&gt; 99

 

 

/saveobj save def

...arbitrary computation...

saveobj restore % Restore saved VM state

 

 

/Helvetica findfont 12 scalefont setfont

 

This obtains the standard Helvetica font, which is defined with a\n      1-unit line height, and scales it by a factor of 12 in both x and\n      y dimensions. This produces a 12-unit high font (i.e., a 12-point\n      font in default user space) whose characters have the same\n      proportions as those in the original font.

 

(abbc) (ab) search -&gt; (bc) (ab) ( ) true

(abbc) (bb) search -&gt; (c) (bb) (a) true

(abbc) (bc) search -&gt; ( ) (bc) (ab) true

(abbc) (B) search -&gt; (abbc) false

 

/Helvetica 10 selectfont /Helvetica findfont 10 scalefont\n      setfont

 

The two lines of the example have the same effect, but the first\n      one is almost always more efficient. The makefont, scalefont, and\n      selectfont operators produce a font dictionary derived from an\n      original font dictionary, but with the FontMatrix entry\n      altered.

The derived font dictionary is allocated in local or global VM\n      according to whether the original font dictionary is in local or\n      global VM. This is independent of the current VM allocation\n      mode.

 

 

% 50 line dot screen with 75 degree cyan, 15 degree magenta

% 0 degree yellow, and 45 degree black angled screens,

% which are commonly used for color printing

/sfreq 50 def % 50 halftone cells per inch

/sproc /{\n\n    

sfreq 75 /sproc load % 75 degree red (cyan) screen

sfreq 15 /sproc load % 15 degree green (magenta) screen

sfreq 0 /sproc load % 0 degree blue (yellow) screen

sfreq 45 /sproc load % 45 degree gray (black) screen\n      setcolorscreen

 

 

 

[ ] 0 setdash % Turn dashing off: solid lines

[3] 0 setdash % 3-unit on, 3-unit off,

... [2] 1 setdash % 1 on, 2 off, 2 on, 2 off,

... [2 1] 0 setdash % 2 on, 1 off, 2 on, 1 off,

... [3 5] 6 setdash % 2 off, 3 on, 5 off, 3 on, 5 off,

... [2 3] 11 setdash % 1 on, 3 off, 2 on, 3 off, 2 on, ...

 

/Helvetica findfont % Obtain prototype

Helvetica font 10 scalefont % Scale it to 10-unit size

setfont % Establish it as current font

 
.RE 


.SH ERRORS
.B  establishes an association between the non-negative integer index\n      and the object any in the (3ps)
.B  userdict /UserObjects get(3ps)
.B  3 1 roll put(3ps)
.B  In other words, it simply stores any into the array at the\n      position specified by index.(3ps)
.B  If defineuserobject creates or extends the UserObjects array, it\n      allocates the array in local VM, regardless of the current VM\n      allocation mode.(3ps)
.B  The behavior of defineuserobject obeys normal PostScript language\n      semantics in all respects. In particular, the modification to the\n      UserObjects array and to userdict, if any, is immediately visible\n      to all contexts that share the same local VM. It can be undone by\n      a subsequent (3ps)
.B  according to the usual VM rules. index values must be within the\n      range permitted for arrays; a large index value may cause\n      allocation of an array that would exhaust VM resources. Assigning\n      index values sequentially starting at zero is strongly\n      recommended.(3ps)
.B  creates an empty dictionary with an initial capacity of int\n      elements and pushes the created dictionary object on the operand\n      stack. int is expected to be a nonnegative integer. The\n      dictionary is allocated in local or global VM according to the VM\n      allocation mode.(3ps)
.B  In Level 1 implementations, the resulting dictionary has a\n      maximum capacity of int elements. Attempting to exceed that limit\n      causes a (3ps)
.B  In Level 2 implementations, the int operand specifies only the\n      initial capacity; the dictionary can grow beyond that capacity if\n      necessary. The dict operator immediately consumes sufficient VM\n      to hold int key-value pairs. If more than that number of entries\n      are subsequently stored in the dictionary, additional VM is\n      consumed at that time.(3ps)
.B  There is a cost associated with expanding a dictionary beyond its\n      initial allocation. For efficiency reasons, a dictionary is\n      expanded in chunks rather than one element at a time, so it may\n      contain a substantial amount of unused space. If a program knows\n      how large a dictionary it needs, it should create one of that\n      size initially. On the other hand, if a program cannot predict\n      how large the dictionary will eventually grow, it should choose a\n      small initial allocation sufficient for its immediate needs. The\n      built-in writable dictionaries (for example, (3ps)
.B  string1 string2 ge bool(3ps)
.B  pops two objects from the operand stack and pushes the boolean\n      value true if the first operand is greater than or equal to the\n      second, false otherwise. If both operands are numbers, ge\n      compares their mathematical values. If both operands are strings,\n      ge compares them element by element, treating the elements as\n      integers in the range 0 to 255, to determine whether the first\n      string is lexically greater than or equal to the second.(3ps)
.B  If the operands are of other types or one is a string and the\n      other is a number, ge executes the (3ps)
.B  processes an external request to interrupt execution of a\n      PostScript language program. When the interpreter receives an\n      interrupt request, it executes interrupt as if it were an\n      error-in other words, it looks up the name interrupt in (3ps)
.B  Unlike most other errors, occurrence of an interrupt does not\n      cause the object being executed to be pushed on the operand stack\n      nor does it disturb the operand stack in any way.(3ps)
.B  The precise nature of an external interrupt request depends on\n      the environment in which the PostScript interpreter is running.\n      For example, in some environments, receipt of a control-C\n      character from a serial communication channel gives rise to the\n      interrupt error. This enables a user to explicitly abort a\n      PostScript computation. The default definition of interrupt\n      executes a stop.(3ps)
.B  userpath1 userpath2 inueofill bool LEVEL 2(3ps)
.B  is similar to (3ps)
.B  installs the &quot;null device&quot; as the current output\n      device. The null device corresponds to no physical output device\n      and has no raster memory associated with it. Marks placed on the\n      current page by painting operators (for example, (3ps)
.B  nulldevice sets the default transformation matrix to be the\n      identity transform(3ps)
.B  [1.0 0.0 0.0 1.0 0.0 0.0]. A PostScript language program may\n      change this to any other matrix (using (3ps)
.B  The null device is useful for exercising the PostScript\n      interpreter\#39;s graphics and font machinery for such purposes\n      as operating on paths, computing bounding boxes for graphical\n      shapes, and performing coordinate transformations using CTM\n      without generating output. Such manipulations should be bracketed\n      by\n\n    (3ps)
.B  is an integer designating the current revision level of the\n      product in which the PostScript interpreter is running. Each\n      product has its own numbering system for revisions, independent\n      of those of any other product. This is distinct from the value of\n      (3ps)
.B  invalidfont(3ps)
.B  stackunderflow(3ps)
.B  typecheck(3ps)

.SH SEE ALSO
.B  returns the sum of num1 and num2.(3ps)
.B  If both operands are integers and the result is within integer\n      range, the result is an integer; otherwise, the result is a\n      real.(3ps)
.B  packedarray aload packedarray0 ... packedarrayn-1 packedarray(3ps)
.B  successively pushes all n elements of array or packedarray on the\n      operand stack (where n is the length of the operand), and finally\n      pushes the operand itself.(3ps)
.B  post match true (if found)(3ps)
.B  string false (if not found)(3ps)
.B  determines if the string seek matches the initial substring of\n      string(3ps)
.B  (that is, string is at least as long as seek and the\n      corresponding characters are equal).(3ps)
.B  If it matches, anchorsearch splits string into two segments:\n      match, the portion of string that matches seek, and post, the\n      remainder of string; it then pushes the string objects post and\n      match and the boolean (3ps)
.B  int1 int1 and int1(3ps)
.B  If the operands are booleans, and returns their logical\n      conjunction. If the operands are integers, and returns the\n      bitwise and of their binary representations.(3ps)
.B  appends a counterclockwise arc of a circle to the current path,\n      possibly preceded by a straight line segment. The arc has (x, y)\n      as center, r as radius, ang1 the angle of a vector from (x, y) of\n      length r to the first endpoint of the arc, and ang2 the angle of\n      a vector from (x, y) of length r to the second endpoint of the\n      arc.(3ps)
.B  If there is a current point, the arc operator includes a straight\n      line segment from the current point to the first endpoint of this\n      arc and then adds the arc into the current path. If the current\n      path is empty, the arc operator does not produce the initial\n      straight line segment. In any event, the second endpoint of the\n      arc becomes the new current point.(3ps)
.B  Angles are measured in degrees counterclockwise from the positive\n      x-axis of the current user coordinate system. The curve produced\n      is circular in user space. If user space is scaled non-uniformly\n      (i.e., differently in x and y) arc will produce elliptical curves\n      in device space.(3ps)
.B  The operators that produce arcs ( (3ps)
.B  represent them internally as one or more Bezier cubic curves.\n      This is done with sufficient accuracy that a faithful rendition\n      of an arc is produced. However, a program that reads the\n      constructed path using pathforall will encounter (3ps)
.B  , (3ps)
.B  (arc negative) behaves like arc, but arcn builds its arc segment\n      in a clockwise direction in user space.(3ps)
.B  appends an arc of a circle to the current path, possibly preceded\n      by a straight line segment. The arc is defined by a radius r and\n      two tangent lines.The tangent lines are those drawn from the\n      current point, here called (x0, y0), to (x1, y1), and from (x1,\n      y1) to (x2, y2). If the current point is undefined, arct executes\n      the error (3ps)
.B  The center of the arc is located within the inner angle between\n      the tangent lines. It is the only point located at distance r in\n      a direction perpendicular to both lines. The arc begins at the\n      first tangent point (xt1, yt1) on the first tangent line, passes\n      between its center and the point (x1, y1), and ends at the second\n      tangent point (xt2, yt2) on the second tangent line.(3ps)
.B  Before constructing the arc, arct adds a straight line segment\n      from the current point (x0, y0) to (xt1, yt1), unless those\n      points are the same. In any event, (xt2, yt2) becomes the new\n      current point.(3ps)
.B  The curve produced is circular in user space. If user space is\n      scaled non-uniformly (i.e., differently in x and y) arct will\n      produce elliptical curves in device space.(3ps)
.B  If the two tangent lines are collinear, arct merely appends a\n      straight line segment from (x0, y0) to (x1, y1), considering the\n      arc to be part of a degenerate circle with radius 0 at that\n      point.(3ps)
.B  produces the same effect as arct. It also returns the two tangent\n      point coordinates (xt1, yt1) and (xt2, yt2) in user space.(3ps)
.B  arcto is not allowed as an element of a user path, whereas arct\n      is allowed.(3ps)
.B  creates an array of length int, each of whose elements is\n      initialized with a null object, and pushes this array on the\n      operand stack. The int operand must be a non-negative integer not\n      greater than the maximum allowable array length . The array is\n      allocated in local or global VM according to the current VM\n      allocation mode.(3ps)
.B  paints the characters of string in a manner similar to (3ps)
.B  This operator enables a string of text to be fitted to a specific\n      width by adjusting all the spaces between characters by a uniform\n      amount.(3ps)
.B  If the value of array is in global VM and any of any0 ... anyn-1\n      are composite objects whose values are in local VM, an (3ps)
.B  returns the angle (in degrees between 0 and 360) whose tangent is\n      num/den. Either num or den may be zero, but not both. The signs\n      of num and den determine the quadrant in which the result will\n      lie: a positive num yields a result in the positive y plane, a\n      positive den yields a result in the positive x plane. The result\n      is a real.(3ps)
.B  paints the characters of string in a manner similar to show, but\n      combines the special effects of ashow and widthshow. awidthshow\n      adjusts the width of each character shown by adding ax to its x\n      width and ay to its y width, thus modifying the spacing between\n      characters. Furthermore, awidthshow modifies the width of each\n      occurrence of the character char by an additional amount (cx,\n      cy). The interpretation of char is as described for the (3ps)
.B  This operator enables fitting a string of text to a specific\n      width by adjusting all of the spaces between characters by a\n      uniform amount, while independently controlling the width of some\n      specific character, such as the space character.(3ps)
.B  replaces executable operator names in proc by their values. For\n      each element of proc that is an executable name, bind looks up\n      the name in the context of the current dictionary stack as if by\n      (3ps)
.B  For each procedure object in proc, bind applies itself\n      recursively to that procedure, makes the procedure read-only, and\n      stores it back into proc. The bind operator applies to both\n      arrays and packed arrays, but it treats their access attributes\n      differently. It will ignore a read-only array; that is, it will\n      neither bind elements of the array nor examine nested procedures.\n      On the other hand, bind will operate on a packed array (which is\n      always read-only), disregarding its access attribute.(3ps)
.B  No error occurs in either case.(3ps)
.B  The effect of bind is that all operator names in proc and in\n      procedures nested in proc to any depth become &quot;tightly\n      bound&quot; to the operators themselves. During subsequent\n      execution of proc, the interpreter encounters the operators\n      themselves rather than the names of operators.(3ps)
.B  shifts the binary representation of int1 left by shift bits and\n      returns the result. Bits shifted out are lost; bits shifted in\n      are zero. If shift is negative, then a right shift by -shift bits\n      is performed. This produces an arithmetically correct result only\n      for positive values of int1. Both int1 and shift must be\n      integers.(3ps)
.B  returns the number of bytes that are immediately available for\n      reading from file without waiting.(3ps)
.B  The result is -1 if end-of-file has been encountered or if the\n      number of bytes available cannot be determined for other\n      reasons.(3ps)
.B  returns measurements of several aspects of the font cache .(3ps)
.B  cachestatus reports the current consumption and limit for each of\n      three font cache resources: bytes of bitmap storage (bsize and\n      bmax), font/matrix combinations (msize and mmax), and total\n      number of cached characters (csize and cmax). It also reports the\n      limit on the number of bytes occupied by a single cached\n      character (blimit). Characters whose bitmaps are larger than this\n      are not cached.(3ps)
.B  returns the least integer value greater than or equal to num1.(3ps)
.B  The type of the result is the same as the type of the operand.(3ps)
.B  obtains the character path outlines that would result if string\n      were shown at the current point using show. Instead of painting\n      the path, however, charpath appends the path to the current path.\n      This yields a result suitable for general filling, stroking, or\n      clipping(3ps)
.B  The bool operand determines what happens if the character path is\n      designed to be stroked rather than filled or outlined. If bool is\n      (3ps)
.B  The outlines of some fonts are protected. (In Level 1\n      implementations, this applies to all fonts; in Level 2, only to\n      certain special fonts and not to ordinary Type 1 or Type 3\n      fonts.) If the current font is protected, using charpath to\n      obtain its outlines causes the (3ps)
.B  operators to be disabled for as long as those outlines remain in\n      the current path.(3ps)
.B  pops all objects from the operand stack and discards them.(3ps)
.B  pops all dictionaries off the dictionary stack except for the\n      permanent entries. In Level 1 implementations the permanent\n      entries are systemdict and userdict; in Level 2 they are (3ps)
.B  (In Level 1 implementations, cleardictstack is a procedure\n      defined in userdict instead of an operator defined in\n      systemdict.)(3ps)
.B  pops the operand stack repeatedly until it encounters a mark,\n      which it also pops from the stack(3ps)
.B  (obj1 through objn are any objects other than marks).(3ps)
.B  intersects the inside of the current clipping path with the\n      inside of the current path to produce a new, smaller current\n      clipping path.(3ps)
.B  The inside of the current path is determined by the normal\n      PostScript non-zero winding number rule , while the inside of the\n      current clipping path is determined by whatever rule was used at\n      the time that path was created.(3ps)
.B  In general, clip produces a new path whose inside (according to\n      the non-zero winding number rule) consists of all areas that are\n      inside both of the original paths. The way this new path is\n      constructed (the order of its segments, whether it\n      self-intersects, etc.) is not specified.(3ps)
.B  clip treats an open subpath of the current path as though it were\n      closed; it does not actually alter the path itself. It is\n      permissible for the current path to be empty. The result of\n      executing clip is always a non-empty clipping path, though it may\n      enclose zero area.(3ps)
.B  There is no way to enlarge the current clipping path (other than\n      by (3ps)
.B  Unlike (3ps)
.B  sets the current path to one that describes the current clipping\n      path.(3ps)
.B  This operator is useful for determining the exact extent of the\n      imaging area on the current output device.(3ps)
.B  If the current clipping path is the result of application of the\n      (3ps)
.B  closes file-in other words, breaks the association between the\n      file object and the underlying file. For an output file,\n      closefile first performs a\n\n    (3ps)
.B  closes the current subpath by appending a straight line segment\n      connecting the current point to the subpath\#39;s starting\n      point-generally, the point most recently specified by (3ps)
.B  closepath terminates the current subpath. Appending another\n      segment to the current path will begin a new subpath, even if it\n      is drawn from the endpoint reached by the closepath.(3ps)
.B  paints a sampled image onto the current page.(3ps)
.B  The description here only summarizes the colorimage operator.(3ps)
.B  The sampled image is a rectangular array of width x height sample\n      values. colorimage interprets the width, height, and matrix\n      operands in the same way as does (3ps)
.B  Each image sample consists of 1, 3, or 4 color components, as\n      specified by the ncomp operand. Each component consists of\n      bits/comp bits (1, 2, 4, 8, or 12). All components are the same\n      size.(3ps)
.B  If ncomp is 1, the samples have only one (gray) component; the\n      operation of colorimage is equivalent to that of image using the\n      first five operands. If ncomp is 3, the samples consist of red,\n      green, and blue components. If ncomp is 4, the samples consist of\n      cyan, magenta, yellow, and black components. The 1, 3, and 4\n      component values are interpreted according to the DeviceGray,\n      DeviceRGB, and DeviceCMYK color spaces, respectively , regardless\n      of the current color space.(3ps)
.B  The multi operand is a boolean that determines how colorimage is\n      to obtain sample data from its data sources. If multi is false,\n      there is a single data source, datasrc0; colorimage obtains all\n      components from that source, interleaved on a per-sample basis.\n      If multi is true, there are ncomp data sources, datasrc0 ...\n      datasrcn-1, one for each component. The data sources can be\n      procedures, strings, or files, including filtered files. They\n      must all be of the same type .(3ps)
.B  Unlike (3ps)
.B  Execution of this operator is not permitted in certain\n      circumstances.(3ps)
.B  concatenates matrix with the current transformation matrix (CTM).\n      Precisely, concat replaces the CTM by matrix x CTM . The effect\n      of this is to define a new user space whose coordinates are\n      transformed into the former user space according to matrix.(3ps)
.B  Examples(3ps)
.B  [72 0 0 72 0 0] concat(3ps)
.B  72 72 scale(3ps)
.B  The two examples have the same effect on the current\n      transformation.(3ps)
.B  replaces the value of matrix3 by the result of multiplying\n      matrix1 x matrix2, and pushes the modified matrix3 back on the\n      operand stack. This operator does not affect the CTM.(3ps)
.B  creates a new condition object, unequal to any condition object\n      already in existence, and pushes it on the operand stack. The\n      condition initially has no contexts waiting on it . Since a\n      condition is a composite object, creating one consumes VM. The\n      condition\#39;s value is allocated in local or global VM\n      according to the current VM allocation mode.(3ps)
.B  occurs when (3ps)
.B  When a configurationerror is generated, a two-element array\n      called errorinfo is placed in (3ps)
.B  array1 array2 copy subarray2(3ps)
.B  dict1 dict2 copy dict2(3ps)
.B  string1 string2 copy substring2(3ps)
.B  packedarray1 array2 copy subarray2(3ps)
.B  gstate1 gstate2 copy gstate2(3ps)
.B  performs two entirely different functions, depending on the type\n      of the topmost operand.(3ps)
.B  In the first instance, where the top element on the operand stack\n      is a non-negative integer n, copy pops n from the stack and\n      duplicates the top n elements on the operand stack as shown\n      above. This form of copy operates only on the objects themselves,\n      not on the values of composite objects.(3ps)
.B  transmits one copy of the current page to the current output\n      device without erasing the current page or changing the graphics\n      state. This is in contrast to showpage, which performs the\n      equivalent of an (3ps)
.B  and an (3ps)
.B  copypage is intended primarily as a debugging aid or as a means\n      of printing successive pages with incrementally accumulated\n      contents. Routine use of copypage as a substitute for showpage\n      may severely degrade the page throughput of some PostScript\n      printers. To print multiple copies of the same page, use\n      the#copies implicit parameter of (3ps)
.B  returns the cosine of angle, which is interpreted as an angle in\n      degrees.(3ps)
.B  The result is a real.(3ps)
.B  counts the number of items on the operand stack and pushes this\n      count on the operand stack.(3ps)
.B  counts the number of dictionaries currently on the dictionary\n      stack and pushes this count on the operand stack.(3ps)
.B  counts the number of objects on the execution stack and pushes\n      this count on the operand stack.(3ps)
.B  counts the number of objects on the operand stack starting with\n      the top element and continuing down to but not including the\n      first mark encountered. obj1 through objn are any objects other\n      than marks.(3ps)
.B  invokes proc once for each operation of the font mapping\n      algorithm. The value of currentfont during(3ps)
.B  the execution of proc is the base font that the algorithm\n      ultimately selects. When proc is invoked, the stack contains\n      three values: the selected character\#39;s code (an integer) and\n      the x and y components of the width vector for the character in\n      the user coordinate system. cshow does not paint the character\n      and does not change the current point, although proc may do so.\n      When proc completes execution, the value of (3ps)
.B  cshow can be used to provide careful positioning of individual\n      characters while taking advantage of the composite font mapping\n      machinery of the interpreter. cshow is intended primarily for use\n      with composite fonts . However, it can also be used with a base\n      font. The mapping algorithm for a base font simply selects\n      consecutive characters from the string.(3ps)
.B  returns the current black generation function in the graphics\n      state.(3ps)
.B  pushes a mark object followed by the current cache parameters on\n      the operand stack. The number of cache parameters returned is\n      variable (see (3ps)
.B  returns the current color in the graphics state according to the\n      cyan-magenta-yellow-black color space. If the current color space\n      is DeviceCMYK, currentcmykcolor returns the color values most\n      recently specified by setcmykcolor or setcolor. If the current\n      color space is DeviceRGB or DeviceGray, currentcmykcolor converts\n      the current color to CMYK. For any other color space,\n      currentcmykcolor returns 0.0 0.0 0.0 1.0.(3ps)
.B  returns the components, in the current color space, of the color\n      specified by the current color parameters in the graphics\n      state.(3ps)
.B  returns the value of the CIE based color rendering dictionary\n      parameter in the graphics state.(3ps)
.B  greenfreq greenang greenproc(3ps)
.B  bluefreq blueang blueproc(3ps)
.B  grayfreq grayang grayproc\n\n    (3ps)
.B  currentcolorscreen returns all 12 current halftone screen\n        parameters in the graphics state.(3ps)
.B  currentcolorscreen returns the three screen parameters repeated\n        four times.(3ps)
.B  currentcolorscreen returns 60, 0, and the halftone dictionary,\n        repeated four times.\n    (3ps)
.B  returns an array containing the identifying key and parameters of\n      the color space in the graphics state. currentcolorspace always\n      returns an array, even if the color space has no parameters and\n      was selected by presenting just a name to setcolorspace.(3ps)
.B  returns the current transfer functions in the graphics state for\n      all four color components.(3ps)
.B  If the current transfer functions were specified by (3ps)
.B  If (3ps)
.B  returns an integer that identifies the current execution\n      context.(3ps)
.B  returns the current dash array and offset in the graphics\n      state.(3ps)
.B  returns a dictionary containing the keys and current values of\n      all parameters for the device identified by string. The returned\n      dictionary is merely a container for key-value pairs. Each\n      execution of currentdevparams allocates and returns a new\n      dictionary.(3ps)
.B  pushes the current dictionary (the dictionary on top of the\n      dictionary stack) on the operand stack. currentdict does not pop\n      the dictionary stack; it just pushes a duplicate of its top\n      element on the operand stack.(3ps)
.B  returns the file object from which the PostScript interpreter is\n      currently or was most recently reading program input. Precisely,\n      currentfile returns the topmost file object on the execution\n      stack. If there isn\#39;t one, it returns an invalid file object\n      that doesn\#39;t correspond to any file. This never occurs during\n      execution of ordinary user programs.(3ps)
.B  The file returned by currentfile is usually but not always the\n      standard input file. An important exception occurs during\n      interactive mode operation . In this case, the interpreter does\n      not read directly from the standard input file; instead, it reads\n      from a file representing an edited statement (each statement is\n      represented by a different file).(3ps)
.B  The currentfile operator is useful for obtaining images or other\n      data residing in the program file itself (see the example below).\n      At any given time, this file is positioned at the end of the last\n      PostScript(3ps)
.B  language token read from the file by the interpreter. If that\n      token was a number or a name immediately followed by a white\n      space character, the file is positioned after the white space\n      character (the first, if there are several). Otherwise it is\n      positioned after the last character of the token.(3ps)
.B  returns the current value of the flatness parameter in the\n      graphics state.(3ps)
.B  returns the current font dictionary in the graphics state.\n      Normally, this is the font most recently established by setfont\n      or selectfont. However, when executed inside a font\#39;s\n      BuildGlyph or BuildChar procedure or a procedure invoked by (3ps)
.B  returns the VM allocation mode currently in effect.(3ps)
.B  returns the gray value of the current color parameter in the\n      graphics state. If the current color space is DeviceGray,\n      currentgray returns the color value most recently specified to\n      setgray or setcolor. If the current color space is DeviceRGB or\n      DeviceCMYK, currentgray converts the current color to a gray\n      value. For any other color space, currentgray returns 0.0.(3ps)
.B  replaces the value of the gstate object by a copy of the current\n      graphics state and pushes gstate back on the operand stack. If\n      gstate is in global VM , currentgstate will generate an\n      invalidaccess error if any of the composite objects in the\n      current graphics state are in local VM. Such objects might\n      include the current font, screen function, halftone dictionary,\n      transfer function, or dash pattern. In general, allocating gstate\n      objects in global VM is risky and should be avoided.(3ps)
.B  returns the current halftone dictionary in the graphics state. If\n      the current halftone was defined by setscreen or setcolorscreen\n      instead of by sethalftone, currenthalftone fabricates and returns\n      a halftone dictionary (type 1 or 2) that contains the screen\n      parameters.(3ps)
.B  returns the current values of the halftone phase parameters in\n      the graphics state. If sethalftonephase has not been executed,\n      zero is returned for both values.(3ps)
.B  returns the current color parameter in the graphics state\n      according to the huesaturation-brightness model. If the current\n      color space is DeviceRGB, currenthsbcolor returns the color\n      values most recently specified by (3ps)
.B  For any other color space, currenthsbcolor returns 0.0 0.0\n      0.0.(3ps)
.B  returns the current value of the line cap parameter in the\n      graphics state.(3ps)
.B  returns the current value of the line join parameter in the\n      graphics state.(3ps)
.B  returns the current value of the line width parameter in the\n      graphics state.(3ps)
.B  replaces the value of matrix with the value of the current\n      transformation matrix (CTM) in the graphics state, and pushes the\n      modified matrix back on the operand stack .(3ps)
.B  returns the current value of the miter limit parameter in the\n      graphics state.(3ps)
.B  returns the object format parameter currently in effect.(3ps)
.B  returns the value of the overprint parameter in the graphics\n      state.(3ps)
.B  returns the array packing mode currently in effect.(3ps)
.B  returns a read-only dictionary that describes the page-oriented\n      output device in the current graphics state. currentpagedevice\n      creates a new dictionary if necessary. If the device in the\n      current graphics state is not a page device, currentpagedevice\n      returns an empty dictionary (length of 0).(3ps)
.B  Changes made to the hardware state of the output device since the\n      last execution of (3ps)
.B  returns the x and y coordinates of the current point in the\n      graphics state (i.e., the trailing endpoint of the current path).\n      If the current point is undefined because the current path is\n      empty, currentpoint executes the\n\n    (3ps)
.B  error.(3ps)
.B  The current point is reported in the user coordinate system.\n      Points entered into a path are immediately converted to device\n      coordinates by the current transformation matrix (CTM); existing\n      points are not changed by subsequent modifications to the CTM.\n      currentpoint computes the user space coordinate that corresponds\n      to the current point according to the current value of the CTM.\n      If a current point is set and then the CTM is changed,\n      currentpoint will report a different position in user space than\n      it did before.(3ps)
.B  returns the three components of the current color in the graphics\n      state according to the red-green-blue color model. If the current\n      color space is DeviceRGB, currentrgbcolor returns the color\n      values most recently specified to setrgbcolor or setcolor (or\n      transformed values specified to sethsbcolor). If the current\n      color space is DeviceGray or DeviceCMYK, currentrgbcolor converts\n      the current color to RGB.(3ps)
.B  For any other color space, currentrgbcolor returns 0.0 0.0\n      0.0.(3ps)
.B  returns the current halftone screen parameters (frequency, angle,\n      and proc) in the graphics state, assuming the current screen was\n      established by setscreen. If (3ps)
.B  If (3ps)
.B  has the same semantics as currentglobal. This operator is defined\n      for compatibility with existing Display PostScript\n      applications.(3ps)
.B  returns the current stroke adjust parameter in the graphics\n      state.(3ps)
.B  returns a dictionary containing the keys and current values of\n      all system parameters that are defined in the implementation. The\n      returned dictionary is merely a container for key-value pairs.\n      Each execution of currentsystemparams allocates and returns a new\n      dictionary.(3ps)
.B  returns the current transfer function in the graphics state,\n      assuming that it was established by (3ps)
.B  returns the current undercolor removal function in the graphics\n      state.(3ps)
.B  returns a dictionary containing the keys and current values of\n      all user parameters that are defined in the implementation. The\n      returned dictionary is a container for key-value pairs. Each\n      execution of currentuserparams allocates and returns a new\n      dictionary.(3ps)
.B  adds a Bezier cubic section to the current path between the\n      current point, referred to here as (x0, y0), and the point (x3,\n      y3), using (x1, y1) and (x2, y2) as the Bezier cubic control\n      points. After constructing the curve, curveto makes (x3, y3) the\n      new current point. If the current point is undefined because the\n      current path is empty, curveto executes the error (3ps)
.B  The four points define the shape of the curve geometrically. The\n      curve starts at (x0, y0), it is tangent to the line from (x0, y0)\n      to (x1, y1) at that point, and it leaves the point in that\n      direction. The curve ends at (x3, y3), it is tangent to the line\n      from (x2, y2) to (x3, y3) at that point, and it approaches the\n      point from that direction. The lengths of the lines (x0, y0) to\n      (x1, y1) and (x2, y2) to (x3, y3) represent, in a sense, the\n      &quot;velocity&quot; of the path at the endpoints. The curve is\n      always entirely enclosed by the convex quadrilateral defined by\n      the four points.(3ps)
.B  The mathematical formulation of a Bezier cubic curve is derived\n      from a pair of parametric cubic equations:(3ps)
.B  The cubic section produced by curveto is the path traced by x(t)\n      and y(t) as t ranges from 0 to 1. The Bezier control points\n      corresponding to this curve are:(3ps)
.B  string cvi int(3ps)
.B  (convert to integer) takes an integer, real, or string object\n      from the stack and produces an integer result. If the operand is\n      an integer, cvi simply returns it. If the operand is a real, it\n      truncates any fractional part (i.e., rounds it toward 0) and\n      converts it to an integer. If the operand is a string, it\n      interprets the characters of the string as a number according to\n      the PostScript syntax rules. If that number is a real, cvi\n      converts it to an integer. cvi executes a (3ps)
.B  (convert to literal) makes the object on the top of the operand\n      stack have the literal instead of executable attribute.(3ps)
.B  (convert to name) converts the string operand to a name object\n      that is lexically the same as the string. The name object is\n      executable if the string was.(3ps)
.B  string cvr real(3ps)
.B  (convert to real) takes an integer, real, or string object and\n      produces a real result. If the operand is an integer, cvr\n      converts it to a real. If the operand is a real, cvr simply\n      returns it. If the operand is a string, it interprets the\n      characters of the string as a number according to the PostScript\n      syntax rules. If that number is an integer, cvr converts it to a\n      real.(3ps)
.B  (convert to string with radix) produces a text representation of\n      the number num in the specified radix, stores the text into the\n      supplied string (overwriting some initial portion of its value),\n      and returns a string object designating the substring actually\n      used. If string is too small to hold the result of the\n      conversion, cvrs executes the error (3ps)
.B  If radix is 10, cvrs produces the same result as cvs when applied\n      to either an integer or a real. That is, it produces a signed\n      integer or real token that conforms to the PostScript language\n      syntax for that number.(3ps)
.B  If radix is not 10, cvrs converts num to an integer, as if by\n      cvi. Then it treats the machine representation of that integer as\n      an unsigned positive integer and converts it to text form\n      according to the specific radix. The resulting text is not\n      necessarily a valid number. However, if it is immediately\n      preceded by the same radix and#, the combination is a valid\n      PostScript language token that represents the same number.(3ps)
.B  (convert to string) produces a text representation of an\n      arbitrary object any, stores the text into the supplied string\n      (overwriting some initial portion of its value), and returns a\n      string object designating the substring actually used. If the\n      string is too small to hold the result of conversion, cvs\n      executes the error (3ps)
.B  If any is a number, cvs produces a string representation of that\n      number. If any is a boolean, cvs produces either the string true\n      or the string false. If any is a string, cvs copies its contents\n      into string. If any is a name or an operator, cvs produces the\n      text representation of that name or the operator\#39;s name. If\n      any is any other type, cvs produces the text --nostringval--.(3ps)
.B  If any is a real number, the precise format of the result string\n      is implementation dependent and not under program control. For\n      example, the value 0.001 might be represented as 0.001 or as\n      1.0E-3.(3ps)
.B  (convert to executable) makes the object on top of the operand\n      stack have the executable instead of literal attribute.(3ps)
.B  If the current dictionary is in global VM and value is a\n      composite object whose value is in local VM, an (3ps)
.B  replaces the value of matrix with the default transformation\n      matrix for the current output device and pushes this modified\n      matrix back on the operand stack.(3ps)
.B  registers font as a font dictionary associated with key (usually\n      a name). definefont first checks that font is a well-formed font\n      dictionary-in other words, contains all required key-value pairs.\n      It inserts an additional entry whose key is FID and whose value\n      is an object of type fontID. The dictionary must be large enough\n      to accommodate this additional entry. It makes the\n      dictionary\#39;s access read-only. Finally, it associates key\n      with font in the font directory.(3ps)
.B  In Level 2, it is permissible to associate a font dictionary with\n      more than one key. If font has already been registered,\n      definefont does not alter it in any way.(3ps)
.B  If font is a composite font , definefont also inserts the entries\n      MIDVector and CurMID, and adds entries PrefEnc, EscChar, ShiftIn,\n      and ShiftOut if they are required and are not already present.\n      All the descendant fonts must have been registered by definefont\n      previously.(3ps)
.B  Subsequent invocation of findfont with key will return font. Font\n      registration is subject to the normal semantics of VM . In\n      particular, the lifetime of the definition depends on the VM\n      allocation mode at the time definefont is executed. A local\n      definition can be undone by a subsequent (3ps)
.B  definefont is actually a special case of (3ps)
.B  associates a resource instance with a resource name in a\n      specified category. category is a name object that identifies a\n      resource category, such as Font . key is a name or string object\n      that will be used to identify the resource instance. (Names and\n      strings are interchangeable; other types of keys are permitted\n      but are not recommended.) instance is the resource instance\n      itself; its type must be appropriate to the resource category.(3ps)
.B  Before defining the resource instance, defineresource verifies\n      that the instance object is the correct type. Depending on the\n      resource category, it may also perform additional validation of\n      the object and may have other side effects. Finally, it makes the\n      object read-only if its access is not already restricted.(3ps)
.B  The lifetime of the definition depends on the VM allocation mode\n      in effect at the time defineresource is executed. If local VM\n      allocation is in effect ( (3ps)
.B  Local and global definitions are maintained separately. If a new\n      resource instance is defined with the same category and key as an\n      existing one, the new definition overrides the old one. The\n      precise effect depends on whether the old definition is local or\n      global and whether the new definition (current VM allocation\n      mode) is local or global. There are two main cases:\n\n    (3ps)
.B  It is permissible to use defineresource multiple times to\n      associate a given resource instance with more than one key.(3ps)
.B  If the category name is unknown, an (3ps)
.B  establishes an association between the non-negative integer index\n      and the name object name in the user name table. Subsequently,\n      the scanner will substitute name when it encounters any binary\n      encoded name token or object that refers to the specified user\n      name index. Because binary encoded names specify their own\n      literal or executable attributes, it does not matter whether name\n      is literal or executable.(3ps)
.B  The user name table is an adjunct to the current context\#39;s\n      local VM. The effect of adding an entry to the table is\n      immediately visible to all contexts that share the same local VM.\n      Additions to the table are not affected by save and restore. The\n      association between index and name persists for the remaining\n      lifetime of the local VM.(3ps)
.B  The specified index must previously be unused in the name table\n      or must already be associated with the same name. Changing an\n      existing association is not permitted (an (3ps)
.B  removes the specified file from its storage device. If no such\n      file exists, an (3ps)
.B  occurs.(3ps)
.B  specifies that the execution context identified by the integer\n      context is to terminate immediately when it finishes executing\n      its top-level procedure, whereas ordinarily it would wait for a\n      join. If the context is already waiting for a join, detach causes\n      it to terminate immediately.(3ps)
.B  detach executes an (3ps)
.B  returns a read-only dictionary containing static information\n      about the current device. The composition of this dictionary\n      varies according to the properties of the device. The information\n      in the dictionary may not be meaningful for a page-oriented or\n      other non-display device.(3ps)
.B  The use of deviceinfo after a setcachedevice operation within the\n      scope of a BuildChar procedure is not permitted. An (3ps)
.B  occurs when def, put, or store attempts to define a new entry in\n      a dictionary that is already full-in other words, whose length\n      and maxlength are already equal. This can occur only in Level 1\n      implementations, where a dictionary has a fixed limit on the\n      number of entries with distinct keys it can hold. This limit is\n      established by the operand to the dict operator that creates the\n      dictionary.(3ps)
.B  stores all elements of the dictionary stack into array and\n      returns an object describing the initial n-element subarray of\n      array, where n is the current depth of the dictionary stack.\n      dictstack copies the topmost dictionary into element n-1 of array\n      and the bottommost one into element 0 of array. The dictionary\n      stack itself is unchanged. If the length of array is less than\n      the depth of the dictionary stack, dictstack executes a (3ps)
.B  The dictionary stack has grown too large. Too many begin\n      operators without corresponding end operators have pushed too\n      many dictionaries on the dictionary stack.(3ps)
.B  Before invoking this error, the interpreter creates an array\n      containing all elements of the dictionary stack stored as if by\n      (3ps)
.B  An attempt has been made to remove (end) the bottommost instance\n      of userdict from the dictionary stack. This occurs if an end is\n      executed for which there was no corresponding begin.(3ps)
.B  divides num1 by num2, producing a result that is always a real\n      even if both operands are integers. Use idiv if an integer result\n      is desired.(3ps)
.B  dx dy matrix dtransform dx` dy`(3ps)
.B  With no matrix operand, dtransform (delta transform) transforms\n      the distance vector (dx, dy) by the CTM to produce the\n      corresponding distance vector (dx`, dy`) in device space. If the\n      matrix operand is supplied, dtransform transforms the distance\n      vector by matrix rather than by CTM.(3ps)
.B  A delta transformation is similar to a normal transformation ,\n      but the translation components (tx and ty) of the transformation\n      matrix are not used, making the distance vectors positionless in\n      both user space and device space. This is useful for determining\n      how distances map from user space to device space.(3ps)
.B  duplicates the top element on the operand stack. Note that dup\n      copies only the object. The value of a composite object is not\n      copied but is shared.(3ps)
.B  string eexec -(3ps)
.B  causes the contents of file (open for reading) or string to be\n      decrypted and then executed in a manner similar to the exec\n      operator. The decryption operation does not cause the file or\n      string to be modified.(3ps)
.B  eexec creates a new file object that serves as a decryption\n      filter on the specified file or string. It pushes the new file\n      object on the execution stack, making it the current file for the\n      PostScript interpreter. Subsequently, each time the interpreter\n      reads a character from this file, or a program reads explicitly\n      from currentfile, the decryption filter reads one character from\n      the original file or string and decrypts it.(3ps)
.B  The decryption filter file is closed automatically when the end\n      of the original file or string is encountered. It may also be\n      closed explicitly by (3ps)
.B  Before beginning execution, eexec pushes (3ps)
.B  The encrypted file may be represented in either binary or hex;\n      the eexec operator can decrypt it without being told which type\n      it is. The recommended representation is hex, because hex data\n      can be transmitted through communication channels that are not\n      completely transparent. Regardless of the representation of the\n      encrypted file, the encryption and decryption processes are\n      transparent. That is, an arbitrary binary file can be encrypted,\n      transmitted as either binary or hex, and decrypted to yield(3ps)
.B  the original information.(3ps)
.B  The encryption employed by eexec is intended primarily for use in\n      Type 1 font programs. The book Adobe Type 1 Font Format contains\n      a complete description of the encryption algorithm and\n      recommended uses of eexec.(3ps)
.B  pops the current dictionary off the dictionary stack, making the\n      dictionary below it the current dictionary. If end tries to pop\n      the bottommost instance of userdict, it executes the error (3ps)
.B  intersects the inside of the current clipping path with the\n      inside of the current path to produce a new, smaller current\n      clipping path. The inside of the current path is determined by\n      the even-odd rule, while the inside of the current clipping path\n      is determined by whatever rule was used at the time that path was\n      created.(3ps)
.B  Except for the choice of insideness rule, the behavior of eoclip\n      is identical to that of (3ps)
.B  paints the inside of the current path with the current color,\n      using the even-odd rule to determine what points are inside.\n      Except for the choice of insideness rule, the behavior of eofill\n      is identical to that of (3ps)
.B  is similar to (3ps)
.B  pops two objects from the operand stack and pushes the boolean\n      value (3ps)
.B  Some type conversions are performed by eq. Integers and reals can\n      be compared freely: An integer and a real representing the same\n      mathematical value are considered equal by eq. Strings and names\n      can likewise be compared freely: A name defined by some sequence\n      of characters is equal to a string whose elements are the same\n      sequence of characters.(3ps)
.B  The literal/executable and access attributes of objects are not\n      considered in comparisons between objects.(3ps)
.B  % different in the NeXT implementation(3ps)
.B  This standard PostScript operator has the following effect in the\n      NeXT implementation of the Display PostScript system: It erases\n      the entire window to opaque white.(3ps)
.B  erases the entire current page by painting it with gray level 1,\n      which is ordinarily white, but may be some other color if an\n      atypical transfer function has been defined. The entire page is\n      erased, regardless of the clip path currently in force. erasepage\n      affects only the contents of raster memory. It does not modify\n      the graphics state nor does it cause a page to be transmitted to\n      the output device.(3ps)
.B  erasepage is executed automatically by (3ps)
.B  pushes the dictionary object errordict on the operand stack .\n      errordict is not an operator; it is a name in (3ps)
.B  exchanges the top two elements on the operand stack.(3ps)
.B  pushes the operand on the execution stack, executing it\n      immediately. The effect of executing an object depends on the\n      object\#39;s type and literal/executable attribute. In\n      particular, executing a literal object will cause it only to be\n      pushed back on the operand stack. Executing a procedure, however,\n      will cause the procedure to be called.(3ps)
.B  paints a form specified by a form dictionary . The graphical\n      output produced by execform is defined by the form\n      dictionary\#39;s PaintProc procedure.(3ps)
.B  If this is the first invocation of execform for form, execform\n      first verifies that the dictionary contains the required entries.\n      Then it adds an entry to the dictionary with the key\n      Implementation, whose value is private to the implementation.\n      Finally, it makes the dictionary read-only. (execform performs\n      these alterations directly to the operand dictionary; it does not\n      copy the dictionary.)(3ps)
.B  When execform needs to call the PaintProc procedure, it pushes\n      the form dictionary on the operand stack, then executes the\n      equivalent of(3ps)
.B  gsave % Operand stack: dict(3ps)
.B  dup /Matrix get concat(3ps)
.B  dup /BBox get aload pop % Stack: dict llx lly urx ury(3ps)
.B  exch 3 index sub(3ps)
.B  exch 2 index sub % Stack: dict llx lly width height(3ps)
.B  rectclip % Also does a newpath(3ps)
.B  dup /PaintProc get % Stack: dict proc(3ps)
.B  exec % Execute PaintProc with dict on stack(3ps)
.B  grestore(3ps)
.B  The PaintProc procedure is expected to consume the dictionary\n      operand and to execute a sequence of graphics operators to paint\n      the form. The PaintProc must always produce the same output,\n      given the same graphics state parameters, independent of the\n      number of times it is called and independent, for example, of the\n      contents of userdict. The PostScript language program should not\n      expect any particular execution of execform to cause execution of\n      the specified PaintProc.(3ps)
.B  The documented errors are those produced directly by execform.\n      Obviously, the PaintProc can cause other errors.(3ps)
.B  stores all elements of the execution stack into array and returns\n      an object describing the initial n-element subarray of array,\n      where n is the current depth of the execution stack. execstack\n      copies the topmost object into element n-1 of array and the\n      bottommost one into element 0 of array. The execution stack\n      itself is unchanged.(3ps)
.B  If the length of array is less than the depth of the execution\n      stack, execstack executes a (3ps)
.B  The execution stack has grown too large; procedure invocation is\n      nested deeper than the PostScript interpreter permits.(3ps)
.B  executes the object associated with the non-negative integer\n      index in the\n\n    (3ps)
.B  userdict /UserObjects get(3ps)
.B  exch get exec(3ps)
.B  execuserobject\#39;s semantics are similar to those of exec or\n      other explicit execution operators. That is, if the object is\n      executable, it is executed; otherwise, it is pushed on the\n      operand stack.(3ps)
.B  If (3ps)
.B  packedarray executeonly packedarray(3ps)
.B  file executeonly file(3ps)
.B  string executeonly string(3ps)
.B  reduces the access attribute of an array, packed array, file, or\n      string object to execute-only .Access can only be reduced by\n      these means, never increased. When an object is execute-only, its\n      value cannot be read or modified explicitly by PostScript\n      operators (an (3ps)
.B  executeonly affects the access attribute only of the object that\n      it returns. If there are other composite objects that share the\n      same value, their access attributes are unaffected.(3ps)
.B  invokes the interactive executive, which facilitates direct user\n      interaction with the PostScript interpreter.(3ps)
.B  executive uses the special %statementedit file to obtain commands\n      from the user . The echo operator and the value of prompt also\n      affect the behavior of executive.(3ps)
.B  It should not be considered a standard part of the PostScript\n      language.(3ps)
.B  terminates execution of the innermost, dynamically enclosing\n      instance of a looping context without regard to lexical\n      relationship. A looping context is a procedure invoked repeatedly\n      by one of the following control operators:(3ps)
.B  exit pops the execution stack down to the level of that operator.\n      The interpreter then resumes execution at the next object in\n      normal sequence after that operator.(3ps)
.B  exit does not affect the operand or dictionary stacks. Any\n      objects pushed on those stacks during execution of the looping\n      context remain after the context is exited.(3ps)
.B  If exit would escape from the context of a (3ps)
.B  raises base to the exponent power. The operands may be either\n      integers or reals. If the exponent has a fractional part, the\n      result is meaningful only if the base is non-negative. The result\n      is always a real.(3ps)
.B  returns true if the operand is simple or if it is composite and\n      its value resides in global VM. It returns false if the operand\n      is composite and its value resides in local VM. In other words,\n      gcheck returns true if one could legally store its operand as an\n      element of another object in global VM.(3ps)
.B  packedarray index get any(3ps)
.B  dict key get any(3ps)
.B  string index get int(3ps)
.B  gets a single element from the value of an array, packed array,\n      dictionary, or string.(3ps)
.B  If the first operand is an array, packed array, or string, get\n      treats the second operand as an index and returns the element\n      identified by the index, counting from zero. index must be in the\n      range 0 to n-1, where n is the length of the array, packed array,\n      or string. If it is outside this range, get will execute a (3ps)
.B  If the first operand is a dictionary, get looks up the second\n      operand as a key in the dictionary and returns the associated\n      value. If the key is not present in the dictionary, get executes\n      the (3ps)
.B  packedarray index count getinterval subarray(3ps)
.B  string index count getinterval substring(3ps)
.B  creates a new array, packed array, or string object whose value\n      consists of some subsequence of the original array, packed array,\n      or string. The subsequence consists of count elements starting at\n      the specified index in the original object. The elements in the\n      subsequence are shared between the original and new objects.(3ps)
.B  The returned subarray or substring is an ordinary array, packed\n      array, or string object whose length is count and whose elements\n      are indexed starting at 0. The element at index 0 in subarray is\n      the same as the element at index index in the original array.(3ps)
.B  getinterval requires index to be a valid index in the original\n      object and count to be a non-negative integer such that index +\n      count is not greater than the length of the original object.(3ps)
.B  pushes the dictionary object globaldict on the operand stack .\n      globaldict is not an operator; it is a name in (3ps)
.B  pushes a dictionary of defined fonts on the operand stack. Its\n      contents are limited to those fonts that have been defined in\n      global VM. GlobalFontDirectory is not an operator; it is a name\n      in (3ps)
.B  shows a single character, identified by name, from the current\n      font. Unlike all other show variants, glyphshow bypasses the\n      current font\#39;s Encoding. It can access any character in the\n      font, whether or not that character\#39;s name is present in the\n      font\#39;s encoding vector.(3ps)
.B  The behavior of glyphshow depends on the current font\#39;s\n      FontType. For FontType 1, glyphshow looks up name in the\n      font\#39;s CharStrings dictionary to obtain a character\n      description to execute. If name is not present in the CharStrings\n      dictionary, glyphshow substitutes the .notdef entry, which must\n      be present in every Type 1 font.(3ps)
.B  For FontType 3, if the font dictionary contains a BuildGlyph\n      procedure, glyphshow pushes the current font dictionary and name\n      on the operand stack, then invokes BuildGlyph in the usual way .\n      If there is no BuildGlyph procedure, but only a BuildChar\n      procedure, glyphshow searches the font\#39;s Encoding array for\n      an occurrence of name. If it finds one, it pushes the font\n      dictionary and the array index on the operand stack, then invokes\n      BuildChar in the usual way. If name is not present in the\n      encoding, glyphshow substitutes the name .notdef and repeats the\n      search. If .notdef isn\#39;t present either, an (3ps)
.B  Like show, glyphshow can access characters that are already in\n      the font cache. glyphshow does not always need to execute the\n      character\#39;s description.(3ps)
.B  glyphshow operates only with base fonts. If the current font is\n      composite (FontType 0), an (3ps)
.B  resets the current graphics state from the one on the top of the\n      graphics state stack and pops the graphics state stack, restoring\n      the graphics state in effect at the time of the matching gsave.\n      This operator provides a simple way to undo complicated\n      transformations and other graphics state modifications without\n      having to re-establish all graphics state parameters\n      individually.(3ps)
.B  If there is no matching (3ps)
.B  repeatedly pops the graphics state stack until it encounters\n      either the bottommost graphics state or one that was saved by\n      save as opposed to gsave, leaving that state on top of the\n      graphics state stack. It then resets the current graphics state\n      from that saved one.(3ps)
.B  pushes a copy of the current graphics state on the graphics state\n      stack. All elements of the graphics state are saved, including\n      the CTM, current path, clip path, and identity of the raster\n      output device, but not the contents of raster memory. The saved\n      state may later be restored by a matching (3ps)
.B  The save operator implicitly performs a gsave, but restoring a\n      graphics state saved by save is slightly different from restoring\n      one saved by gsave (see the descriptions of (3ps)
.B  Note that, unlike (3ps)
.B  creates a new gstate (graphics state) object and pushes it on the\n      operand stack. Its initial value is a copy of the current\n      graphics state.(3ps)
.B  This operator consumes VM; it is the only graphics state operator\n      that does. The gstate is allocated in either local or global VM\n      according to the current VM allocation mode(3ps)
.B  If gstate is allocated in global VM, gstate will generate an\n      invalidaccess error if any of the composite objects in the\n      current graphics state are in local VM. Such objects might\n      include the current font, screen function, halftone dictionary,\n      transfer function, or dash pattern. In general, allocating gstate\n      objects in global VM is risky and should be avoided.(3ps)
.B  string1 string2 gt bool(3ps)
.B  pops two objects from the operand stack and pushes the boolean\n      value(3ps)
.B  true if the first operand is greater than the second, false\n      otherwise. If both operands are numbers, gt compares their\n      mathematical values. If both operands are strings, gt compares\n      them element by element, treating the elements as integers in the\n      range 0 to 255, to determine whether the first string is\n      lexically greater than the second. If the operands are of other\n      types or one is a string and the other is a number, gt executes\n      the (3ps)
.B  is looked up in errordict and executed to report error\n      information saved by the default error handlers . There is also a\n      procedure named handleerror in (3ps)
.B  matrix identmatrix matrix(3ps)
.B  replaces the value of matrix with the value of the identity\n      matrix(3ps)
.B  [1.0 0.0 0.0 1.0 0.0 0.0](3ps)
.B  and pushes this modified matrix back on the operand stack. The\n      identity matrix transforms any coordinate to itself.(3ps)
.B  divides int1 by int2 and returns the integer part of the\n      quotient, with any fractional part discarded. Both operands of\n      idiv must be integers and the result is an integer.(3ps)
.B  dx` dy` matrix idtransform dx dy(3ps)
.B  With no matrix operand, idtransform (inverse delta transform)\n      transforms the device space distance vector (dx`, dy`) by the\n      inverse of CTM to produce the corresponding distance vector (dx,\n      dy) in user space.(3ps)
.B  If the matrix operand is supplied, idtransform transforms the\n      distance vector by the inverse of matrix rather than by the\n      inverse of CTM.(3ps)
.B  A delta transformation is similar to a normal transformation, but\n      the translation components (tx and ty) of the transformation\n      matrix are not used, making the distance vectors be positionless\n      in both user space and device space.(3ps)
.B  idtransform is the inverse of (3ps)
.B  removes both operands from the stack, then executes proc if bool\n      is true. The if operator pushes no results of its own on the\n      operand stack, but the proc may do so.(3ps)
.B  removes all three operands from the stack, then executes proc1 if\n      bool is true or proc2 if bool is false. The ifelse operator\n      pushes no results of its own on the operand stack, but the\n      procedure it executes may do so.(3ps)
.B  dict image -(3ps)
.B  paints a sampled image onto the current page. The description\n      here only summarizes the image operator.(3ps)
.B  The sampled image is a rectangular array of width x height sample\n      values, each of which consists of bits/sample bits of data (1, 2,\n      4, 8, or 12). The data is received as a sequence of characters-in\n      other words, 8-bit integers in the range 0 to 255. If bits/sample\n      is less than 8, sample values are packed left to right within a\n      character(3ps)
.B  In the first form of image, the parameters are specified as\n      separate operands. This is the only form Level 1 implementations\n      support. image renders a monochrome image according to the\n      DeviceGray color space, regardless of the current color space.(3ps)
.B  In the second form, the parameters are contained as key-value\n      pairs in an image dictionary, which is specified as the single\n      operand of image. This form is a Level 2 feature. image renders\n      either a monochrome or color image according to the current color\n      space parameter in the graphics state. The number of component\n      values per source sample and the interpretations of those values\n      depend on the current color space.(3ps)
.B  The image is considered to exist in its own coordinate system.\n      The rectangular boundary of the image has its lower-left corner\n      at (0, 0) and its upper-right corner at (width, height). The\n      matrix operand specifies a transformation from user space to the\n      image coordinate system.(3ps)
.B  In Level 1, datasrc must be a procedure. In Level 2, datasrc may\n      be any data source ,-a procedure, string, or readable file object\n      (including a filtered file).(3ps)
.B  If datasrc is a procedure, image executes datasrc repeatedly to\n      obtain the actual image data. datasrc must return (on the operand\n      stack) a string containing any number of additional characters of\n      sample data.(3ps)
.B  If datasrc returns a string of length zero, image will terminate\n      execution prematurely. The sample values are assumed to be\n      received in a fixed order: (0, 0) through (width-1, 0), then (0,\n      1) through (width-1, 1), and so on.(3ps)
.B  dict imagemask -(3ps)
.B  is similar to the image operator. However, it treats the source\n      image as a mask of 1-bit samples that are used to control where\n      to apply paint with the current color and where not to apply any\n      paint.(3ps)
.B  In the first form of imagemask, the parameters are specified as\n      separate operands. This is the only form Level 1 implementations\n      support. In the second form, the parameters are contained as\n      key-value pairs in an image dictionary. The second form is a\n      Level 2 feature. The semantics of imagemask do not depend on\n      which way the operands are specified.(3ps)
.B  imagemask uses the width, height, matrix, and datasrc operands in\n      precisely the same way image uses them. The polarity operand is a\n      boolean that determines the polarity of the mask. It controls the\n      sense of the mask only; it has no effect on the color of the\n      pixels that are painted. If polarity is false, portions of the\n      image corresponding to source sample values of 0 are painted,\n      while those corresponding to sample values of 1 are left\n      unchanged. If polarity is true, sample values of 1 are painted\n      and sample values of 0 are left unchanged.(3ps)
.B  In the second form of imagemask, the polarity is specified by\n      means of the Decode entry in the image dictionary. Decode values\n      of [0 1] and [1 0] correspond to polarity values of false and\n      true, respectively.(3ps)
.B  In Level 1, datasrc must be a procedure. In Level 2, datasrc\n      may(3ps)
.B  be any data source ,-a procedure, string, or readable file object\n      (including a filtered file).(3ps)
.B  imagemask is most useful for painting characters represented as\n      bitmaps. Such bitmaps represent masks through which a color is to\n      be transferred; the bitmaps themselves do not have a color.(3ps)
.B  removes the non-negative integer n from the operand stack, counts\n      down to the nth element from the top of the stack, and pushes a\n      copy of that element on the stack.(3ps)
.B  userpath ineofill bool LEVEL 2(3ps)
.B  is similar to (3ps)
.B  userpath infill bool LEVEL 2(3ps)
.B  The first form returns true if the device pixel containing the\n      point (x, y) in user space would be painted by a fill of the\n      current path in the graphics state. Otherwise, it returns\n      false.(3ps)
.B  In the second form, the device pixels that would be painted by\n      filling userpath become an &quot;aperture.&quot; This form of the\n      operator returns true if any of the pixels in the aperture would\n      be painted by a fill of the current path in the graphics state.\n      Otherwise, it returns false.(3ps)
.B  Both forms of this operator ignore the current clipping path and\n      current view clip; that is, they detect a &quot;hit&quot;\n      anywhere within the current path, even if filling that path would\n      not mark the current page due to clipping. They do not place any\n      marks on the current page nor do they disturb the current path.\n      The following program fragment takes the current clipping path\n      into account:(3ps)
.B  gsave clippath x y infill grestore(3ps)
.B  x y infill and(3ps)
.B  replaces the current clip path parameter in the graphics state by\n      the default clip path for the current output device. This path\n      usually corresponds to the boundary of the maximum imageable area\n      for the current output device. For a pageoriented output device,\n      its dimensions are those established by the setpagedevice\n      operator. For a display device, the clipping region established\n      by initclip is not well defined. Display PostScript applications\n      should not make the assumption that the clipping region\n      corresponds to the window boundary (see (3ps)
.B  There are few situations in which a PostScript language program\n      should execute initclip explicitly. A page description that\n      executes initclip usually produces incorrect results if it is\n      embedded within another, composite page.(3ps)
.B  % different in the NeXT implementation(3ps)
.B  This standard PostScript operator has these additional effects in\n      the NeXT implementation of the Display PostScript System:(3ps)
.B  S Sets the coverage parameter in the current window\#39;s\n      graphics state to 1 (opaque)(3ps)
.B  S Turns off instance drawing(3ps)
.B  resets several values in the current graphics state to their\n      default values:(3ps)
.B  current transformation matrix (default for current device)(3ps)
.B  current path (empty)(3ps)
.B  current point (undefined)(3ps)
.B  current clipping path (default for current device)(3ps)
.B  current color space (DeviceGray)(3ps)
.B  current color (black)(3ps)
.B  current line width (one user space unit)(3ps)
.B  current line cap style (butt end caps)(3ps)
.B  current line join style (miter joins)(3ps)
.B  current dash description (undashed, i.e., solid lines)(3ps)
.B  current miter limit (10)(3ps)
.B  The initgraphics operator does not change the other graphics\n      state parameters. These include the current output device, font,\n      stroke adjust, and all devicedependent parameters. This operator\n      affects only the graphics state, not the contents of raster\n      memory or the output device.(3ps)
.B  initgraphics is equivalent to the PostScript language\n      sequence:(3ps)
.B  initmatrix newpath initclip(3ps)
.B  1 setlinewidth 0 setlinecap 0 setlinejoin(3ps)
.B  [ ] 0 setdash 0 setgray 10 setmiterlimit(3ps)
.B  There are few situations in which a PostScript language program\n      should execute initgraphics explicitly. A page description that\n      executes initgraphics usually produces incorrect results if it is\n      embedded within another, composite page. A program requiring\n      information about its initial graphics state should read and save\n      that state at the beginning of the program rather than assume\n      that the default state prevailed initially.(3ps)
.B  sets the current transformation matrix (CTM) to the default\n      matrix for the current output device. This matrix transforms the\n      default user coordinate system to device space. For a\n      page-oriented device, the default matrix is initially\n      established(3ps)
.B  by the (3ps)
.B  operator.(3ps)
.B  There are few situations in which a PostScript language program\n      should execute initmatrix explicitly. A page description that\n      executes initmatrix usually produces incorrect results if it is\n      embedded within another, composite page.(3ps)
.B  returns the context to its initial view clipping state, in which\n      no view clipping path exists.(3ps)
.B  userpath instroke bool LEVEL 2(3ps)
.B  The first form returns true if the device pixel containing the\n      point (x, y) in user space would be painted by a stroke of the\n      current path in the graphics state. Otherwise, it returns false.\n      It does not place any marks on the current page nor does it\n      disturb the current path.(3ps)
.B  In the second form of the operator, the device pixels that would\n      be painted by filling userpath become an &quot;aperture.&quot;\n      instroke returns true if any of the pixels in the aperture would\n      be painted by a stroke of the current path in the graphics state.\n      Otherwise, it returns false.(3ps)
.B  As with infill, this operator ignores the current clipping path\n      and current view clip; that is, it detects a &quot;hit&quot; on\n      any pixel that lies beneath a stroke drawn along the current\n      path, even if stroking that path would not mark the current page\n      due to clipping.(3ps)
.B  The shape against which the point (x, y) or the aperture,\n      userpath, is tested is computed according to the current,\n      stroke-related parameters in the graphics state: line width, line\n      cap, line join, miter limit, dash pattern, and stroke adjust. If\n      the current line width is zero, the set of pixels considered to\n      be part of the stroke is device dependent.(3ps)
.B  pushes the internal dictionary object on the operand stack. The\n      int operand must be the integer 1183615869. The internal\n      dictionary is in local VM and is writable. It contains operators\n      and other information whose purpose is internal to the PostScript\n      interpreter. It should be referenced only in special\n      circumstances, such as during construction of Type 1 font\n      programs.(3ps)
.B  This operator is not present in some PostScript interpreters.(3ps)
.B  userpath1 userpath2 inufill bool(3ps)
.B  The first form returns (3ps)
.B  In the second form, the device pixels that would be painted by\n      filling userpath1 become an &quot;aperture.&quot; inufill returns\n      true if any of the pixels in the aperture would be painted by a\n      (3ps)
.B  This operator does not place any marks on the current page nor\n      does it disturb the current path in the graphics state. Except\n      for the manner in which the path is specified, inufill behaves\n      the same as (3ps)
.B  By itself, this operator is seemingly a trivial composition of\n      several other operators:(3ps)
.B  gsave(3ps)
.B  newpath uappend(3ps)
.B  infill(3ps)
.B  grestore(3ps)
.B  However, when used with a user path that specifies (3ps)
.B  x y userpath matrix inustroke bool(3ps)
.B  userpath1 userpath2 inustroke bool(3ps)
.B  userpath1 userpath2 matrix inustroke bool(3ps)
.B  The first form returns (3ps)
.B  applied to the same operands. Otherwise it returns (3ps)
.B  In the second form, inustroke concatenates matrix to the CTM\n      after interpreting the user paths, but before computing the\n      stroke (see (3ps)
.B  operator).(3ps)
.B  In the third and fourth forms, the device pixels that would be\n      painted by filling userpath1 become an &quot;aperture.&quot;\n      inustroke returns true if any of the pixels in the aperture would\n      be painted by a (3ps)
.B  This operator does not place any marks on the current page nor\n      does it disturb the current path in the graphics state. Except\n      for the manner in which the path is specified, inustroke behaves\n      the same as (3ps)
.B  As with (3ps)
.B  An access violation has occurred. Principal causes of\n      invalidaccess are:\n\n    (3ps)
.B  (for example, storing into a read-only array).(3ps)
.B  indicates that an invalid use of the context synchronization\n      facilities has been detected.(3ps)
.B  Possible causes include:\n\n    (3ps)
.B  unmatched save is pending if the result would be a deadlock.\n    (3ps)
.B  The PostScript interpreter detects only the simplest types of\n      deadlock.(3ps)
.B  It is possible to encounter deadlocks for which no invalidcontext\n      error is generated.(3ps)
.B  An exit has been executed for which there is no dynamically\n      enclosing looping context (for example, (3ps)
.B  The access string specification to the file operator is\n      unacceptable or a file operation has been attempted (for example,\n      (3ps)
.B  Either the operand to findfont is not a valid font name or the\n      operand to makefont or setfont is not a well-formed font\n      dictionary. The invalidfont error may also be executed by other\n      font operators upon discovering a font dictionary is\n      malformed.(3ps)
.B  indicates that an invalid identifier has been presented to a\n      window system specific operator. In each integration of the\n      Display PostScript system with a window system, there is a\n      collection of window system specific operators. The operands of\n      such operators are usually integers that identify windows and\n      other objects that exist outside the PostScript language. This\n      error occurs when the operand does not identify a valid object.\n      It is generated only by window system specific operators and not\n      by any standard operator.(3ps)
.B  An improper restore has been attempted. One or more of the\n      operand, dictionary, or execution stacks contains composite\n      objects whose values were created more recently than the (3ps)
.B  replaces the value of matrix2 with the result of inverting\n      matrix1 and pushes the modified matrix2 back on the operand\n      stack. The result of inverting a matrix is that if matrix1\n      transforms a coordinate (x, y) to (x`, y`) then matrix2\n      transforms (x`, y`) to (x, y).(3ps)
.B  ERRORS (3ps)
.B  An exception other than end-of-file has occurred during execution\n      of one of the file operators. The nature of the exception is\n      environment dependent, but may include such events as parity or\n      checksum errors, or broken network connections. Attempting to\n      write to an input file or to a file that has been closed will\n      also cause an ioerror. Occurrence of an ioerror does not cause\n      the file to become closed unless it was already closed or the\n      error occurs during (3ps)
.B  pushes the ISO Latin-1 encoding vector on the operand stack. This\n      is a 256-element literal array object, indexed by character codes\n      whose values are the character names for those codes.\n      ISOLatin1Encoding is not an operator; it is a name in (3ps)
.B  Roman text fonts produced by Adobe usually use the\n      StandardEncoding encoding vector. However, they contain all the\n      characters needed to support the use of ISOLatin1Encoding.(3ps)
.B  x` y` matrix itransform x y(3ps)
.B  With no matrix operand, itransform (inverse transform) transforms\n      the device space coordinate (x\#39;, y\#39;) by the inverse of\n      CTM to produce the corresponding user space coordinate (x, y). If\n      the matrix operand is supplied, itransform transforms (x\#39;,\n      y\#39;) by the inverse of matrix rather than by the inverse of\n      CTM.(3ps)
.B  waits for the execution context identified by the integer context\n      to finish executing its top-level procedure (the proc operand of\n      (3ps)
.B  The objects obj1 through objn are those left on the operand stack\n      by the context that is terminating. Ordinarily, there should not\n      be a mark among those objects, because its presence might cause\n      confusion in the context that executes the join.(3ps)
.B  If context is not a valid context identifier, perhaps because the\n      context has terminated prematurely due to executing quit or\n      encountering an error, join executes an (3ps)
.B  local and global VM.(3ps)
.B  It is illegal to execute join if there has been any previous (3ps)
.B  error.(3ps)
.B  returns the boolean value true if there is an entry in the\n      dictionary dict whose key is key. Otherwise, it returns false.\n      dict does not have to be on the dictionary stack.(3ps)
.B  paints the characters of string in a manner similar to show, but\n      allowing program intervention between characters. If the\n      character codes in string are c0, c1, ... cn, kshow proceeds as\n      follows: First it shows c0 at the current point, updating the\n      current point by c0\#39;s width. Then it pushes the character\n      codes c0 and c1 on the operand stack (as integers) and executes\n      proc. The proc may perform any actions it wishes; typically, it\n      will modify the current point to affect the subsequent placement\n      of c1. kshow continues by showing c1, pushing c1 and c2 on the\n      stack, executing proc, and so on. It finishes by pushing cn-1 and\n      cn on the stack, executing proc, and finally showing cn.(3ps)
.B  When proc is called for the first time, the graphics state (in\n      particular, the CTM) is the same as it was at the time kshow was\n      invoked, except that the current point has been updated by the\n      width of c0. Execution of proc is permitted to have any side\n      effects, including changes to the graphics state. Such changes\n      persist from one call of proc to the next and may affect\n      graphical output for the remainder of kshow\#39;s execution and\n      afterward.(3ps)
.B  The name kshow is derived from &quot;kern-show.&quot; To kern\n      characters is to adjust the spacing between adjacent pairs of\n      characters in order to achieve a visually pleasing result. The\n      kshow operator enables user-defined kerning and other\n      manipulations, because arbitrary computations can be performed\n      between each pair of characters.(3ps)
.B  kshow can be applied only to base fonts. If the current font is\n      composite, kshow issues an (3ps)
.B  is an integer designating the PostScript language level supported\n      by the PostScript interpreter. If the value of languagelevel is\n      2, the PostScript interpreter supports all PostScript Level 2\n      language features.(3ps)
.B  If the value of languagelevel is 1 or if languagelevel is not\n      defined in\n\n    (3ps)
.B  string1 string2 le bool(3ps)
.B  pops two objects from the operand stack and pushes the boolean\n      value true if the first operand is less than or equal to the\n      second, false otherwise. If both operands are numbers, le\n      compares their mathematical values. If both operands are strings,\n      le compares them element by element (treating the elements as\n      integers in the range 0 to 255) to determine whether the first\n      string is lexically less than or equal to the second. If the\n      operands are of other types or one is a string and the other is a\n      number, le executes the (3ps)
.B  packedarray length int(3ps)
.B  dict length int(3ps)
.B  string length int(3ps)
.B  name length int(3ps)
.B  depends on the type of its operand. If the operand is an (3ps)
.B  An implementation limit has been exceeded(3ps)
.B  (for example, too many files have been opened simultaneously or a\n      path has become too complex).(3ps)
.B  returns the natural logarithm (base e) of num. The result is a\n      real.(3ps)
.B  searches for key in each dictionary on the dictionary stack,\n      starting with the topmost (current) dictionary. If key is found\n      in some dictionary, load pushes the associated value on the\n      operand stack. If key is not found in any dictionary on the\n      dictionary stack, load executes the error (3ps)
.B  load looks up key the same way the interpreter looks up\n      executable names that it encounters during execution. However,\n      load always pushes the associated value on the operand stack; it\n      never executes that value.(3ps)
.B  creates a new lock object, unequal to any lock object already in\n      existence, and pushes it on the operand stack. The state of the\n      lock is initially free .(3ps)
.B  Since a lock is a composite object, creating one consumes VM. The\n      lock\#39;s value is allocated in local or global VM according to\n      the current VM allocation mode .(3ps)
.B  returns the common logarithm (base 10) of num. The result is a\n      real.(3ps)
.B  string1 string2 lt bool(3ps)
.B  pops two objects from the operand stack and pushes the boolean\n      value true if the first operand is less than the second, false\n      otherwise. If both operands are numbers, lt compares their\n      mathematical values. If both operands are strings, lt compares\n      them element by element (treating the elements as integers in the\n      range 0 to 255) to determine whether the first string is\n      lexically less than the second. If the operands are of other\n      types or one is a string and the other is a number, lt executes\n      the (3ps)
.B  applies matrix to font, producing a new font\#39; whose\n      characters are transformed by matrix when they are shown.\n      makefont first creates a copy of font. Then it replaces the new\n      font\#39;s FontMatrix entry with the result of concatenating the\n      existing FontMatrix with matrix. It inserts two additional\n      entries, OrigFont and ScaleMatrix, whose purpose is internal to\n      the implementation. Finally, it returns the result as\n      font\#39;.(3ps)
.B  The makefont, (3ps)
.B  Normally, makefont copies only the font dictionary. Subsidiary\n      objects, such as the CharStrings and FontInfo dictionaries, are\n      shared with the original font. However, if font is a composite\n      font, makefont also copies the font dictionaries of any\n      descendant composite fonts. It does not copy descendant base\n      fonts.(3ps)
.B  Showing characters from the transformed font produces the same\n      results as showing from the original font after having\n      transformed user space by the same matrix. makefont is\n      essentially a convenience operator that permits the desired\n      transformation to be encapsulated in the font description. The\n      most common transformation is to scale a font by a uniform factor\n      in both x and y. scalefont is a special case of the more general\n      makefont and should be used for such uniform scaling. Another\n      operator, (3ps)
.B  The interpreter keeps track of font dictionaries recently created\n      by makefont. Calling makefont multiple times with the same font\n      and matrix will usually return the same font\#39; rather than\n      create a new one. However, it is usually more efficient for a\n      PostScript language program to apply makefont only once for each\n      font that it needs and to keep track of the resulting font\n      dictionaries on its own.(3ps)
.B  verifies that dict is a prototype pattern dictionary with all\n      required key-value pairs . It then creates a copy of dict in\n      local VM, adding an entry, with key Implementation, for use by\n      the implementation. makepattern copies only the contents of dict\n      itself, not the values of subsidiary composite objects, which are\n      shared with the original dictionary.(3ps)
.B  makepattern saves a copy of the current graphics state, to be\n      used later when the interpreter calls the PaintProc to render the\n      pattern cell. It then modifies certain parameters in the saved\n      graphics state, as follows:(3ps)
.B  1. Concatenates matrix with the saved copy of the CTM.(3ps)
.B  2. Adjusts the resulting matrix to ensure that the device space\n      can be tiled properly(3ps)
.B  with a pattern cell of the given size in accordance with the\n      TilingType.(3ps)
.B  3. Resets the path to empty.(3ps)
.B  4. Replaces the clipping path by the pattern cell bounding box\n      specified(3ps)
.B  by the BBox entry in the pattern dictionary.(3ps)
.B  5. Replaces the device by a special one the implementation\n      provides.(3ps)
.B  Finally, makepattern makes the new dictionary read-only and\n      pushes it on the operand stack. The resulting pattern dictionary\n      is suitable for use as an operand of (3ps)
.B  pushes a mark (an object whose type is mark, not the mark\n      operator itself) on the operand stack. All marks are identical,\n      and the operand stack may contain any number of them at once.(3ps)
.B  The primary use of marks is to indicate the stack position of the\n      beginning of an indefinitely long list of operands being passed\n      to an operator or procedure. The (3ps)
.B  creates a 6-element array object, fills it in with the values of\n      an identity matrix(3ps)
.B  [1.0 0.0 0.0 1.0 0.0 0.0] and pushes this array on the operand\n      stack. The array is allocated in local or global VM according to\n      the current VM allocation mode.(3ps)
.B  returns the capacity of dict-in other words, the maximum number\n      of key-value pairs that dict can hold using the VM currently\n      allocated to it. In Level 1 implementations, maxlength returns\n      the length operand of the dict operator that created the\n      dictionary; this is the dictionary\#39;s maximum capacity\n      (exceeding it causes a (3ps)
.B  returns the remainder that results from dividing int1 by int2.\n      The sign of the result is the same as the sign of the dividend\n      int1. Both operands must be integers. The result is an\n      integer.(3ps)
.B  acquires (3ps)
.B  If (3ps)
.B  starts a new subpath of the current path. moveto sets the current\n      point in the graphics state to the user space coordinate (x, y)\n      without adding any line segments to the current path.(3ps)
.B  If the previous path operation in the current path was also a\n      moveto or\n\n    (3ps)
.B  returns the product of num1 and num2. If both operands are\n      integers and the result is within integer range, the result is an\n      integer. Otherwise, the result is a real.(3ps)
.B  pops two objects from the operand stack and pushes the boolean\n      value false if they are equal, true if not. What it means for\n      objects to be equal is presented in the description of the (3ps)
.B  returns the negative of num1. The type of the result is the same\n      as the type of num1, unless num1 is the most negative integer, in\n      which case the result is a real.(3ps)
.B  packedarray noaccess packedarray(3ps)
.B  dict noaccess dict(3ps)
.B  file noaccess file(3ps)
.B  string noaccess string(3ps)
.B  reduces the access attribute of an array, packed array,\n      dictionary, file, or string object to none. The value of a\n      noaccess object cannot be executed or accessed directly by\n      PostScript operators. Noaccess objects are of no use to\n      PostScript language programs, but serve certain internal purposes\n      that are not documented in this manual.(3ps)
.B  For an array, packed array, file, or string, noaccess affects the\n      access attribute only of the object that it returns. If there are\n      other objects that share the same value, their access attributes\n      are unaffected. However, in the case of a dictionary, noaccess\n      affects the value of the object, so all dictionary objects\n      sharing the same dictionary are affected.(3ps)
.B  The current path is empty, and thus there is no current point,\n      but an operator requiring a current point has been executed (for\n      example, (3ps)
.B  int1 not int2(3ps)
.B  If the operand is a boolean, not returns its logical negation. If\n      the operand is an integer, not returns the bitwise complement\n      (one\#39;s complement) of its binary representation.(3ps)
.B  resumes execution of all contexts, if any, that are suspended in\n      a wait for condition.(3ps)
.B  Ordinarily, notify should be invoked only within the execution of\n      a monitor that references the same (3ps)
.B  pushes a literal null object on the operand stack. null is not an\n      operator; it is a name in (3ps)
.B  or bool 3 int1 int2(3ps)
.B  or int3(3ps)
.B  If the operands are booleans, or returns their logical\n      disjunction. If the operands are integers, or returns the bitwise\n      &quot;inclusive or&quot; of their binary representations.(3ps)
.B  creates a packed (3ps)
.B  The resulting object has a type of packedarraytype, a literal\n      attribute, and readonly access. In all other respects, its\n      behavior is identical to that of an ordinary array object.(3ps)
.B  v The packed array is allocated in local or global VM according\n      to the current VM allocation mode. An (3ps)
.B  returns the bounding box of the current path in the current user\n      coordinate system. The results are four real numbers: lower-left\n      x, lower-left y, upper-right x, and upper-right y. These\n      coordinates describe a rectangle, oriented with its sides\n      parallel to the x and y axes in user space, that completely\n      encloses all elements of the path. If the current path is empty,\n      pathbbox executes the error (3ps)
.B  pathbbox first computes the bounding box of the current path in\n      device space. It then transforms these coordinates to user space\n      by the inverse of CTM and computes the bounding box of the\n      resulting figure in user space. If the user coordinate system is\n      rotated (other than by multiples of 90 degrees) or skewed,\n      pathbbox may return a bounding box that is larger than\n      expected.(3ps)
.B  If the path includes curve segments, the bounding box encloses\n      the control points of the curves as well as the curves\n      themselves. To obtain a bounding box that fits the path more\n      tightly, one should first &quot;flatten&quot; the curve segments\n      by executing (3ps)
.B  In Level 2 implementations of the PostScript language, if the\n      current path ends with a (3ps)
.B  moveto push x y; execute move(3ps)
.B  lineto push x y; execute line(3ps)
.B  curveto push x1 y1 x2 y2 x3 y3; execute curve(3ps)
.B  closepath execute close(3ps)
.B  The operands passed to the procedures are coordinates in user\n      space. pathforall transforms them from device space to user space\n      using the inverse of the CTM. Ordinarily, these coordinates will\n      be the same as the ones originally entered by moveto, lineto, and\n      so forth. However, if the CTM has been changed since the path was\n      constructed, the coordinates reported by pathforall will be\n      different from those originally entered.(3ps)
.B  Among other uses, pathforall enables a path constructed in one\n      user coordinate system to be read out in another user coordinate\n      system.(3ps)
.B  pathforall enumerates the current path existing at the time it\n      begins execution. If any of the procedures change the current\n      path, such changes do not alter the behavior of pathforall.(3ps)
.B  If (3ps)
.B  writes a binary object sequence to the standard output file. The\n      binary object sequence contains a top-level array whose length is\n      one; its single element is an encoding of obj. If obj is\n      composite, the binary object sequence also includes subsidiary\n      array and string values for the components of obj.(3ps)
.B  The tag operand, which must be an integer in the range 0 to 255,\n      is used to tag the top-level object; it appears as the second\n      byte of the object\#39;s representation.(3ps)
.B  Tag values 0 through 249 are available for general use;(3ps)
.B  tag values 250 through 255 are reserved for special purposes,\n      such as reporting errors.(3ps)
.B  The binary object sequence uses the number representation\n      established by the most recent execution of setobjectformat. The\n      token type given as the first byte of the binary object sequence\n      reflects the number representation that was used. If the object\n      format parameter has been set to zero, printobject executes an (3ps)
.B  The object obj and its components must be of type null, integer,\n      real, name, boolean, string, array, or mark. Appearance of an\n      object of any other type, including packed array, will result in\n      a typecheck error. If arrays are nested too deeply or are\n      cyclical, a (3ps)
.B  error occurs.(3ps)
.B  printobject always encodes a name object as a reference to a text\n      name in the string value portion of the binary object sequence,\n      never as a system or user name index.(3ps)
.B  As is the case for all operators that write to files, the output\n      produced by printobject may accumulate in a buffer instead of\n      being transmitted immediately. To ensure immediate transmission,\n      a flush is required. This is particularly important in situations\n      where the output produced by printobject is the response to a\n      query from the application.(3ps)
.B  is a read-only string object that is the name of the product in\n      which the PostScript interpreter is running. The value of this\n      string is typically a manufacturer defined trademark; it has no\n      direct connection with specific features of the PostScript\n      language.(3ps)
.B  writes text representations of every object on the stack to the\n      standard output file, but leaves the stack unchanged. pstack\n      applies the (3ps)
.B  dict key any put -(3ps)
.B  string index int put -(3ps)
.B  replaces a single element of the value of an array, dictionary,\n      or string.(3ps)
.B  If the first operand is an array or string, put treats the second\n      operand as an index and stores the third operand at the position\n      identified by the index, counting from zero. index must be in the\n      range 0 to n-1,where n is the length of the array or string. If\n      it is outside this range, put will execute a (3ps)
.B  If the first operand is a dictionary, put uses the second operand\n      as a key and the third operand as a value, and it stores this\n      key-value pair into dict. If key is already present as a key in\n      dict, put simply replaces its value by any. Otherwise, put\n      creates a new entry for key and associates any with it. In Level\n      1 implementations, if dict is already full, put executes the\n      error (3ps)
.B  If the value of array or dict is in global VM and any is a\n      composite object whose value is in local VM, an (3ps)
.B  array1 index packedarray2 putinterval -(3ps)
.B  string1 index string2 putinterval -(3ps)
.B  replaces a subsequence of the elements of the first operand by\n      the entire contents of the third operand. The subsequence that is\n      replaced begins at the specified index in the first operand; its\n      length is the same as the length of the third operand.(3ps)
.B  The objects are copied from the third operand to the first, as if\n      by a sequence of individual gets and puts. In the case of arrays,\n      if the copied elements are themselves composite objects, the\n      values of those objects are shared between array2 and array1.(3ps)
.B  putinterval requires index to be a valid index in array1 or\n      string1 such that index plus the length of array2 or string2 is\n      not greater than the length of array1 or string1.(3ps)
.B  If the value of array1 is in global VM and any of the elements\n      copied from array2 or packedarray2 are composite objects whose\n      values are in local VM, an (3ps)
.B  In an interpreter that supports multiple execution contexts , the\n      quit operator causes termination of the current context only.\n      Termination is immediate, even if the context was created by (3ps)
.B  In a context that is under the control of a job server , the\n      definition of the quit operator in (3ps)
.B  A numeric operand\#39;s value is outside the range expected by an\n      operator-for example, an array or string index is out of bounds,\n      or a negative number appears where a non-negative number is\n      required. rangecheck can also occur if a matrix operand does not\n      contain exactly six elements.(3ps)
.B  packedarray rcheck bool(3ps)
.B  dict rcheck bool(3ps)
.B  file rcheck bool(3ps)
.B  string rcheck bool(3ps)
.B  tests whether the operand\#39;s access permits its value to be\n      read explicitly by PostScript operators.(3ps)
.B  rcheck returns true if the operand\#39;s access is unlimited or\n      readonly, false otherwise.(3ps)
.B  false (if end-of-file)(3ps)
.B  reads the next character from the input file file, pushes it on\n      the stack as an integer, and pushes true as an indication of\n      success.(3ps)
.B  If an end-of-file indication is encountered before a character\n      has been read, read closes the file and returns false.(3ps)
.B  If some other error indication is encountered (for example,\n      parity or checksum error), read executes (3ps)
.B  reads characters from file, expecting to encounter a sequence of\n      hexadecimal digits 0 through 9 and A through F (or a through f).\n      readhexstring interprets each successive pair of digits as a\n      two-digit hexadecimal number representing an integer value in the\n      range 0 to 255. It then stores these values into successive\n      elements of string starting at index 0 until either the entire\n      string has been filled or an end-of-file indication is\n      encountered in file. Finally, readhexstring returns the substring\n      of string that was filled and a boolean indicating the outcome\n      (true normally, false if end-of-file was encountered before the\n      string was filled).(3ps)
.B  readhexstring ignores any characters that are not valid\n      hexadecimal digits, so the data in file may be interspersed with\n      spaces, newlines, etc., without changing the interpretation of\n      the data.(3ps)
.B  reads a line of characters (terminated by a newline character)\n      from file and stores them into successive elements of string.\n      readline then returns the substring of string that was filled and\n      a boolean indicating the outcome (true normally, false if\n      end-of-file was encountered before a newline character was\n      read).(3ps)
.B  A &quot;line of characters&quot; is a sequential string of ASCII\n      characters, including space, tab, and non-printing\n      &quot;control&quot; characters. A line terminates with a\n      newline-a carriage return character, a line-feed character, or\n      both.(3ps)
.B  The terminating newline character is not stored into string or\n      included at the end of the returned substring. If readline\n      completely fills string before encountering a newline character,\n      it executes the error (3ps)
.B  packedarray readonly packedarray(3ps)
.B  dict readonly dict(3ps)
.B  file readonly file(3ps)
.B  string readonly string(3ps)
.B  reduces the access attribute of an (3ps)
.B  For an array, packed array, file, or string, readonly affects the\n      access attribute only of the object that it returns. If there are\n      other objects that share the same value, their access attributes\n      are unaffected. However, in the case of a dictionary, readonly\n      affects the value of the object, so all dictionary objects\n      sharing the same dictionary are affected.(3ps)
.B  reads characters from file and stores them into successive\n      elements of string until either the entire string has been filled\n      or an end-of-file indication is encountered in file. readstring\n      then returns the substring of string that was filled and a\n      boolean indicating the outcome (true normally, false if\n      end-of-file was encountered before the string was filled).(3ps)
.B  All character codes are treated the same-as integers in the range\n      0 to 255. There are no special characters (in particular, the\n      newline character is not treated specially). However, the\n      communication channel may usurp certain control characters.(3ps)
.B  returns the value of a clock that counts in real time,\n      independent of the execution of the PostScript interpreter. The\n      clock\#39;s starting value is arbitrary; it has no defined\n      meaning in terms of calendar time. The unit of time represented\n      by the realtime value is one millisecond. However, the rate at\n      which it changes is implementation dependent. As the time value\n      becomes greater than the largest integer allowed in a particular\n      implementation, it &quot;wraps&quot; to the smallest (most\n      negative) integer.(3ps)
.B  numarray rectclip -(3ps)
.B  intersects the inside of the current clipping path with a\n      rectangular path the operands describe. In the first form, the\n      operands are four numbers that describe a single rectangle. In\n      the other two forms, the operand is an (3ps)
.B  In the first form, assuming width and height are positive,\n      rectclip is equivalent to:(3ps)
.B  newpath(3ps)
.B  x y moveto(3ps)
.B  width 0 rlineto(3ps)
.B  0 height rlineto(3ps)
.B  width neg 0 rlineto(3ps)
.B  closepath(3ps)
.B  clip(3ps)
.B  newpath(3ps)
.B  Note that if the second or third form is used to specify multiple\n      rectangles, the rectangles are treated together as a single path\n      and used for a single clip operation. The &quot;inside&quot; of\n      this combined path is the union of all the rectangular subpaths,\n      because the paths are all drawn in the same direction and the\n      non-zero winding number rule is used.(3ps)
.B  numarray rectfill -(3ps)
.B  fills a path consisting of one or more rectangles the operands\n      describe. In the first form, the operands are four numbers that\n      describe a single rectangle. In the other two forms, the operand\n      is an array or an encoded number string that describes an\n      arbitrary number of rectangles rectfill neither reads nor alters\n      the current path in the graphics state.(3ps)
.B  In the first form, assuming width and height are positive,\n      rectfill is equivalent to:(3ps)
.B  gsave(3ps)
.B  newpath(3ps)
.B  x y moveto(3ps)
.B  width 0 rlineto(3ps)
.B  0 height rlineto(3ps)
.B  width neg 0 rlineto(3ps)
.B  closepath(3ps)
.B  fill(3ps)
.B  grestore(3ps)
.B  x y width height matrix rectstroke -(3ps)
.B  numarray rectstroke-(3ps)
.B  numarray matrix rectstroke -(3ps)
.B  numstring rectstroke -(3ps)
.B  strokes a path consisting of one or more rectangles the operands\n      describe. In the first two forms, the operands are four numbers\n      that describe a single rectangle. In the remaining forms, the\n      operand is an array or an encoded number string that describes an\n      arbitrary number of rectangles rectstroke neither reads nor\n      alters the current path in the graphics state.(3ps)
.B  If the matrix operand is present, rectstroke concatenates matrix\n      to the CTM after defining the path, but before stroking it. The\n      matrix applies to the line width and dash pattern, if any, but\n      not to the path itself.(3ps)
.B  In the first two forms, assuming width and height are positive,\n      rectstroke is equivalent to:(3ps)
.B  gsave(3ps)
.B  newpath(3ps)
.B  x y moveto(3ps)
.B  width 0 rlineto(3ps)
.B  0 height rlineto(3ps)
.B  width neg 0 rlineto(3ps)
.B  closepath(3ps)
.B  matrix concat % If matrix operand is supplied(3ps)
.B  stroke(3ps)
.B  grestore(3ps)
.B  replaces the current view clip with a rectangular path the\n      operands describe. In the first form, the operands are four\n      numbers that describe a single rectangle. In the other two forms,\n      the operand is an array or an encoded number string that\n      describes an arbitrary number of rectangles. After computing the\n      new view clipping path, rectviewclip resets the current path to\n      empty, as if by newpath.(3ps)
.B  Except for the manner in which the path is defined, rectviewclip\n      behaves the same as viewclip.(3ps)
.B  Note that if the second or third form is used to specify multiple\n      rectangles, the rectangles are treated together as a single path\n      and used for a single\n\n    (3ps)
.B  changes the name of a file from old to new, where old and new are\n      strings that specify file names on the same storage device.(3ps)
.B  If no such file exists, an (3ps)
.B  If the device does not allow this operation, an (3ps)
.B  error occurs.(3ps)
.B  If an environment-dependent error is detected, an (3ps)
.B  Whether or not an error occurs if a file named new already exists\n      is environment dependent.(3ps)
.B  discards buffered characters belonging to a file object. For an\n      input file, resetfile discards any characters that have been\n      received from the source, but not yet consumed. For an output\n      file, it discards any characters that have been written to the\n      file, but not yet delivered to their destination.(3ps)
.B  resetfile may have other side effects that depend on the\n      properties of the underlying file. For example, it may restart\n      communication via a channel that was blocked waiting for buffer\n      space to become available. resetfile never waits for characters\n      to be received or transmitted.(3ps)
.B  enumerates the names of all instances of a specified resource\n      category or a subset selected by template. category is a name\n      object that identifies a resource category, such as Font.(3ps)
.B  template is a string object to be matched against names of\n      resource instances. For each matching name, resourceforall copies\n      the name into the supplied scratch string, pushes a string object\n      that is the substring of scratch that was actually used, and\n      calls proc. resourceforall does not return any results of its\n      own, but proc may do so.(3ps)
.B  The template is matched against the names of resource instances,\n      treating them as if they were strings. Within the template, all\n      characters are treated literally and are case sensitive, with the\n      exception of the following:(3ps)
.B  * matches zero or more consecutive characters.(3ps)
.B  ? matches exactly one character.(3ps)
.B  causes the next character of the template to be treated\n      literally, even if it is *, ?, or /.(3ps)
.B  Note that the scratch string is reused during every call to proc.\n      If proc wishes to save the string that is passed to it, it must\n      make a copy or use cvn to convert the string to a name. Use of\n      strings instead of names allows resourceforall to function\n      without creating new name objects, which would consume VM\n      needlessly during a large enumeration. It is prudent to provide a\n      scratch string at least as long as the implementation limit for\n      names.(3ps)
.B  It is possible for a resource instance to have a key which is not\n      a name or string. Such a key matches only the template (*). In\n      this case, resourceforall passes the key directly to proc instead\n      of copying it into the scratch string. This case can arise only\n      for a resource instance defined in VM by a previous\n      defineresource; the keys for external resource instances are\n      always names or strings.(3ps)
.B  Like resourcestatus, but unlike findresource, resourceforall\n      never loads a resource instance into VM.(3ps)
.B  resourceforall enumerates the resource instances in order of\n      status (the status value returned by resourcestatus); that is, it\n      enumerates groups in this order:\n\n    (3ps)
.B  Within each group, the order of enumeration is unpredictable. It\n      is unrelated to order of definition or to whether the definition\n      is local or global. A given resource instance is enumerated only\n      once, even if it exists in more than one group. If proc adds or\n      removes resource instances, those instances may or may not appear\n      later in the same enumeration.(3ps)
.B  Like resourcestatus, resourceforall considers both local and\n      global definitions if the current VM allocation mode is local,\n      but only global definitions if the current VM allocation mode is\n      global (see (3ps)
.B  If the specified resource category does not exist, an (3ps)
.B  (if resource exists)(3ps)
.B  false (if not)(3ps)
.B  returns status information about a named resource instance.\n      category is a name object that identifies a resource category,\n      such as Font. key is a name or string object that identifies the\n      resource instance. (Names and strings are interchangeable; keys\n      of other types are permitted but are not recommended.)(3ps)
.B  If the named resource instance exists, either defined in VM or\n      available from some external source, resourcestatus returns two\n      integers and the value true; otherwise, it returns false. Unlike\n      findresource, resourcestatus never loads a resource instance into\n      VM.(3ps)
.B  status is an integer with the following meanings:\n\n    (3ps)
.B  size is an integer giving the estimated VM consumption of the\n      resource instance in bytes. This information may not be available\n      for certain resources; if the size is unknown, -1 is returned.\n      Usually, resourcestatus can obtain the size of a status 1 or 2\n      resource (derived from the %%VMusage comment in the resource\n      file), but it has no general way to determine the size of a\n      status 0 resource. A size value of 0 is returned for implicit\n      resources, whose instances do not occupy VM.(3ps)
.B  If the current VM allocation mode is local, resourcestatus\n      considers both local and global resource definitions, in that\n      order (see (3ps)
.B  If the specified resource category does not exist, an (3ps)
.B  If the current execution context supports job encapsulation and\n      if save represents the outermost saved VM state for this context,\n      then objects in both local and global VM revert to their saved\n      state. If the current context does not support job encapsulation\n      or if save is not the outermost saved VM state for this context,\n      then only objects in local VM revert to their saved state;\n      objects in global VM are undisturbed.(3ps)
.B  restore can reset the VM to the state represented by any save\n      object that is still valid, not necessarily the one produced by\n      the most recent save. After restoring the VM, restore invalidates\n      its save operand along with any other save objects created more\n      recently than that one. That is, a VM snapshot can be used only\n      once; to restore the same environment repeatedly, it is necessary\n      to do a new save each time.(3ps)
.B  restore does not alter the contents of the operand, dictionary,\n      or execution stack, except to pop its save operand. If any of\n      these stacks contains composite objects whose values reside in\n      local VM and are newer than the snapshot being restored, restore\n      executes the invalidrestore error. This restriction applies to\n      save objects and, in Level 1 implementations, to name objects.(3ps)
.B  restore does alter the graphics state stack: It performs the\n      equivalent of a grestoreall and then removes the graphics state\n      created by save from the graphics state stack. restore also\n      resets several per-context parameters to their state at the time\n      of save. These include:\n\n    (3ps)
.B  If the current point is undefined because the current path is\n      empty, rlineto executes the error (3ps)
.B  If the current point is undefined because the current path is\n      empty, rmoveto executes the error (3ps)
.B  performs a circular shift of the objects anyn-1 through any0 on\n      the operand stack by the amount j. Positive j indicates upward\n      motion on the stack, whereas negative j indicates downward\n      motion.(3ps)
.B  n must be a non-negative integer and j must be an integer. roll\n      first removes these operands from the stack; there must be at\n      least n additional elements. roll then performs a circular shift\n      of these n elements by j positions.(3ps)
.B  returns the font that has been selected most recently by setfont\n      or selectfont. Normally, rootfont returns the same result as (3ps)
.B  With no matrix operand, rotate builds a temporary matrix where q\n      is the operand angle in degrees, and concatenates this matrix\n      with the current transformation matrix (CTM). Precisely, rotate\n      replaces the CTM by R x CTM. The effect of this is to rotate the\n      user coordinate system axes about their origin by angle degrees\n      (positive is counterclockwise) with respect to their former\n      orientation. The position of the user coordinate origin and the\n      sizes of the x and y units are unchanged.(3ps)
.B  If the matrix operand is supplied, rotate replaces the value of\n      matrix by R and pushes the modified matrix back on the operand\n      stack. In this case, rotate does not affect the CTM.(3ps)
.B  returns the integer value nearest to num1. If num1 is equally\n      close to its two nearest integers, round returns the greater of\n      the two. The type of the result is the same as the type of the\n      operand.(3ps)
.B  returns an integer representing the current state of the random\n      number generator used by rand. This may later be presented as an\n      operand to (3ps)
.B  run is essentially a convenience operator for the sequence(3ps)
.B  (r) file cvx exec(3ps)
.B  except for its behavior upon abnormal termination. Also, the\n      context of a run cannot be left by executing exit; an attempt to\n      do so produces the error invalidexit. The run operator leaves no\n      results on the operand stack, but the program executed by run may\n      alter the stacks arbitrarily.(3ps)
.B  save creates a snapshot of the current state of the virtual\n      memory (VM) and returns a save object representing that snapshot.\n      Subsequently, this save object may be presented to restore to\n      reset the VM to this snapshot. See the restore operator for a\n      detailed description of what is saved in the snapshot. save also\n      saves the current graphics state by pushing a copy of it on the\n      graphics state stack in a manner similar to (3ps)
.B  With no matrix operand, scale builds a temporary matrix and\n      concatenates this matrix with the current transformation matrix\n      (CTM). Precisely, scale replaces the CTM by S x CTM. The effect\n      of this is to make the x and y units in the user coordinate\n      system the size of sx and sy units in the former user coordinate\n      system. The position of the user coordinate origin and the\n      orientation of the axes are unchanged. If the matrix operand is\n      supplied, scale replaces the value of matrix by S and pushes the\n      modified matrix back on the operand stack In this case, scale\n      does not affect the CTM.(3ps)
.B  applies the scale factor scale to font, producing a new font\#39;\n      whose characters are scaled by scale (in both x and y) when they\n      are shown. scalefont first creates a copy of font, then replaces\n      the new font\#39;s FontMatrix entry with the result of scaling\n      the existing FontMatrix by scale.(3ps)
.B  It inserts two additional entries, OrigFont and ScaleMatrix,\n      whose purpose is internal to the implementation. Finally, it\n      returns the result as font\#39;. Showing characters from the\n      transformed font produces the same results as showing from the\n      original font after having scaled user space by the factor scale\n      in both x and y by means of the (3ps)
.B  operator.(3ps)
.B  scalefont is essentially a convenience operator that enables the\n      desired scale factor to be encapsulated in the font description.\n      Another operator, makefont, performs more general transformations\n      than simple scaling. See the description of makefont for more\n      information on how the transformed font is derived. selectfont\n      combines the effects of findfont and scalefont. The interpreter\n      keeps track of font dictionaries recently created by\n      scalefont.(3ps)
.B  Calling scalefont multiple times with the same font and scale\n      will usually return the same font\#39; rather than create a new\n      one each time. However, it is usually more efficient for a\n      PostScript language program to apply scalefont only once for each\n      font that it needs and to keep track of the resulting font\n      dictionaries on its own.&quot;(3ps)
.B  The (3ps)
.B  has the same semantics as gcheck. This operator is defined for\n      compatibility with existing Display PostScript applications.(3ps)
.B  string false (if not found)(3ps)
.B  looks for the first occurrence of the string seek within string\n      and returns results of this search on the operand stack. The\n      topmost result is a boolean that indicates if the search\n      succeeded. If search finds a subsequence of string whose elements\n      are equal to the elements of seek, it splits string into three\n      segments: pre, the portion of string preceding the match; match,\n      the portion of string that matches seek; and post, the remainder\n      of string. It then pushes the string objects post, match, and pre\n      on the operand stack, followed by the boolean true. All three of\n      these strings are substrings sharing intervals of the value of\n      the original string. If search does not find a match, it pushes\n      the original string and the boolean false.(3ps)
.B  obtains a font whose name is key, transforms it according to\n      scale or matrix, and establishes it as the current font\n      dictionary in the graphics state.(3ps)
.B  selectfont is equivalent to one of the following, according to\n      whether the second operand is a number or a matrix:(3ps)
.B  key (3ps)
.B  If the font named by key is already defined in VM, selectfont\n      obtains the font dictionary directly and does not execute\n      findfont. However, if the font is not defined, selectfont invokes\n      findfont in the normal way. In the latter case, it actually\n      executes the name object (3ps)
.B  On the other hand, redefining (3ps)
.B  procedure.(3ps)
.B  returns an integer that purports to represent the specific\n      machine on which the PostScript interpreter is running. The\n      precise significance of this number (including any claim of its\n      uniqueness) is product dependent.(3ps)
.B  The bounding box is defined by two pairs of coordinates in user\n      space:(3ps)
.B  llx and lly specify the lower-left corner,(3ps)
.B  urx and ury the upper-right corner.(3ps)
.B  It is a rectangle oriented with the user space coordinate system\n      axes. The bounding box remains in effect for the lifetime of the\n      current path-that is, until the next newpath or operator that\n      resets the path implicitly. Any attempt to append a path element\n      with a coordinate lying outside the bounding box will give rise\n      to a rangecheck error.(3ps)
.B  Note that arcs are converted to sequences of curveto operations.\n      The coordinates computed as control points for those curvetos\n      must also fall within the bounding box. This means that the\n      figure of the arc must be entirely enclosed by the bounding box.\n      On the other hand, the bounds checking applies only to the path\n      itself, not to the result of rendering the path.(3ps)
.B  For example, stroking the path may place marks outside the\n      bounding box. This does not cause an error. Although the setbbox\n      operator can be used when defining any path, its main use is in\n      defining a user path, where it is mandatory. That is, a user path\n      procedure passed to one of the user path rendering operators,\n      such as (3ps)
.B  The bounding box information passed to setbbox enables the user\n      path rendering operator to optimize execution.(3ps)
.B  If setbbox appears more than once during definition of a path,\n      the path\#39;s effective bounding box is successively enlarged to\n      enclose the union of all specified bounding boxes. This is not\n      legal in a user path definition. However, this case might arise\n      if uappend is executed multiple times in building up a single\n      current path by concatenating several user paths.(3ps)
.B  If setbbox has established a bounding box, execution of pathbbox\n      returns a result derived from that bounding box instead of one\n      derived from the actual path. The upper-right coordinate values\n      must be greater than or equal to the lower-left values.\n      Otherwise, a (3ps)
.B  error will occur.(3ps)
.B  sets the black generation function parameter in the graphics\n      state. The proc operand must be a procedure that can be called\n      with a number in the range 0.0 to 1.0 (inclusive) on the operand\n      stack and that returns a number in the same range. This procedure\n      computes the value of the black component during conversion from\n      DeviceRGB color space to DeviceCMYK.(3ps)
.B  setblackgeneration sets a graphics state parameter whose effect\n      is device dependent. It should not be used in a page description\n      that is intended to be device independent.(3ps)
.B  BuildGlyph or BuildChar must invoke setcachedevice, (3ps)
.B  wx and wy comprise the basic width vector for this character-in\n      other words, the normal position of the origin of the next\n      character relative to origin of this one. llx and lly are the\n      coordinates of the lower-left corner and urx and ury are the\n      coordinates of the upper-right corner of the character bounding\n      box. The character bounding box is the smallest rectangle,\n      oriented with the character coordinate system axes, that\n      completely encloses all marks placed on the page as a result of\n      executing the character\#39;s description.(3ps)
.B  For a character defined as a path, this may be determined by\n      means of the pathbbox operator. The font machinery needs this\n      information to make decisions about clipping and caching. The\n      declared bounding box must be correct-in other words,\n      sufficiently large to enclose the entire character. If any marks\n      fall outside this bounding box, they will be clipped off and not\n      moved to the current page. setcachedevice installs identical sets\n      of metrics for writing modes 0 and 1, while (3ps)
.B  After execution of setcachedevice and until the termination of\n      the BuildGlyph or BuildChar procedure, execution of color setting\n      operators or image is not allowed. Note that use of the (3ps)
.B  passes two sets of character metrics to the font machinery.(3ps)
.B  w0x and w0y are the distances from the current point(3ps)
.B  to the new current point when showing text in writing mode 0.(3ps)
.B  llx,lly and urx,ury are the distances from origin 0(3ps)
.B  to the lower-left and upper-right corners of the character\n      bounding box.(3ps)
.B  w1x, w1y are the distances from the current point to the new\n      current point when showing text in writing mode 1.(3ps)
.B  vx and vy are the distances from origin 0 to origin 1.(3ps)
.B  Aside from its interpretation of the operands, setcachedevice2\n      works the same as (3ps)
.B  in all respects. After execution of setcachedevice2 and until the\n      termination of the BuildGlyph or BuildChar procedure, execution\n      of color setting operators or image is not allowed. Note that use\n      of the (3ps)
.B  Making the limit larger allows larger characters to be cached,\n      but may decrease the total number of different characters that\n      can be held in the cache simultaneously. Changing this parameter\n      is appropriate only in very unusual situations.(3ps)
.B  The maximum limit for int is implementation dependent,\n      representing the total available size of the font cache (see\n      cachestatus). As a practical matter, int should not be larger\n      than a small fraction of the total font cache size. Modifications\n      to the cache limit parameter obey save and restore.(3ps)
.B  In a Display PostScript system, which supports multiple contexts,\n      this parameter is maintained separately for each context. The\n      parameter set by setcachelimit is the same as the MaxFontItem\n      user parameter set by (3ps)
.B  sets cache parameters as specified by the integer objects above\n      the topmost mark on the stack, then removes all operands and the\n      mark object as if by cleartomark. The number of cache parameters\n      is variable.(3ps)
.B  In future versions of the PostScript interpreter, there may be\n      more than three cache parameters defined. If more operands are\n      supplied to setcacheparams than are needed, the topmost ones are\n      used and the remainder ignored. If fewer are supplied than are\n      needed, setcacheparams implicitly inserts default values between\n      the mark and the first supplied operand.(3ps)
.B  The upper operand specifies the maximum number of bytes the pixel\n      array of a single cached character may occupy, as determined from\n      the information presented by the (3ps)
.B  The lower operand specifies the threshold at which characters may\n      be stored in compressed form rather than as full pixel arrays. If\n      a character\#39;s pixel array requires more than lower bytes to\n      represent, it may be compressed in the cache and reconstituted\n      from the compressed representation each time it is needed. Some\n      devices do not support compression of characters. Setting lower\n      to zero forces all characters to be compressed, permitting more\n      characters to be stored in the cache, but increasing the work\n      required to print them. Setting lower to a value greater than or\n      equal to upper disables compression altogether.(3ps)
.B  The size operand specifies the new size of the font cache in\n      bytes (the bmax value returned by cachestatus). If size is not\n      specified, the font cache size is unchanged. If size lies outside\n      the range of font cache sizes permitted by the implementation,\n      the nearest permissible size is substituted with no error\n      indication.(3ps)
.B  Reducing the font cache size can cause some existing cached\n      characters to be discarded, increasing execution time when those\n      characters are next shown. The parameters set by setcacheparams\n      are the same as the MaxFontCache system parameter and the\n      MinFontCompress and MaxFontItem user parameters, set by\n\n    (3ps)
.B  This is unusual. Most characters have no inherent color, but are\n      painted with the current color within the character\#39;s\n      outline, leaving the area outside unpainted (transparent).\n      Another use of setcharwidth is in defining characters that\n      intentionally change their behavior based on the environment in\n      which they execute. Such characters must not be cached, because\n      that would subvert the intended variable behavior.(3ps)
.B  sets the color space to DeviceCMYK, then sets the current color\n      parameter in the graphics state to a color described by the\n      parameters cyan, magenta, yellow, and black, each of which must\n      be a number in the range 0.0 to 1.0.(3ps)
.B  This establishes the color subsequently used to paint shapes,\n      such as lines, areas, and characters on the current page. Color\n      values set by setcmykcolor are not affected by the black\n      generation and undercolor removal operations.(3ps)
.B  setcmykcolor does not give an error for a value outside the range\n      0 to 1. It substitutes the nearest legal value.(3ps)
.B  sets the current color parameter in the graphics state to that\n      described by the color components comp1, comp2 ..., compn in the\n      current color space.(3ps)
.B  The number of color components and the valid range of color\n      component values depends on the current color space. If the wrong\n      number of components is specified, an error will occur, such as\n      (3ps)
.B  establishes dict as the current CIE based color rendering\n      dictionary in the graphics state. The default color rendering\n      dictionary is device dependent ). setcolorrendering sets a\n      graphics state parameter whose effect is device dependent. It\n      should not be used in a page description that is intended to be\n      device independent.(3ps)
.B  redfreq redang redproc(3ps)
.B  greenfreq greenang greenproc(3ps)
.B  bluefreq blueang blueproc(3ps)
.B  sets the halftone parameter in the graphics state. setcolorscreen\n      specifies halftone screen definitions for all four primary color\n      components of the output device: red, green, blue, and gray or\n      their complements: cyan, magenta, yellow, and black. For each\n      component, setcolorscreen expects frequency, angle, and spot\n      function operands, which it interprets the same as setscreen .\n      setcolorscreen sets a graphics state parameter whose effect is\n      device dependent. It should not be used in a page description\n      that is intended to be device independent.(3ps)
.B  The array must be in the form [ key param1 ... paramn] where key\n      is a name that identifies the color space family and the\n      parameters param1 ... paramn further describe the space as a\n      whole.(3ps)
.B  The second form specifies a color space by giving just its name.\n      This is allowed only for those color spaces that require no\n      parameters, namely DeviceGray, DeviceRGB, DeviceCMYK, and\n      Pattern. Specifying a color space by name is equivalent to\n      specifying it by an array containing just that name. The\n      setcolorspace operator also sets the current color parameter in\n      the graphics state to its initial value, which depends on the\n      color space.(3ps)
.B  Execution of this operator is not permitted in certain\n      circumstances. The details of the color space parameters, the\n      definitions of the components of a specific color in the space,\n      and initial values of those components vary from one color space\n      to another. The initial value of the color space parameter is\n      /DeviceGray.(3ps)
.B  sets the transfer function parameter in the graphics state.\n      setcolortransfer specifies transfer functions for all four\n      primary color components of the output device: red, green, blue,\n      and gray or their complements: cyan, magenta, yellow, and\n      black.(3ps)
.B  Each operand must be a PostScript language procedure that may be\n      called with a number in the range 0.0 to 1.0 (inclusive) on the\n      operand stack and that will return a number in the same range.\n      These procedures adjust the values of device color components.(3ps)
.B  Only those transfer functions corresponding to color components\n      supported by a device will have an effect on that device\#39;s\n      output. For example, redproc, greenproc, and blueproc will have\n      no effect on a black-and-white device, while grayproc will have\n      no effect on an RGB device.(3ps)
.B  setcolortransfer sets a graphics state parameter whose effect is\n      device dependent. It should not be used in a page description\n      that is intended to be device independent.(3ps)
.B  If array is empty (i.e., its length is zero), stroke produces a\n      normal, unbroken line.(3ps)
.B  If array is not empty, stroke produces dashed lines whose pattern\n      is given by the elements of array, all of which must be\n      non-negative numbers and not all zero. stroke interprets the\n      elements of array in sequence as distances along the path,\n      measured in user space.(3ps)
.B  These distances alternately specify the length of a dash and the\n      length of a gap between dashes. stroke uses the contents of array\n      cyclically. When it reaches the end of the array, it starts again\n      at the beginning. Dashed lines wrap around curves and corners\n      just as normal strokes do.(3ps)
.B  The ends of each dash are treated with the (3ps)
.B  The offset operand may be thought of as the &quot;phase&quot; of\n      the dash pattern relative to the start of the path. It is\n      interpreted as a distance into the dash pattern (measured in user\n      space) at which the pattern should be started.(3ps)
.B  Before beginning to stroke a path, stroke cycles through the\n      elements of array, adding up distances and alternating dashes and\n      gaps as usual, but without generating any output. When it has\n      travelled the offset distance into the dash pattern, it starts\n      stroking the path from its beginning, using the dash pattern from\n      the point that has been reached. Each subpath of a path is\n      treated independently-in other words, the dash pattern is\n      restarted and offset applied to it at the beginning of each\n      subpath.(3ps)
.B  attempts to set one or more parameters for the device identified\n      by string according to keys and new values contained in the dict\n      operand. The string identifies a storage or I/O device(3ps)
.B  . The dictionary is a container for key-value pairs; setdevparams\n      reads the information from the dictionary but does not retain the\n      dictionary itself. Device parameters whose keys are not mentioned\n      in dict are left unchanged. Each parameter is identified by a\n      key, which is always a name object. The value is usually (but not\n      necessarily) an integer. The names of I/O devices and the names\n      and semantics of their parameters are product-dependent. They are\n      not documented in this manual, but rather in product-specific\n      documentation.(3ps)
.B  Permission to alter device parameters is controlled by a\n      password. The dictionary must contain an entry named Password\n      whose value is the system parameter password (a string or\n      integer). If the password is incorrect, setdevparams executes an\n      (3ps)
.B  No error occurs if parameters cannot be stored permanently.\n      Various errors are possible. Details of error behavior are\n      product dependent, but the following behavior is typical:\n\n    (3ps)
.B  repositions an existing open file to a new position so the next\n      read or write operation will commence at that position. The\n      position operand is a non-negative integer interpreted as number\n      of bytes from the beginning of the file. For an output file,\n      setfileposition first performs an implicit\n\n    (3ps)
.B  If the flatness parameter is large enough to cause visible\n      straight line segments to appear, the result is unpredictable.\n      The purpose of setflat is to control the accuracy of curve\n      rendering, not to draw inscribed polygons.(3ps)
.B  The choice of flatness value is a trade-off between accuracy and\n      execution efficiency. Very small values (less than 1 device\n      pixel) produce very accurate curves at high cost, because\n      enormous numbers of tiny line segments must be produced. Larger\n      values produce cruder approximations with substantially less\n      computation. A default value of the flatness parameter is\n      established by the device setup routine for each raster output\n      device. This value is based on characteristics of that device and\n      is the one suitable for most applications.(3ps)
.B  The acceptable range of values for num is 0.2 to 100. Values\n      outside this range are forced into range without error\n      indication. setflat sets a graphics state parameter whose effect\n      is device dependent. It should not be used in a page description\n      that is intended to be device independent.(3ps)
.B  findfont(3ps)
.B  scalefont(3ps)
.B  makefont(3ps)
.B  currentfont(3ps)
.B  scalefont(3ps)
.B  makefont(3ps)
.B  findfont(3ps)
.B  selectfont(3ps)

