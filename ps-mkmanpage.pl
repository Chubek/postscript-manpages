use strict;
use warnings;
use POSIX qw(strftime);

sub gen_manpage {
	my ($name, $signature, $description, $example, $errors, $see_also) = @_;

	my $gen_creds = sub {
	    my $creds = "";
	    $creds .= q(.\");
	    $creds .= "PostScript Operator `$name` -- Manpage\n";
	    $creds .= q(.\" Manual page for PostScript generated by `ps-mkmanpage.pl`);
	    $creds .= "\n";
	    $creds .= q(.\" License: This is free and unencumbered software released into the public domain.);
	    $creds .= "\n";
	    $creds .= q(.\");
	    $creds .= "\n";
	    $creds .= q(.\" Anyone is free to copy, modify, publish, use, compile, sell, or);
	    $creds .= "\n";
	    $creds .= q(.\" distribute this software, either in source code form or as a compiled);
	    $creds .= "\n";
	    $creds .= q(.\" binary, for any purpose, commercial or non-commercial, and by any);
	    $creds .= "\n";
	    $creds .= q(.\" means.);
	    $creds .= "\n";
	    $creds .= q(.\");
	    $creds .= "\n";
	    $creds .= q(.\" Copyright: (CC) Unlicense - 2024 Chubak Bidpaa);
	    $creds .= "\n";
	    return $creds;
	};

	my $gen_title = sub {
		my $current_date = strftime("%Y-%m-%d", localtime);
		return qq(.TH $name 1ps "$current_date\n" "" "PostScript Operators Manual");
	};

	my $gen_signature = sub {
		my $signature_gen = "";
		$signature_gen .= ".SH SIGNATURE\n";
		$signature_gen .= ".B $signature\n";
		$signature_gen .= "\n";
		return $signature_gen;
	};

	my $gen_description = sub {
		my $description_gen = $description;
		$description_gen =~ s/\s+/ /g;
		$description_gen =~ s/\\n/ .br /g;
		$description_gen .= "\n";
		return $description_gen;
	};

	my $gen_example = sub {
		if ($example eq "") { return ".RI (NONE)\n"; }

		my $example_gen = "";
		$example_gen .= ".RI\n";
		$example_gen .= $example;
		$example_gen .= "\n";
		$example_gen .= ".RE\n";
		$example_gen .= "\n";
		return $example_gen;
	};

	my $gen_errors = sub {
		if ($errors eq "") { return ".RI (NONE)\n"; }

		my $errors_list = split /\n+/, $errors;
		my $errors_gen = "";
		foreach my $err ($errors_list) {
			$errors_gen .= ".IP \\(bu 2\n";
			$errors_gen .= "$err(3ps)\n";
			$errors_gen .= "\n";
		}
		$errors_gen .= "\n";
		return $errors_gen;
	};

	my $gen_see_also = sub {
		if ($see_also eq "") { return ".RI (NONE)\n"; }

		my $see_also_list = split /\n+/, $see_also;
		my $see_also_gen = "";
		foreach my $ref ($see_also_list) {
			$see_also_gen .= ".IP \\(bu 2\n";
			$see_also_gen .= "$ref(3ps)\n";
			$see_also_gen .= "\n";
		}
		$see_also_gen .= "\n";
		return $see_also_gen;
	};

	`mkdir -p ps-manpages`;
	open (my $fho, '>', "ps-manpages/$name.3ps");

	print $fho $gen_creds->();
	print $fho $gen_title->();
	print $fho $gen_signature->();
	print $fho $gen_description->();
	print $fho $gen_example->();
	print $fho $gen_errors->();
	print $fho $gen_see_also->();

	close($fho);

}


sub parse_operator {
	my ($op) = @_;

	open (my $fhi, '<', "ps-manpages.hxpipe");

	my $engage = 0;
	my $signature = "";
	my $description = "";
	my $example = "";
	my $errors = "";
	my $see_also = "";

	my $mode = \$description;

	while (<$fhi>) {
		next if /^\|br$/;
		next if /^-\\n$/;
		next if /^A.+$/;
		if (/^-$op$/) { $engage = 1; }
		elsif (/^\|hr$/ && $engage) { 
			close($fhi); 
			&gen_manpage($op, $signature, $description, $example, $errors, $see_also);
			exit(4); 
		}
		elsif (/- (.+)$/) { $signature .= "\n$1"; }
		elsif (/^-\\n\s+(.+)/) {
			my $capture = $1;
			if ($capture =~ /EXAMPLE:/) {  $mode = \$example; next; }
			elsif ($capture =~ /SEE\s+ALSO:/) { $mode = \$see_also; next; }
			elsif ($capture =~ /ERRORS:/) {  $mode = \$errors; next; }
			else {	$$mode .= "\n$1"; }
		}
		elsif (/^-([a-z]+)$/ && $engage) { $$mode .= "\n$1"; }
	}
}


&parse_operator("abs");
