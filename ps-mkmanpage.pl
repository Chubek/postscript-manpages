use strict;
use warnings;
use POSIX qw(strftime);

sub gen_manpage {
	my ($name, $signature, $description, $example, $errors, $see_also) = @_;

	my $gen_creds = sub {
	    my $creds = "";
	    $creds .= q(.\");
	    $creds .= "PostScript Operator `$name` -- Manpage";
	    $creds .= q(.\" Manual page for PostScript generated by `ps-mkmanpage.pl`);
	    $creds .= "\n";
	    $creds .= q(.\" License: This is free and unencumbered software released into the public domain.);
	    $creds .= "\n";
	    $creds .= q(.\");
	    $creds .= "\n";
	    $creds .= q(.\" Anyone is free to copy, modify, publish, use, compile, sell, or);
	    $creds .= "\n";
	    $creds .= q(.\" distribute this software, either in source code form or as a compiled);
	    $creds .= "\n";
	    $creds .= q(.\" binary, for any purpose, commercial or non-commercial, and by any);
	    $creds .= "\n";
	    $creds .= q(.\" means.);
	    $creds .= "\n";
	    $creds .= q(.\");
	    $creds .= "\n";
	    $creds .= q(.\" Copyright: (CC) Unlicense - 2024 Chubak Bidpaa);
	    return $creds;
	};

	my $gen_tag = sub {
		my ($tag_name, $tag_params, $tag_body) = @_;
		return "." . $tag_name . " " . join(" ", @$tag_params) . "\n" . $tag_body;	
	};

	my $gen_title = sub {
		my $current_date = strftime("%Y-%m-%d", localtime);
		return $gen_tag->("TH", [$name, 
				'1ps', 
				q(""), 
				qq("$current_date"), 
				q("PostScript Operator Manual")], "");
	};

	my $gen_signature = sub {
		$signature =~ s/^\s//;
		return $gen_tag->('SH', ['POSTFIX SIGNATURE'], $signature);
	};

	my $gen_description = sub {
		$description =~ s/\s+/ /g;
		$description =~ s/\\n/.br/g;
		return $gen_tag->('SH', ['DESCRIPTION'], $description);
	};

	my $gen_example = sub {
		if ($example =~ /^\s*$/) {
			return $gen_tag->('SH', ['EXAMPLE'], '(NONE)');
		}

		return $gen_tag->('RI', [], $example) . $gen_tag->('RE', [], '');
	};

	my $gen_errors = sub {
		if ($errors =~ /^\s*$/) {
			return $gen_tag->('SH', ['ERRORS'], '(NONE)');
		}

		my $gen_error_list = sub {
			my $acc = "";

			foreach my $err (split /\n/, $errors) {
				next if ($err =~ /^\s*$/);
				$acc .= $gen_tag->('IP', ['(bu', '2'], "$err(3ps)");
			}

			return $acc;
		};

		return $gen_tag->('SH', ['ERRORS'], $gen_error_list->());

	};

	my $gen_see_also = sub {
		if ($see_also =~ /^\s*$/) {
			return $gen_tag->('SH', ['SEE ALSO'], '(NONE)');
		}

		my $gen_also_list = sub {
			my $acc = "";

			foreach my $also (split /\n/, $see_also) {
				next if ($also =~ /^\s*$/);
				$acc .= $gen_tag->('IP', ['(bu', '2'], "$also(3ps)");
			}

			return $acc;
		};

		return $gen_tag->('SH', ['ERRORS'], $gen_also_list->());
	};

	`mkdir -p ps-manpages`;
	open (my $fho, '>', "ps-manpages/$name.3ps");

	print $fho $gen_creds->();
	print $fho $gen_title->();
	print $fho $gen_signature->();
	print $fho $gen_description->();
	print $fho $gen_example->();
	print $fho $gen_errors->();
	print $fho $gen_see_also->();

	close($fho);

}


sub parse_operator {
	my ($op) = @_;

	open (my $fhi, '<', "ps-manpages.hxpipe");

	my $engage = 0;
	my $signature = "";
	my $description = "";
	my $example = "";
	my $errors = "";
	my $see_also = "";

	my $mode = \$description;

	while (<$fhi>) {
		next if /^\|br$/;
		next if /^-\\n$/;
		next if /^A.+$/;
		if (/^-$op$/) { $engage = 1; }
		elsif (/^\|hr$/ && $engage) { 
			close($fhi); 
			&gen_manpage($op, $signature, $description, $example, $errors, $see_also);
			exit(4); 
		}
		elsif (/- (.+)$/) { $signature .= "\n$1"; }
		elsif (/^-\\n\s+(.+)/) {
			my $capture = $1;
			if ($capture =~ /EXAMPLE:/) {  $mode = \$example; next; }
			elsif ($capture =~ /SEE\s+ALSO:/) { $mode = \$see_also; next; }
			elsif ($capture =~ /ERRORS:/) {  $mode = \$errors; next; }
			else {	$$mode .= "\n$1"; }
		}
		elsif (/^-([a-z]+)$/ && $engage) { $$mode .= "\n$1"; }
	}
}


&parse_operator("abs");
